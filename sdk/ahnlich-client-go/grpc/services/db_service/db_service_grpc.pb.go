// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/db_service.proto

package db_service

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	pipeline "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/pipeline"
	query "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/query"
	server "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/server"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DBService_CreateStore_FullMethodName                   = "/services.db_service.DBService/CreateStore"
	DBService_CreatePredIndex_FullMethodName               = "/services.db_service.DBService/CreatePredIndex"
	DBService_CreateNonLinearAlgorithmIndex_FullMethodName = "/services.db_service.DBService/CreateNonLinearAlgorithmIndex"
	DBService_GetKey_FullMethodName                        = "/services.db_service.DBService/GetKey"
	DBService_GetPred_FullMethodName                       = "/services.db_service.DBService/GetPred"
	DBService_GetSimN_FullMethodName                       = "/services.db_service.DBService/GetSimN"
	DBService_Set_FullMethodName                           = "/services.db_service.DBService/Set"
	DBService_DropPredIndex_FullMethodName                 = "/services.db_service.DBService/DropPredIndex"
	DBService_DropNonLinearAlgorithmIndex_FullMethodName   = "/services.db_service.DBService/DropNonLinearAlgorithmIndex"
	DBService_DelKey_FullMethodName                        = "/services.db_service.DBService/DelKey"
	DBService_DelPred_FullMethodName                       = "/services.db_service.DBService/DelPred"
	DBService_DropStore_FullMethodName                     = "/services.db_service.DBService/DropStore"
	DBService_ListClients_FullMethodName                   = "/services.db_service.DBService/ListClients"
	DBService_ListStores_FullMethodName                    = "/services.db_service.DBService/ListStores"
	DBService_InfoServer_FullMethodName                    = "/services.db_service.DBService/InfoServer"
	DBService_Ping_FullMethodName                          = "/services.db_service.DBService/Ping"
	DBService_Pipeline_FullMethodName                      = "/services.db_service.DBService/Pipeline"
)

// DBServiceClient is the client API for DBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBServiceClient interface {
	// * Create methods *
	CreateStore(ctx context.Context, in *query.CreateStore, opts ...grpc.CallOption) (*server.Unit, error)
	CreatePredIndex(ctx context.Context, in *query.CreatePredIndex, opts ...grpc.CallOption) (*server.CreateIndex, error)
	CreateNonLinearAlgorithmIndex(ctx context.Context, in *query.CreateNonLinearAlgorithmIndex, opts ...grpc.CallOption) (*server.CreateIndex, error)
	// * Read methods *
	GetKey(ctx context.Context, in *query.GetKey, opts ...grpc.CallOption) (*server.Get, error)
	GetPred(ctx context.Context, in *query.GetPred, opts ...grpc.CallOption) (*server.Get, error)
	GetSimN(ctx context.Context, in *query.GetSimN, opts ...grpc.CallOption) (*server.GetSimN, error)
	// * Update methods *
	Set(ctx context.Context, in *query.Set, opts ...grpc.CallOption) (*server.Set, error)
	// * Delete methods *
	DropPredIndex(ctx context.Context, in *query.DropPredIndex, opts ...grpc.CallOption) (*server.Del, error)
	DropNonLinearAlgorithmIndex(ctx context.Context, in *query.DropNonLinearAlgorithmIndex, opts ...grpc.CallOption) (*server.Del, error)
	DelKey(ctx context.Context, in *query.DelKey, opts ...grpc.CallOption) (*server.Del, error)
	DelPred(ctx context.Context, in *query.DelPred, opts ...grpc.CallOption) (*server.Del, error)
	DropStore(ctx context.Context, in *query.DropStore, opts ...grpc.CallOption) (*server.Del, error)
	// * Ancillary info methods *
	ListClients(ctx context.Context, in *query.ListClients, opts ...grpc.CallOption) (*server.ClientList, error)
	ListStores(ctx context.Context, in *query.ListStores, opts ...grpc.CallOption) (*server.StoreList, error)
	InfoServer(ctx context.Context, in *query.InfoServer, opts ...grpc.CallOption) (*server.InfoServer, error)
	Ping(ctx context.Context, in *query.Ping, opts ...grpc.CallOption) (*server.Pong, error)
	// * Pipeline method for all methods *
	Pipeline(ctx context.Context, in *pipeline.DBRequestPipeline, opts ...grpc.CallOption) (*pipeline.DBResponsePipeline, error)
}

type dBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBServiceClient(cc grpc.ClientConnInterface) DBServiceClient {
	return &dBServiceClient{cc}
}

func (c *dBServiceClient) CreateStore(ctx context.Context, in *query.CreateStore, opts ...grpc.CallOption) (*server.Unit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Unit)
	err := c.cc.Invoke(ctx, DBService_CreateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CreatePredIndex(ctx context.Context, in *query.CreatePredIndex, opts ...grpc.CallOption) (*server.CreateIndex, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.CreateIndex)
	err := c.cc.Invoke(ctx, DBService_CreatePredIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CreateNonLinearAlgorithmIndex(ctx context.Context, in *query.CreateNonLinearAlgorithmIndex, opts ...grpc.CallOption) (*server.CreateIndex, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.CreateIndex)
	err := c.cc.Invoke(ctx, DBService_CreateNonLinearAlgorithmIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetKey(ctx context.Context, in *query.GetKey, opts ...grpc.CallOption) (*server.Get, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Get)
	err := c.cc.Invoke(ctx, DBService_GetKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetPred(ctx context.Context, in *query.GetPred, opts ...grpc.CallOption) (*server.Get, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Get)
	err := c.cc.Invoke(ctx, DBService_GetPred_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetSimN(ctx context.Context, in *query.GetSimN, opts ...grpc.CallOption) (*server.GetSimN, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.GetSimN)
	err := c.cc.Invoke(ctx, DBService_GetSimN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) Set(ctx context.Context, in *query.Set, opts ...grpc.CallOption) (*server.Set, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Set)
	err := c.cc.Invoke(ctx, DBService_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DropPredIndex(ctx context.Context, in *query.DropPredIndex, opts ...grpc.CallOption) (*server.Del, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Del)
	err := c.cc.Invoke(ctx, DBService_DropPredIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DropNonLinearAlgorithmIndex(ctx context.Context, in *query.DropNonLinearAlgorithmIndex, opts ...grpc.CallOption) (*server.Del, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Del)
	err := c.cc.Invoke(ctx, DBService_DropNonLinearAlgorithmIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DelKey(ctx context.Context, in *query.DelKey, opts ...grpc.CallOption) (*server.Del, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Del)
	err := c.cc.Invoke(ctx, DBService_DelKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DelPred(ctx context.Context, in *query.DelPred, opts ...grpc.CallOption) (*server.Del, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Del)
	err := c.cc.Invoke(ctx, DBService_DelPred_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DropStore(ctx context.Context, in *query.DropStore, opts ...grpc.CallOption) (*server.Del, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Del)
	err := c.cc.Invoke(ctx, DBService_DropStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) ListClients(ctx context.Context, in *query.ListClients, opts ...grpc.CallOption) (*server.ClientList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.ClientList)
	err := c.cc.Invoke(ctx, DBService_ListClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) ListStores(ctx context.Context, in *query.ListStores, opts ...grpc.CallOption) (*server.StoreList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.StoreList)
	err := c.cc.Invoke(ctx, DBService_ListStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) InfoServer(ctx context.Context, in *query.InfoServer, opts ...grpc.CallOption) (*server.InfoServer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.InfoServer)
	err := c.cc.Invoke(ctx, DBService_InfoServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) Ping(ctx context.Context, in *query.Ping, opts ...grpc.CallOption) (*server.Pong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(server.Pong)
	err := c.cc.Invoke(ctx, DBService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) Pipeline(ctx context.Context, in *pipeline.DBRequestPipeline, opts ...grpc.CallOption) (*pipeline.DBResponsePipeline, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pipeline.DBResponsePipeline)
	err := c.cc.Invoke(ctx, DBService_Pipeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServiceServer is the server API for DBService service.
// All implementations must embed UnimplementedDBServiceServer
// for forward compatibility.
type DBServiceServer interface {
	// * Create methods *
	CreateStore(context.Context, *query.CreateStore) (*server.Unit, error)
	CreatePredIndex(context.Context, *query.CreatePredIndex) (*server.CreateIndex, error)
	CreateNonLinearAlgorithmIndex(context.Context, *query.CreateNonLinearAlgorithmIndex) (*server.CreateIndex, error)
	// * Read methods *
	GetKey(context.Context, *query.GetKey) (*server.Get, error)
	GetPred(context.Context, *query.GetPred) (*server.Get, error)
	GetSimN(context.Context, *query.GetSimN) (*server.GetSimN, error)
	// * Update methods *
	Set(context.Context, *query.Set) (*server.Set, error)
	// * Delete methods *
	DropPredIndex(context.Context, *query.DropPredIndex) (*server.Del, error)
	DropNonLinearAlgorithmIndex(context.Context, *query.DropNonLinearAlgorithmIndex) (*server.Del, error)
	DelKey(context.Context, *query.DelKey) (*server.Del, error)
	DelPred(context.Context, *query.DelPred) (*server.Del, error)
	DropStore(context.Context, *query.DropStore) (*server.Del, error)
	// * Ancillary info methods *
	ListClients(context.Context, *query.ListClients) (*server.ClientList, error)
	ListStores(context.Context, *query.ListStores) (*server.StoreList, error)
	InfoServer(context.Context, *query.InfoServer) (*server.InfoServer, error)
	Ping(context.Context, *query.Ping) (*server.Pong, error)
	// * Pipeline method for all methods *
	Pipeline(context.Context, *pipeline.DBRequestPipeline) (*pipeline.DBResponsePipeline, error)
	mustEmbedUnimplementedDBServiceServer()
}

// UnimplementedDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBServiceServer struct{}

func (UnimplementedDBServiceServer) CreateStore(context.Context, *query.CreateStore) (*server.Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedDBServiceServer) CreatePredIndex(context.Context, *query.CreatePredIndex) (*server.CreateIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePredIndex not implemented")
}
func (UnimplementedDBServiceServer) CreateNonLinearAlgorithmIndex(context.Context, *query.CreateNonLinearAlgorithmIndex) (*server.CreateIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNonLinearAlgorithmIndex not implemented")
}
func (UnimplementedDBServiceServer) GetKey(context.Context, *query.GetKey) (*server.Get, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedDBServiceServer) GetPred(context.Context, *query.GetPred) (*server.Get, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPred not implemented")
}
func (UnimplementedDBServiceServer) GetSimN(context.Context, *query.GetSimN) (*server.GetSimN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimN not implemented")
}
func (UnimplementedDBServiceServer) Set(context.Context, *query.Set) (*server.Set, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDBServiceServer) DropPredIndex(context.Context, *query.DropPredIndex) (*server.Del, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPredIndex not implemented")
}
func (UnimplementedDBServiceServer) DropNonLinearAlgorithmIndex(context.Context, *query.DropNonLinearAlgorithmIndex) (*server.Del, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropNonLinearAlgorithmIndex not implemented")
}
func (UnimplementedDBServiceServer) DelKey(context.Context, *query.DelKey) (*server.Del, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelKey not implemented")
}
func (UnimplementedDBServiceServer) DelPred(context.Context, *query.DelPred) (*server.Del, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPred not implemented")
}
func (UnimplementedDBServiceServer) DropStore(context.Context, *query.DropStore) (*server.Del, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropStore not implemented")
}
func (UnimplementedDBServiceServer) ListClients(context.Context, *query.ListClients) (*server.ClientList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedDBServiceServer) ListStores(context.Context, *query.ListStores) (*server.StoreList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedDBServiceServer) InfoServer(context.Context, *query.InfoServer) (*server.InfoServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoServer not implemented")
}
func (UnimplementedDBServiceServer) Ping(context.Context, *query.Ping) (*server.Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDBServiceServer) Pipeline(context.Context, *pipeline.DBRequestPipeline) (*pipeline.DBResponsePipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pipeline not implemented")
}
func (UnimplementedDBServiceServer) mustEmbedUnimplementedDBServiceServer() {}
func (UnimplementedDBServiceServer) testEmbeddedByValue()                   {}

// UnsafeDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBServiceServer will
// result in compilation errors.
type UnsafeDBServiceServer interface {
	mustEmbedUnimplementedDBServiceServer()
}

func RegisterDBServiceServer(s grpc.ServiceRegistrar, srv DBServiceServer) {
	// If the following call pancis, it indicates UnimplementedDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBService_ServiceDesc, srv)
}

func _DBService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.CreateStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CreateStore(ctx, req.(*query.CreateStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CreatePredIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.CreatePredIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CreatePredIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CreatePredIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CreatePredIndex(ctx, req.(*query.CreatePredIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CreateNonLinearAlgorithmIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.CreateNonLinearAlgorithmIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CreateNonLinearAlgorithmIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CreateNonLinearAlgorithmIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CreateNonLinearAlgorithmIndex(ctx, req.(*query.CreateNonLinearAlgorithmIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.GetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetKey(ctx, req.(*query.GetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetPred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.GetPred)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetPred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetPred_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetPred(ctx, req.(*query.GetPred))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetSimN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.GetSimN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetSimN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetSimN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetSimN(ctx, req.(*query.GetSimN))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.Set)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).Set(ctx, req.(*query.Set))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DropPredIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.DropPredIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DropPredIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DropPredIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DropPredIndex(ctx, req.(*query.DropPredIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DropNonLinearAlgorithmIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.DropNonLinearAlgorithmIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DropNonLinearAlgorithmIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DropNonLinearAlgorithmIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DropNonLinearAlgorithmIndex(ctx, req.(*query.DropNonLinearAlgorithmIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DelKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.DelKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DelKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DelKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DelKey(ctx, req.(*query.DelKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DelPred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.DelPred)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DelPred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DelPred_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DelPred(ctx, req.(*query.DelPred))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DropStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.DropStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DropStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DropStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DropStore(ctx, req.(*query.DropStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.ListClients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).ListClients(ctx, req.(*query.ListClients))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.ListStores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_ListStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).ListStores(ctx, req.(*query.ListStores))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_InfoServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.InfoServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).InfoServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_InfoServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).InfoServer(ctx, req.(*query.InfoServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).Ping(ctx, req.(*query.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_Pipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pipeline.DBRequestPipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).Pipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_Pipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).Pipeline(ctx, req.(*pipeline.DBRequestPipeline))
	}
	return interceptor(ctx, in, info, handler)
}

// DBService_ServiceDesc is the grpc.ServiceDesc for DBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.db_service.DBService",
	HandlerType: (*DBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStore",
			Handler:    _DBService_CreateStore_Handler,
		},
		{
			MethodName: "CreatePredIndex",
			Handler:    _DBService_CreatePredIndex_Handler,
		},
		{
			MethodName: "CreateNonLinearAlgorithmIndex",
			Handler:    _DBService_CreateNonLinearAlgorithmIndex_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _DBService_GetKey_Handler,
		},
		{
			MethodName: "GetPred",
			Handler:    _DBService_GetPred_Handler,
		},
		{
			MethodName: "GetSimN",
			Handler:    _DBService_GetSimN_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _DBService_Set_Handler,
		},
		{
			MethodName: "DropPredIndex",
			Handler:    _DBService_DropPredIndex_Handler,
		},
		{
			MethodName: "DropNonLinearAlgorithmIndex",
			Handler:    _DBService_DropNonLinearAlgorithmIndex_Handler,
		},
		{
			MethodName: "DelKey",
			Handler:    _DBService_DelKey_Handler,
		},
		{
			MethodName: "DelPred",
			Handler:    _DBService_DelPred_Handler,
		},
		{
			MethodName: "DropStore",
			Handler:    _DBService_DropStore_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _DBService_ListClients_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _DBService_ListStores_Handler,
		},
		{
			MethodName: "InfoServer",
			Handler:    _DBService_InfoServer_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DBService_Ping_Handler,
		},
		{
			MethodName: "Pipeline",
			Handler:    _DBService_Pipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/db_service.proto",
}
