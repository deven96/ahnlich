// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: db/pipeline.proto

package pipeline

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	query "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/query"
	server "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/server"
	info "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/shared/info"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DBQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*DBQuery_CreateStore
	//	*DBQuery_GetKey
	//	*DBQuery_GetPred
	//	*DBQuery_GetSimN
	//	*DBQuery_CreatePredIndex
	//	*DBQuery_CreateNonLinearAlgorithmIndex
	//	*DBQuery_DropPredIndex
	//	*DBQuery_DropNonLinearAlgorithmIndex
	//	*DBQuery_Set
	//	*DBQuery_DelKey
	//	*DBQuery_DelPred
	//	*DBQuery_DropStore
	//	*DBQuery_InfoServer
	//	*DBQuery_ListStores
	//	*DBQuery_ListClients
	//	*DBQuery_Ping
	Query isDBQuery_Query `protobuf_oneof:"query"`
}

func (x *DBQuery) Reset() {
	*x = DBQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQuery) ProtoMessage() {}

func (x *DBQuery) ProtoReflect() protoreflect.Message {
	mi := &file_db_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQuery.ProtoReflect.Descriptor instead.
func (*DBQuery) Descriptor() ([]byte, []int) {
	return file_db_pipeline_proto_rawDescGZIP(), []int{0}
}

func (m *DBQuery) GetQuery() isDBQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *DBQuery) GetCreateStore() *query.CreateStore {
	if x, ok := x.GetQuery().(*DBQuery_CreateStore); ok {
		return x.CreateStore
	}
	return nil
}

func (x *DBQuery) GetGetKey() *query.GetKey {
	if x, ok := x.GetQuery().(*DBQuery_GetKey); ok {
		return x.GetKey
	}
	return nil
}

func (x *DBQuery) GetGetPred() *query.GetPred {
	if x, ok := x.GetQuery().(*DBQuery_GetPred); ok {
		return x.GetPred
	}
	return nil
}

func (x *DBQuery) GetGetSimN() *query.GetSimN {
	if x, ok := x.GetQuery().(*DBQuery_GetSimN); ok {
		return x.GetSimN
	}
	return nil
}

func (x *DBQuery) GetCreatePredIndex() *query.CreatePredIndex {
	if x, ok := x.GetQuery().(*DBQuery_CreatePredIndex); ok {
		return x.CreatePredIndex
	}
	return nil
}

func (x *DBQuery) GetCreateNonLinearAlgorithmIndex() *query.CreateNonLinearAlgorithmIndex {
	if x, ok := x.GetQuery().(*DBQuery_CreateNonLinearAlgorithmIndex); ok {
		return x.CreateNonLinearAlgorithmIndex
	}
	return nil
}

func (x *DBQuery) GetDropPredIndex() *query.DropPredIndex {
	if x, ok := x.GetQuery().(*DBQuery_DropPredIndex); ok {
		return x.DropPredIndex
	}
	return nil
}

func (x *DBQuery) GetDropNonLinearAlgorithmIndex() *query.DropNonLinearAlgorithmIndex {
	if x, ok := x.GetQuery().(*DBQuery_DropNonLinearAlgorithmIndex); ok {
		return x.DropNonLinearAlgorithmIndex
	}
	return nil
}

func (x *DBQuery) GetSet() *query.Set {
	if x, ok := x.GetQuery().(*DBQuery_Set); ok {
		return x.Set
	}
	return nil
}

func (x *DBQuery) GetDelKey() *query.DelKey {
	if x, ok := x.GetQuery().(*DBQuery_DelKey); ok {
		return x.DelKey
	}
	return nil
}

func (x *DBQuery) GetDelPred() *query.DelPred {
	if x, ok := x.GetQuery().(*DBQuery_DelPred); ok {
		return x.DelPred
	}
	return nil
}

func (x *DBQuery) GetDropStore() *query.DropStore {
	if x, ok := x.GetQuery().(*DBQuery_DropStore); ok {
		return x.DropStore
	}
	return nil
}

func (x *DBQuery) GetInfoServer() *query.InfoServer {
	if x, ok := x.GetQuery().(*DBQuery_InfoServer); ok {
		return x.InfoServer
	}
	return nil
}

func (x *DBQuery) GetListStores() *query.ListStores {
	if x, ok := x.GetQuery().(*DBQuery_ListStores); ok {
		return x.ListStores
	}
	return nil
}

func (x *DBQuery) GetListClients() *query.ListClients {
	if x, ok := x.GetQuery().(*DBQuery_ListClients); ok {
		return x.ListClients
	}
	return nil
}

func (x *DBQuery) GetPing() *query.Ping {
	if x, ok := x.GetQuery().(*DBQuery_Ping); ok {
		return x.Ping
	}
	return nil
}

type isDBQuery_Query interface {
	isDBQuery_Query()
}

type DBQuery_CreateStore struct {
	CreateStore *query.CreateStore `protobuf:"bytes,1,opt,name=create_store,json=createStore,proto3,oneof"`
}

type DBQuery_GetKey struct {
	GetKey *query.GetKey `protobuf:"bytes,2,opt,name=get_key,json=getKey,proto3,oneof"`
}

type DBQuery_GetPred struct {
	GetPred *query.GetPred `protobuf:"bytes,3,opt,name=get_pred,json=getPred,proto3,oneof"`
}

type DBQuery_GetSimN struct {
	GetSimN *query.GetSimN `protobuf:"bytes,4,opt,name=get_sim_n,json=getSimN,proto3,oneof"`
}

type DBQuery_CreatePredIndex struct {
	CreatePredIndex *query.CreatePredIndex `protobuf:"bytes,5,opt,name=create_pred_index,json=createPredIndex,proto3,oneof"`
}

type DBQuery_CreateNonLinearAlgorithmIndex struct {
	CreateNonLinearAlgorithmIndex *query.CreateNonLinearAlgorithmIndex `protobuf:"bytes,6,opt,name=create_non_linear_algorithm_index,json=createNonLinearAlgorithmIndex,proto3,oneof"`
}

type DBQuery_DropPredIndex struct {
	DropPredIndex *query.DropPredIndex `protobuf:"bytes,7,opt,name=drop_pred_index,json=dropPredIndex,proto3,oneof"`
}

type DBQuery_DropNonLinearAlgorithmIndex struct {
	DropNonLinearAlgorithmIndex *query.DropNonLinearAlgorithmIndex `protobuf:"bytes,8,opt,name=drop_non_linear_algorithm_index,json=dropNonLinearAlgorithmIndex,proto3,oneof"`
}

type DBQuery_Set struct {
	Set *query.Set `protobuf:"bytes,9,opt,name=set,proto3,oneof"`
}

type DBQuery_DelKey struct {
	DelKey *query.DelKey `protobuf:"bytes,10,opt,name=del_key,json=delKey,proto3,oneof"`
}

type DBQuery_DelPred struct {
	DelPred *query.DelPred `protobuf:"bytes,11,opt,name=del_pred,json=delPred,proto3,oneof"`
}

type DBQuery_DropStore struct {
	DropStore *query.DropStore `protobuf:"bytes,12,opt,name=drop_store,json=dropStore,proto3,oneof"`
}

type DBQuery_InfoServer struct {
	InfoServer *query.InfoServer `protobuf:"bytes,13,opt,name=info_server,json=infoServer,proto3,oneof"`
}

type DBQuery_ListStores struct {
	ListStores *query.ListStores `protobuf:"bytes,14,opt,name=list_stores,json=listStores,proto3,oneof"`
}

type DBQuery_ListClients struct {
	ListClients *query.ListClients `protobuf:"bytes,15,opt,name=list_clients,json=listClients,proto3,oneof"`
}

type DBQuery_Ping struct {
	Ping *query.Ping `protobuf:"bytes,16,opt,name=ping,proto3,oneof"`
}

func (*DBQuery_CreateStore) isDBQuery_Query() {}

func (*DBQuery_GetKey) isDBQuery_Query() {}

func (*DBQuery_GetPred) isDBQuery_Query() {}

func (*DBQuery_GetSimN) isDBQuery_Query() {}

func (*DBQuery_CreatePredIndex) isDBQuery_Query() {}

func (*DBQuery_CreateNonLinearAlgorithmIndex) isDBQuery_Query() {}

func (*DBQuery_DropPredIndex) isDBQuery_Query() {}

func (*DBQuery_DropNonLinearAlgorithmIndex) isDBQuery_Query() {}

func (*DBQuery_Set) isDBQuery_Query() {}

func (*DBQuery_DelKey) isDBQuery_Query() {}

func (*DBQuery_DelPred) isDBQuery_Query() {}

func (*DBQuery_DropStore) isDBQuery_Query() {}

func (*DBQuery_InfoServer) isDBQuery_Query() {}

func (*DBQuery_ListStores) isDBQuery_Query() {}

func (*DBQuery_ListClients) isDBQuery_Query() {}

func (*DBQuery_Ping) isDBQuery_Query() {}

type DBRequestPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*DBQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *DBRequestPipeline) Reset() {
	*x = DBRequestPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBRequestPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBRequestPipeline) ProtoMessage() {}

func (x *DBRequestPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_db_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBRequestPipeline.ProtoReflect.Descriptor instead.
func (*DBRequestPipeline) Descriptor() ([]byte, []int) {
	return file_db_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *DBRequestPipeline) GetQueries() []*DBQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type DBServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DBServerResponse_Unit
	//	*DBServerResponse_Pong
	//	*DBServerResponse_ClientList
	//	*DBServerResponse_StoreList
	//	*DBServerResponse_InfoServer
	//	*DBServerResponse_Set
	//	*DBServerResponse_Get
	//	*DBServerResponse_GetSimN
	//	*DBServerResponse_Del
	//	*DBServerResponse_CreateIndex
	//	*DBServerResponse_Error
	Response isDBServerResponse_Response `protobuf_oneof:"response"`
}

func (x *DBServerResponse) Reset() {
	*x = DBServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBServerResponse) ProtoMessage() {}

func (x *DBServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBServerResponse.ProtoReflect.Descriptor instead.
func (*DBServerResponse) Descriptor() ([]byte, []int) {
	return file_db_pipeline_proto_rawDescGZIP(), []int{2}
}

func (m *DBServerResponse) GetResponse() isDBServerResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DBServerResponse) GetUnit() *server.Unit {
	if x, ok := x.GetResponse().(*DBServerResponse_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *DBServerResponse) GetPong() *server.Pong {
	if x, ok := x.GetResponse().(*DBServerResponse_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *DBServerResponse) GetClientList() *server.ClientList {
	if x, ok := x.GetResponse().(*DBServerResponse_ClientList); ok {
		return x.ClientList
	}
	return nil
}

func (x *DBServerResponse) GetStoreList() *server.StoreList {
	if x, ok := x.GetResponse().(*DBServerResponse_StoreList); ok {
		return x.StoreList
	}
	return nil
}

func (x *DBServerResponse) GetInfoServer() *server.InfoServer {
	if x, ok := x.GetResponse().(*DBServerResponse_InfoServer); ok {
		return x.InfoServer
	}
	return nil
}

func (x *DBServerResponse) GetSet() *server.Set {
	if x, ok := x.GetResponse().(*DBServerResponse_Set); ok {
		return x.Set
	}
	return nil
}

func (x *DBServerResponse) GetGet() *server.Get {
	if x, ok := x.GetResponse().(*DBServerResponse_Get); ok {
		return x.Get
	}
	return nil
}

func (x *DBServerResponse) GetGetSimN() *server.GetSimN {
	if x, ok := x.GetResponse().(*DBServerResponse_GetSimN); ok {
		return x.GetSimN
	}
	return nil
}

func (x *DBServerResponse) GetDel() *server.Del {
	if x, ok := x.GetResponse().(*DBServerResponse_Del); ok {
		return x.Del
	}
	return nil
}

func (x *DBServerResponse) GetCreateIndex() *server.CreateIndex {
	if x, ok := x.GetResponse().(*DBServerResponse_CreateIndex); ok {
		return x.CreateIndex
	}
	return nil
}

func (x *DBServerResponse) GetError() *info.ErrorResponse {
	if x, ok := x.GetResponse().(*DBServerResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDBServerResponse_Response interface {
	isDBServerResponse_Response()
}

type DBServerResponse_Unit struct {
	Unit *server.Unit `protobuf:"bytes,1,opt,name=unit,proto3,oneof"`
}

type DBServerResponse_Pong struct {
	Pong *server.Pong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

type DBServerResponse_ClientList struct {
	ClientList *server.ClientList `protobuf:"bytes,3,opt,name=client_list,json=clientList,proto3,oneof"`
}

type DBServerResponse_StoreList struct {
	StoreList *server.StoreList `protobuf:"bytes,4,opt,name=store_list,json=storeList,proto3,oneof"`
}

type DBServerResponse_InfoServer struct {
	InfoServer *server.InfoServer `protobuf:"bytes,5,opt,name=info_server,json=infoServer,proto3,oneof"`
}

type DBServerResponse_Set struct {
	Set *server.Set `protobuf:"bytes,6,opt,name=set,proto3,oneof"`
}

type DBServerResponse_Get struct {
	Get *server.Get `protobuf:"bytes,7,opt,name=get,proto3,oneof"`
}

type DBServerResponse_GetSimN struct {
	GetSimN *server.GetSimN `protobuf:"bytes,8,opt,name=get_sim_n,json=getSimN,proto3,oneof"`
}

type DBServerResponse_Del struct {
	Del *server.Del `protobuf:"bytes,9,opt,name=del,proto3,oneof"`
}

type DBServerResponse_CreateIndex struct {
	CreateIndex *server.CreateIndex `protobuf:"bytes,10,opt,name=create_index,json=createIndex,proto3,oneof"`
}

type DBServerResponse_Error struct {
	Error *info.ErrorResponse `protobuf:"bytes,11,opt,name=error,proto3,oneof"`
}

func (*DBServerResponse_Unit) isDBServerResponse_Response() {}

func (*DBServerResponse_Pong) isDBServerResponse_Response() {}

func (*DBServerResponse_ClientList) isDBServerResponse_Response() {}

func (*DBServerResponse_StoreList) isDBServerResponse_Response() {}

func (*DBServerResponse_InfoServer) isDBServerResponse_Response() {}

func (*DBServerResponse_Set) isDBServerResponse_Response() {}

func (*DBServerResponse_Get) isDBServerResponse_Response() {}

func (*DBServerResponse_GetSimN) isDBServerResponse_Response() {}

func (*DBServerResponse_Del) isDBServerResponse_Response() {}

func (*DBServerResponse_CreateIndex) isDBServerResponse_Response() {}

func (*DBServerResponse_Error) isDBServerResponse_Response() {}

type DBResponsePipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*DBServerResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *DBResponsePipeline) Reset() {
	*x = DBResponsePipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBResponsePipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBResponsePipeline) ProtoMessage() {}

func (x *DBResponsePipeline) ProtoReflect() protoreflect.Message {
	mi := &file_db_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBResponsePipeline.ProtoReflect.Descriptor instead.
func (*DBResponsePipeline) Descriptor() ([]byte, []int) {
	return file_db_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *DBResponsePipeline) GetResponses() []*DBServerResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

var File_db_pipeline_proto protoreflect.FileDescriptor

var file_db_pipeline_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x62, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x62, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x1a, 0x0e, 0x64, 0x62, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x64, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x07, 0x0a, 0x07, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x62,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x6d, 0x5f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x4e, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x4e, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x73, 0x0a, 0x21, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x72,
	0x6f, 0x70, 0x50, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6d, 0x0a, 0x1f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x1b, 0x64,
	0x72, 0x6f, 0x70, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x03, 0x73, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x65,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24,
	0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04,
	0x70, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x43, 0x0a,
	0x11, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x62, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x22, 0xa6, 0x04, 0x0a, 0x10, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x25,
	0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x62,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x6d, 0x5f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x62,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x4e, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x4e, 0x12, 0x22, 0x0a, 0x03, 0x64, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x12, 0x3b,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x62, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x12, 0x44,
	0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x62, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x4c,
	0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76,
	0x65, 0x6e, 0x39, 0x36, 0x2f, 0x61, 0x68, 0x6e, 0x6c, 0x69, 0x63, 0x68, 0x2f, 0x73, 0x64, 0x6b,
	0x2f, 0x61, 0x68, 0x6e, 0x6c, 0x69, 0x63, 0x68, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x62, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x3b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_db_pipeline_proto_rawDescOnce sync.Once
	file_db_pipeline_proto_rawDescData = file_db_pipeline_proto_rawDesc
)

func file_db_pipeline_proto_rawDescGZIP() []byte {
	file_db_pipeline_proto_rawDescOnce.Do(func() {
		file_db_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_pipeline_proto_rawDescData)
	})
	return file_db_pipeline_proto_rawDescData
}

var file_db_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_db_pipeline_proto_goTypes = []any{
	(*DBQuery)(nil),                             // 0: db.pipeline.DBQuery
	(*DBRequestPipeline)(nil),                   // 1: db.pipeline.DBRequestPipeline
	(*DBServerResponse)(nil),                    // 2: db.pipeline.DBServerResponse
	(*DBResponsePipeline)(nil),                  // 3: db.pipeline.DBResponsePipeline
	(*query.CreateStore)(nil),                   // 4: db.query.CreateStore
	(*query.GetKey)(nil),                        // 5: db.query.GetKey
	(*query.GetPred)(nil),                       // 6: db.query.GetPred
	(*query.GetSimN)(nil),                       // 7: db.query.GetSimN
	(*query.CreatePredIndex)(nil),               // 8: db.query.CreatePredIndex
	(*query.CreateNonLinearAlgorithmIndex)(nil), // 9: db.query.CreateNonLinearAlgorithmIndex
	(*query.DropPredIndex)(nil),                 // 10: db.query.DropPredIndex
	(*query.DropNonLinearAlgorithmIndex)(nil),   // 11: db.query.DropNonLinearAlgorithmIndex
	(*query.Set)(nil),                           // 12: db.query.Set
	(*query.DelKey)(nil),                        // 13: db.query.DelKey
	(*query.DelPred)(nil),                       // 14: db.query.DelPred
	(*query.DropStore)(nil),                     // 15: db.query.DropStore
	(*query.InfoServer)(nil),                    // 16: db.query.InfoServer
	(*query.ListStores)(nil),                    // 17: db.query.ListStores
	(*query.ListClients)(nil),                   // 18: db.query.ListClients
	(*query.Ping)(nil),                          // 19: db.query.Ping
	(*server.Unit)(nil),                         // 20: db.server.Unit
	(*server.Pong)(nil),                         // 21: db.server.Pong
	(*server.ClientList)(nil),                   // 22: db.server.ClientList
	(*server.StoreList)(nil),                    // 23: db.server.StoreList
	(*server.InfoServer)(nil),                   // 24: db.server.InfoServer
	(*server.Set)(nil),                          // 25: db.server.Set
	(*server.Get)(nil),                          // 26: db.server.Get
	(*server.GetSimN)(nil),                      // 27: db.server.GetSimN
	(*server.Del)(nil),                          // 28: db.server.Del
	(*server.CreateIndex)(nil),                  // 29: db.server.CreateIndex
	(*info.ErrorResponse)(nil),                  // 30: shared.info.ErrorResponse
}
var file_db_pipeline_proto_depIdxs = []int32{
	4,  // 0: db.pipeline.DBQuery.create_store:type_name -> db.query.CreateStore
	5,  // 1: db.pipeline.DBQuery.get_key:type_name -> db.query.GetKey
	6,  // 2: db.pipeline.DBQuery.get_pred:type_name -> db.query.GetPred
	7,  // 3: db.pipeline.DBQuery.get_sim_n:type_name -> db.query.GetSimN
	8,  // 4: db.pipeline.DBQuery.create_pred_index:type_name -> db.query.CreatePredIndex
	9,  // 5: db.pipeline.DBQuery.create_non_linear_algorithm_index:type_name -> db.query.CreateNonLinearAlgorithmIndex
	10, // 6: db.pipeline.DBQuery.drop_pred_index:type_name -> db.query.DropPredIndex
	11, // 7: db.pipeline.DBQuery.drop_non_linear_algorithm_index:type_name -> db.query.DropNonLinearAlgorithmIndex
	12, // 8: db.pipeline.DBQuery.set:type_name -> db.query.Set
	13, // 9: db.pipeline.DBQuery.del_key:type_name -> db.query.DelKey
	14, // 10: db.pipeline.DBQuery.del_pred:type_name -> db.query.DelPred
	15, // 11: db.pipeline.DBQuery.drop_store:type_name -> db.query.DropStore
	16, // 12: db.pipeline.DBQuery.info_server:type_name -> db.query.InfoServer
	17, // 13: db.pipeline.DBQuery.list_stores:type_name -> db.query.ListStores
	18, // 14: db.pipeline.DBQuery.list_clients:type_name -> db.query.ListClients
	19, // 15: db.pipeline.DBQuery.ping:type_name -> db.query.Ping
	0,  // 16: db.pipeline.DBRequestPipeline.queries:type_name -> db.pipeline.DBQuery
	20, // 17: db.pipeline.DBServerResponse.unit:type_name -> db.server.Unit
	21, // 18: db.pipeline.DBServerResponse.pong:type_name -> db.server.Pong
	22, // 19: db.pipeline.DBServerResponse.client_list:type_name -> db.server.ClientList
	23, // 20: db.pipeline.DBServerResponse.store_list:type_name -> db.server.StoreList
	24, // 21: db.pipeline.DBServerResponse.info_server:type_name -> db.server.InfoServer
	25, // 22: db.pipeline.DBServerResponse.set:type_name -> db.server.Set
	26, // 23: db.pipeline.DBServerResponse.get:type_name -> db.server.Get
	27, // 24: db.pipeline.DBServerResponse.get_sim_n:type_name -> db.server.GetSimN
	28, // 25: db.pipeline.DBServerResponse.del:type_name -> db.server.Del
	29, // 26: db.pipeline.DBServerResponse.create_index:type_name -> db.server.CreateIndex
	30, // 27: db.pipeline.DBServerResponse.error:type_name -> shared.info.ErrorResponse
	2,  // 28: db.pipeline.DBResponsePipeline.responses:type_name -> db.pipeline.DBServerResponse
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_db_pipeline_proto_init() }
func file_db_pipeline_proto_init() {
	if File_db_pipeline_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_db_pipeline_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DBQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_pipeline_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DBRequestPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_pipeline_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DBServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_pipeline_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DBResponsePipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_db_pipeline_proto_msgTypes[0].OneofWrappers = []any{
		(*DBQuery_CreateStore)(nil),
		(*DBQuery_GetKey)(nil),
		(*DBQuery_GetPred)(nil),
		(*DBQuery_GetSimN)(nil),
		(*DBQuery_CreatePredIndex)(nil),
		(*DBQuery_CreateNonLinearAlgorithmIndex)(nil),
		(*DBQuery_DropPredIndex)(nil),
		(*DBQuery_DropNonLinearAlgorithmIndex)(nil),
		(*DBQuery_Set)(nil),
		(*DBQuery_DelKey)(nil),
		(*DBQuery_DelPred)(nil),
		(*DBQuery_DropStore)(nil),
		(*DBQuery_InfoServer)(nil),
		(*DBQuery_ListStores)(nil),
		(*DBQuery_ListClients)(nil),
		(*DBQuery_Ping)(nil),
	}
	file_db_pipeline_proto_msgTypes[2].OneofWrappers = []any{
		(*DBServerResponse_Unit)(nil),
		(*DBServerResponse_Pong)(nil),
		(*DBServerResponse_ClientList)(nil),
		(*DBServerResponse_StoreList)(nil),
		(*DBServerResponse_InfoServer)(nil),
		(*DBServerResponse_Set)(nil),
		(*DBServerResponse_Get)(nil),
		(*DBServerResponse_GetSimN)(nil),
		(*DBServerResponse_Del)(nil),
		(*DBServerResponse_CreateIndex)(nil),
		(*DBServerResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_pipeline_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_pipeline_proto_goTypes,
		DependencyIndexes: file_db_pipeline_proto_depIdxs,
		MessageInfos:      file_db_pipeline_proto_msgTypes,
	}.Build()
	File_db_pipeline_proto = out.File
	file_db_pipeline_proto_rawDesc = nil
	file_db_pipeline_proto_goTypes = nil
	file_db_pipeline_proto_depIdxs = nil
}
