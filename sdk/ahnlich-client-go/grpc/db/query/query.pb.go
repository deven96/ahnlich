// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: db/query.proto

package query

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	algorithms "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/algorithm/algorithms"
	nonlinear "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/algorithm/nonlinear"
	keyval "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/keyval"
	predicates "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/predicates"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Creates a new store in the database with the specified dimension, predicates, and non-linear indices.
// If `error_if_exists` is set to true, it will return an error if the store already exists.
type CreateStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store            string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                                                                     // The name of the store.
	Dimension        uint32                         `protobuf:"varint,2,opt,name=dimension,proto3" json:"dimension,omitempty"`                                                                                            // The dimension of the data within the store.
	CreatePredicates []string                       `protobuf:"bytes,3,rep,name=create_predicates,json=createPredicates,proto3" json:"create_predicates,omitempty"`                                                       // Predicates used for querying.
	NonLinearIndices []nonlinear.NonLinearAlgorithm `protobuf:"varint,4,rep,packed,name=non_linear_indices,json=nonLinearIndices,proto3,enum=algorithm.nonlinear.NonLinearAlgorithm" json:"non_linear_indices,omitempty"` // Non-linear algorithms for indexing.
	ErrorIfExists    bool                           `protobuf:"varint,5,opt,name=error_if_exists,json=errorIfExists,proto3" json:"error_if_exists,omitempty"`                                                             // Flag indicating whether to error if store already exists.
}

func (x *CreateStore) Reset() {
	*x = CreateStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStore) ProtoMessage() {}

func (x *CreateStore) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStore.ProtoReflect.Descriptor instead.
func (*CreateStore) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{0}
}

func (x *CreateStore) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *CreateStore) GetDimension() uint32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *CreateStore) GetCreatePredicates() []string {
	if x != nil {
		return x.CreatePredicates
	}
	return nil
}

func (x *CreateStore) GetNonLinearIndices() []nonlinear.NonLinearAlgorithm {
	if x != nil {
		return x.NonLinearIndices
	}
	return nil
}

func (x *CreateStore) GetErrorIfExists() bool {
	if x != nil {
		return x.ErrorIfExists
	}
	return false
}

// Retrieves values from the store based on provided keys.
type GetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store string             `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"` // The name of the store.
	Keys  []*keyval.StoreKey `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`   // The keys to retrieve from the store.
}

func (x *GetKey) Reset() {
	*x = GetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKey) ProtoMessage() {}

func (x *GetKey) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKey.ProtoReflect.Descriptor instead.
func (*GetKey) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{1}
}

func (x *GetKey) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *GetKey) GetKeys() []*keyval.StoreKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Retrieves values from the store based on predicates. Validation checks if the predicate is enabled.
type GetPred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store     string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`         // The name of the store.
	Condition *predicates.PredicateCondition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"` // The condition for the predicate query.
}

func (x *GetPred) Reset() {
	*x = GetPred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPred) ProtoMessage() {}

func (x *GetPred) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPred.ProtoReflect.Descriptor instead.
func (*GetPred) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{2}
}

func (x *GetPred) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *GetPred) GetCondition() *predicates.PredicateCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Retrieves the `n` most similar items to the input vector from the store, using the specified algorithm.
// Validation checks that the dimensions of the input vector match the store's dimensions.
// `n` could be less than originally specified.
type GetSimN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store       string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                              // The name of the store.
	SearchInput *keyval.StoreKey               `protobuf:"bytes,2,opt,name=search_input,json=searchInput,proto3" json:"search_input,omitempty"`               // The input vector for similarity comparison.
	ClosestN    uint64                         `protobuf:"varint,3,opt,name=closest_n,json=closestN,proto3" json:"closest_n,omitempty"`                       // The number of closest matches to return.
	Algorithm   algorithms.Algorithm           `protobuf:"varint,4,opt,name=algorithm,proto3,enum=algorithm.algorithms.Algorithm" json:"algorithm,omitempty"` // The algorithm to use for similarity computation.
	Condition   *predicates.PredicateCondition `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`                                      // The predicate condition to apply.
}

func (x *GetSimN) Reset() {
	*x = GetSimN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimN) ProtoMessage() {}

func (x *GetSimN) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimN.ProtoReflect.Descriptor instead.
func (*GetSimN) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{3}
}

func (x *GetSimN) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *GetSimN) GetSearchInput() *keyval.StoreKey {
	if x != nil {
		return x.SearchInput
	}
	return nil
}

func (x *GetSimN) GetClosestN() uint64 {
	if x != nil {
		return x.ClosestN
	}
	return 0
}

func (x *GetSimN) GetAlgorithm() algorithms.Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return algorithms.Algorithm(0)
}

func (x *GetSimN) GetCondition() *predicates.PredicateCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Creates an index in the store based on the provided predicates.
// This operation is idempotent: it will only add new predicates, not remove existing ones.
type CreatePredIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store      string   `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`           // The name of the store.
	Predicates []string `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"` // The predicates to create indexes for.
}

func (x *CreatePredIndex) Reset() {
	*x = CreatePredIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePredIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePredIndex) ProtoMessage() {}

func (x *CreatePredIndex) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePredIndex.ProtoReflect.Descriptor instead.
func (*CreatePredIndex) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePredIndex) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *CreatePredIndex) GetPredicates() []string {
	if x != nil {
		return x.Predicates
	}
	return nil
}

// Creates an index for non-linear algorithms in the store, if it does not already exist.
// This operation is idempotent: it will only add new non-linear indices, not remove existing ones.
type CreateNonLinearAlgorithmIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store            string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                                                                     // The name of the store.
	NonLinearIndices []nonlinear.NonLinearAlgorithm `protobuf:"varint,2,rep,packed,name=non_linear_indices,json=nonLinearIndices,proto3,enum=algorithm.nonlinear.NonLinearAlgorithm" json:"non_linear_indices,omitempty"` // Non-linear algorithms to create indices for.
}

func (x *CreateNonLinearAlgorithmIndex) Reset() {
	*x = CreateNonLinearAlgorithmIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNonLinearAlgorithmIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonLinearAlgorithmIndex) ProtoMessage() {}

func (x *CreateNonLinearAlgorithmIndex) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonLinearAlgorithmIndex.ProtoReflect.Descriptor instead.
func (*CreateNonLinearAlgorithmIndex) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNonLinearAlgorithmIndex) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *CreateNonLinearAlgorithmIndex) GetNonLinearIndices() []nonlinear.NonLinearAlgorithm {
	if x != nil {
		return x.NonLinearIndices
	}
	return nil
}

// Drops the specified predicates from the store.
// If `error_if_not_exists` is true, an error is returned if the predicate does not exist.
type DropPredIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store            string   `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                    // The name of the store.
	Predicates       []string `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"`                                          // The predicates to drop.
	ErrorIfNotExists bool     `protobuf:"varint,3,opt,name=error_if_not_exists,json=errorIfNotExists,proto3" json:"error_if_not_exists,omitempty"` // Flag indicating whether to error if predicate does not exist.
}

func (x *DropPredIndex) Reset() {
	*x = DropPredIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropPredIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropPredIndex) ProtoMessage() {}

func (x *DropPredIndex) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropPredIndex.ProtoReflect.Descriptor instead.
func (*DropPredIndex) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{6}
}

func (x *DropPredIndex) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DropPredIndex) GetPredicates() []string {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *DropPredIndex) GetErrorIfNotExists() bool {
	if x != nil {
		return x.ErrorIfNotExists
	}
	return false
}

// Drops the specified non-linear indices from the store.
// If `error_if_not_exists` is true, an error is returned if the non-linear index does not exist.
type DropNonLinearAlgorithmIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store            string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                                                                     // The name of the store.
	NonLinearIndices []nonlinear.NonLinearAlgorithm `protobuf:"varint,2,rep,packed,name=non_linear_indices,json=nonLinearIndices,proto3,enum=algorithm.nonlinear.NonLinearAlgorithm" json:"non_linear_indices,omitempty"` // Non-linear indices to drop.
	ErrorIfNotExists bool                           `protobuf:"varint,3,opt,name=error_if_not_exists,json=errorIfNotExists,proto3" json:"error_if_not_exists,omitempty"`                                                  // Flag indicating whether to error if index does not exist.
}

func (x *DropNonLinearAlgorithmIndex) Reset() {
	*x = DropNonLinearAlgorithmIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropNonLinearAlgorithmIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropNonLinearAlgorithmIndex) ProtoMessage() {}

func (x *DropNonLinearAlgorithmIndex) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropNonLinearAlgorithmIndex.ProtoReflect.Descriptor instead.
func (*DropNonLinearAlgorithmIndex) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{7}
}

func (x *DropNonLinearAlgorithmIndex) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DropNonLinearAlgorithmIndex) GetNonLinearIndices() []nonlinear.NonLinearAlgorithm {
	if x != nil {
		return x.NonLinearIndices
	}
	return nil
}

func (x *DropNonLinearAlgorithmIndex) GetErrorIfNotExists() bool {
	if x != nil {
		return x.ErrorIfNotExists
	}
	return false
}

// Deletes the specified keys from the store and returns the number of deleted keys.
// It will also update the indices in a non-blocking manner.
type DelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store string             `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"` // The name of the store.
	Keys  []*keyval.StoreKey `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`   // The keys to delete from the store.
}

func (x *DelKey) Reset() {
	*x = DelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelKey) ProtoMessage() {}

func (x *DelKey) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelKey.ProtoReflect.Descriptor instead.
func (*DelKey) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{8}
}

func (x *DelKey) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DelKey) GetKeys() []*keyval.StoreKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Deletes values from the store based on the provided predicate condition.
// It will also update the indices in a non-blocking manner.
type DelPred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store     string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`         // The name of the store.
	Condition *predicates.PredicateCondition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"` // The condition for the predicate deletion.
}

func (x *DelPred) Reset() {
	*x = DelPred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPred) ProtoMessage() {}

func (x *DelPred) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPred.ProtoReflect.Descriptor instead.
func (*DelPred) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{9}
}

func (x *DelPred) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DelPred) GetCondition() *predicates.PredicateCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Drops a store and deletes all its data and associated indices.
// If `error_if_not_exists` is true, it will return an error if the store does not exist.
type DropStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store            string `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                    // The name of the store.
	ErrorIfNotExists bool   `protobuf:"varint,2,opt,name=error_if_not_exists,json=errorIfNotExists,proto3" json:"error_if_not_exists,omitempty"` // Flag indicating whether to error if store does not exist.
}

func (x *DropStore) Reset() {
	*x = DropStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropStore) ProtoMessage() {}

func (x *DropStore) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropStore.ProtoReflect.Descriptor instead.
func (*DropStore) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{10}
}

func (x *DropStore) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DropStore) GetErrorIfNotExists() bool {
	if x != nil {
		return x.ErrorIfNotExists
	}
	return false
}

// A request to get server information such as host, port, and version.
type InfoServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoServer) Reset() {
	*x = InfoServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoServer) ProtoMessage() {}

func (x *InfoServer) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoServer.ProtoReflect.Descriptor instead.
func (*InfoServer) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{11}
}

// A request to list all the stores on the server, along with their size or length.
type ListStores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStores) Reset() {
	*x = ListStores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStores) ProtoMessage() {}

func (x *ListStores) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStores.ProtoReflect.Descriptor instead.
func (*ListStores) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{12}
}

// A request to list all the clients currently connected to the server.
type ListClients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListClients) Reset() {
	*x = ListClients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClients) ProtoMessage() {}

func (x *ListClients) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClients.ProtoReflect.Descriptor instead.
func (*ListClients) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{13}
}

// A simple ping request to check if the server is reachable.
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{14}
}

// A request to set multiple key-value entries in the store.
// Validation is done for each vector before updating the store.
type Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store  string                 `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`   // The name of the store.
	Inputs []*keyval.DbStoreEntry `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"` // The key-value entries to set in the store.
}

func (x *Set) Reset() {
	*x = Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Set) ProtoMessage() {}

func (x *Set) ProtoReflect() protoreflect.Message {
	mi := &file_db_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Set.ProtoReflect.Descriptor instead.
func (*Set) Descriptor() ([]byte, []int) {
	return file_db_query_proto_rawDescGZIP(), []int{15}
}

func (x *Set) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *Set) GetInputs() []*keyval.DbStoreEntry {
	if x != nil {
		return x.Inputs
	}
	return nil
}

var File_db_query_proto protoreflect.FileDescriptor

var file_db_query_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x62, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x62, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x19, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x2f, 0x6e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xed, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x6e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x44, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x5d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x4e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x4e, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x6e,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x10, 0x6e, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x74, 0x0a,
	0x0d, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x66,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x1b, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x6e, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x2e, 0x6e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x10,
	0x6e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x44, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x5d, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x22, 0x0c, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x06, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x49, 0x0a, 0x03, 0x53, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e,
	0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x39, 0x36, 0x2f, 0x61, 0x68, 0x6e, 0x6c, 0x69,
	0x63, 0x68, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x61, 0x68, 0x6e, 0x6c, 0x69, 0x63, 0x68, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x62,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_db_query_proto_rawDescOnce sync.Once
	file_db_query_proto_rawDescData = file_db_query_proto_rawDesc
)

func file_db_query_proto_rawDescGZIP() []byte {
	file_db_query_proto_rawDescOnce.Do(func() {
		file_db_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_query_proto_rawDescData)
	})
	return file_db_query_proto_rawDescData
}

var file_db_query_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_db_query_proto_goTypes = []any{
	(*CreateStore)(nil),                   // 0: db.query.CreateStore
	(*GetKey)(nil),                        // 1: db.query.GetKey
	(*GetPred)(nil),                       // 2: db.query.GetPred
	(*GetSimN)(nil),                       // 3: db.query.GetSimN
	(*CreatePredIndex)(nil),               // 4: db.query.CreatePredIndex
	(*CreateNonLinearAlgorithmIndex)(nil), // 5: db.query.CreateNonLinearAlgorithmIndex
	(*DropPredIndex)(nil),                 // 6: db.query.DropPredIndex
	(*DropNonLinearAlgorithmIndex)(nil),   // 7: db.query.DropNonLinearAlgorithmIndex
	(*DelKey)(nil),                        // 8: db.query.DelKey
	(*DelPred)(nil),                       // 9: db.query.DelPred
	(*DropStore)(nil),                     // 10: db.query.DropStore
	(*InfoServer)(nil),                    // 11: db.query.InfoServer
	(*ListStores)(nil),                    // 12: db.query.ListStores
	(*ListClients)(nil),                   // 13: db.query.ListClients
	(*Ping)(nil),                          // 14: db.query.Ping
	(*Set)(nil),                           // 15: db.query.Set
	(nonlinear.NonLinearAlgorithm)(0),     // 16: algorithm.nonlinear.NonLinearAlgorithm
	(*keyval.StoreKey)(nil),               // 17: keyval.StoreKey
	(*predicates.PredicateCondition)(nil), // 18: predicates.PredicateCondition
	(algorithms.Algorithm)(0),             // 19: algorithm.algorithms.Algorithm
	(*keyval.DbStoreEntry)(nil),           // 20: keyval.DbStoreEntry
}
var file_db_query_proto_depIdxs = []int32{
	16, // 0: db.query.CreateStore.non_linear_indices:type_name -> algorithm.nonlinear.NonLinearAlgorithm
	17, // 1: db.query.GetKey.keys:type_name -> keyval.StoreKey
	18, // 2: db.query.GetPred.condition:type_name -> predicates.PredicateCondition
	17, // 3: db.query.GetSimN.search_input:type_name -> keyval.StoreKey
	19, // 4: db.query.GetSimN.algorithm:type_name -> algorithm.algorithms.Algorithm
	18, // 5: db.query.GetSimN.condition:type_name -> predicates.PredicateCondition
	16, // 6: db.query.CreateNonLinearAlgorithmIndex.non_linear_indices:type_name -> algorithm.nonlinear.NonLinearAlgorithm
	16, // 7: db.query.DropNonLinearAlgorithmIndex.non_linear_indices:type_name -> algorithm.nonlinear.NonLinearAlgorithm
	17, // 8: db.query.DelKey.keys:type_name -> keyval.StoreKey
	18, // 9: db.query.DelPred.condition:type_name -> predicates.PredicateCondition
	20, // 10: db.query.Set.inputs:type_name -> keyval.DbStoreEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_db_query_proto_init() }
func file_db_query_proto_init() {
	if File_db_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_db_query_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetPred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetSimN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePredIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateNonLinearAlgorithmIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DropPredIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DropNonLinearAlgorithmIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DelPred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DropStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*InfoServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListStores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListClients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_query_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_query_proto_goTypes,
		DependencyIndexes: file_db_query_proto_depIdxs,
		MessageInfos:      file_db_query_proto_msgTypes,
	}.Build()
	File_db_query_proto = out.File
	file_db_query_proto_rawDesc = nil
	file_db_query_proto_goTypes = nil
	file_db_query_proto_depIdxs = nil
}
