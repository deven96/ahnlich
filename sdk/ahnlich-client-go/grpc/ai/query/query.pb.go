// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: ai/query.proto

package query

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	execution_provider "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/ai/execution_provider"
	models "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/ai/models"
	preprocess "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/ai/preprocess"
	algorithms "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/algorithm/algorithms"
	nonlinear "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/algorithm/nonlinear"
	keyval "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/keyval"
	predicates "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/predicates"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creates a new store with the following details:
	// - store name
	// - AI query and index models (String or Images are currently supported. It's worth noting that queries/insertions must match the model's supported type)
	// - list of predicates for indexing
	// - optional non-linear algorithm indices for advanced searching
	// - store behavior settings, like error handling and storing original data
	Store            string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                                                                     // Unique name for the store
	QueryModel       models.AIModel                 `protobuf:"varint,2,opt,name=query_model,json=queryModel,proto3,enum=ai.models.AIModel" json:"query_model,omitempty"`                                                 // AI model used for querying (string or image-based)
	IndexModel       models.AIModel                 `protobuf:"varint,3,opt,name=index_model,json=indexModel,proto3,enum=ai.models.AIModel" json:"index_model,omitempty"`                                                 // AI model used for indexing
	Predicates       []string                       `protobuf:"bytes,4,rep,name=predicates,proto3" json:"predicates,omitempty"`                                                                                           // List of predicates used for creating indices
	NonLinearIndices []nonlinear.NonLinearAlgorithm `protobuf:"varint,5,rep,packed,name=non_linear_indices,json=nonLinearIndices,proto3,enum=algorithm.nonlinear.NonLinearAlgorithm" json:"non_linear_indices,omitempty"` // Optional non-linear indices
	ErrorIfExists    bool                           `protobuf:"varint,6,opt,name=error_if_exists,json=errorIfExists,proto3" json:"error_if_exists,omitempty"`                                                             // Whether to throw an error if the store already exists
	StoreOriginal    bool                           `protobuf:"varint,7,opt,name=store_original,json=storeOriginal,proto3" json:"store_original,omitempty"`                                                               // Flag to store original data. Used if you wanna keep the original(image or text) input sent
}

func (x *CreateStore) Reset() {
	*x = CreateStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStore) ProtoMessage() {}

func (x *CreateStore) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStore.ProtoReflect.Descriptor instead.
func (*CreateStore) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{0}
}

func (x *CreateStore) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *CreateStore) GetQueryModel() models.AIModel {
	if x != nil {
		return x.QueryModel
	}
	return models.AIModel(0)
}

func (x *CreateStore) GetIndexModel() models.AIModel {
	if x != nil {
		return x.IndexModel
	}
	return models.AIModel(0)
}

func (x *CreateStore) GetPredicates() []string {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *CreateStore) GetNonLinearIndices() []nonlinear.NonLinearAlgorithm {
	if x != nil {
		return x.NonLinearIndices
	}
	return nil
}

func (x *CreateStore) GetErrorIfExists() bool {
	if x != nil {
		return x.ErrorIfExists
	}
	return false
}

func (x *CreateStore) GetStoreOriginal() bool {
	if x != nil {
		return x.StoreOriginal
	}
	return false
}

type GetPred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fetches values from the store that match the specified predicates
	// Validation checks if the predicates are enabled
	Store     string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`         // Name of the store
	Condition *predicates.PredicateCondition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"` // Condition to match for predicates
}

func (x *GetPred) Reset() {
	*x = GetPred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPred) ProtoMessage() {}

func (x *GetPred) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPred.ProtoReflect.Descriptor instead.
func (*GetPred) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{1}
}

func (x *GetPred) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *GetPred) GetCondition() *predicates.PredicateCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type GetSimN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retrieves the top N similar entries from the store based on a given search input and algorithm
	Store             string                                `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                                                                      // Name of the store
	SearchInput       *keyval.StoreInput                    `protobuf:"bytes,2,opt,name=search_input,json=searchInput,proto3" json:"search_input,omitempty"`                                                                       // Input data to search (can be a string or image)
	Condition         *predicates.PredicateCondition        `protobuf:"bytes,3,opt,name=condition,proto3,oneof" json:"condition,omitempty"`                                                                                        // Optional: filters results by predicate condition
	ClosestN          uint64                                `protobuf:"varint,4,opt,name=closest_n,json=closestN,proto3" json:"closest_n,omitempty"`                                                                               // Number of similar results to return
	Algorithm         algorithms.Algorithm                  `protobuf:"varint,5,opt,name=algorithm,proto3,enum=algorithm.algorithms.Algorithm" json:"algorithm,omitempty"`                                                         // Algorithm to use for similarity search
	PreprocessAction  preprocess.PreprocessAction           `protobuf:"varint,6,opt,name=preprocess_action,json=preprocessAction,proto3,enum=ai.preprocess.PreprocessAction" json:"preprocess_action,omitempty"`                   // Preprocessing actions to apply to input before querying
	ExecutionProvider *execution_provider.ExecutionProvider `protobuf:"varint,7,opt,name=execution_provider,json=executionProvider,proto3,enum=ai.execution_provider.ExecutionProvider,oneof" json:"execution_provider,omitempty"` // Optional execution provider for specific optimizations
}

func (x *GetSimN) Reset() {
	*x = GetSimN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimN) ProtoMessage() {}

func (x *GetSimN) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimN.ProtoReflect.Descriptor instead.
func (*GetSimN) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{2}
}

func (x *GetSimN) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *GetSimN) GetSearchInput() *keyval.StoreInput {
	if x != nil {
		return x.SearchInput
	}
	return nil
}

func (x *GetSimN) GetCondition() *predicates.PredicateCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *GetSimN) GetClosestN() uint64 {
	if x != nil {
		return x.ClosestN
	}
	return 0
}

func (x *GetSimN) GetAlgorithm() algorithms.Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return algorithms.Algorithm(0)
}

func (x *GetSimN) GetPreprocessAction() preprocess.PreprocessAction {
	if x != nil {
		return x.PreprocessAction
	}
	return preprocess.PreprocessAction(0)
}

func (x *GetSimN) GetExecutionProvider() execution_provider.ExecutionProvider {
	if x != nil && x.ExecutionProvider != nil {
		return *x.ExecutionProvider
	}
	return execution_provider.ExecutionProvider(0)
}

type CreatePredIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creates predicate indexes for a store. Adds new predicates if they don’t already exist
	Store      string   `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`           // Store name
	Predicates []string `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"` // Predicates to use for indexing
}

func (x *CreatePredIndex) Reset() {
	*x = CreatePredIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePredIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePredIndex) ProtoMessage() {}

func (x *CreatePredIndex) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePredIndex.ProtoReflect.Descriptor instead.
func (*CreatePredIndex) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePredIndex) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *CreatePredIndex) GetPredicates() []string {
	if x != nil {
		return x.Predicates
	}
	return nil
}

type CreateNonLinearAlgorithmIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creates non-linear algorithm indices for the store if they don't already exist
	Store            string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                                                                     // Store name
	NonLinearIndices []nonlinear.NonLinearAlgorithm `protobuf:"varint,2,rep,packed,name=non_linear_indices,json=nonLinearIndices,proto3,enum=algorithm.nonlinear.NonLinearAlgorithm" json:"non_linear_indices,omitempty"` // Non-linear indices to create
}

func (x *CreateNonLinearAlgorithmIndex) Reset() {
	*x = CreateNonLinearAlgorithmIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNonLinearAlgorithmIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonLinearAlgorithmIndex) ProtoMessage() {}

func (x *CreateNonLinearAlgorithmIndex) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonLinearAlgorithmIndex.ProtoReflect.Descriptor instead.
func (*CreateNonLinearAlgorithmIndex) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNonLinearAlgorithmIndex) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *CreateNonLinearAlgorithmIndex) GetNonLinearIndices() []nonlinear.NonLinearAlgorithm {
	if x != nil {
		return x.NonLinearIndices
	}
	return nil
}

type DropPredIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Drops a predicate index for the store
	// Throws an error if the predicate index doesn’t exist (controlled by `error_if_not_exists`)
	Store            string   `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                    // Store name
	Predicates       []string `protobuf:"bytes,2,rep,name=predicates,proto3" json:"predicates,omitempty"`                                          // Predicates to remove
	ErrorIfNotExists bool     `protobuf:"varint,3,opt,name=error_if_not_exists,json=errorIfNotExists,proto3" json:"error_if_not_exists,omitempty"` // Flag to enforce error if the predicate doesn’t exist
}

func (x *DropPredIndex) Reset() {
	*x = DropPredIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropPredIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropPredIndex) ProtoMessage() {}

func (x *DropPredIndex) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropPredIndex.ProtoReflect.Descriptor instead.
func (*DropPredIndex) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{5}
}

func (x *DropPredIndex) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DropPredIndex) GetPredicates() []string {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *DropPredIndex) GetErrorIfNotExists() bool {
	if x != nil {
		return x.ErrorIfNotExists
	}
	return false
}

type DropNonLinearAlgorithmIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Drops non-linear algorithm indices from the store
	// Similar to dropping predicate indices, does not remove existing data
	Store            string                         `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                                                                     // Store name
	NonLinearIndices []nonlinear.NonLinearAlgorithm `protobuf:"varint,2,rep,packed,name=non_linear_indices,json=nonLinearIndices,proto3,enum=algorithm.nonlinear.NonLinearAlgorithm" json:"non_linear_indices,omitempty"` // Non-linear indices to remove
	ErrorIfNotExists bool                           `protobuf:"varint,3,opt,name=error_if_not_exists,json=errorIfNotExists,proto3" json:"error_if_not_exists,omitempty"`                                                  // Flag to enforce error if the index doesn’t exist
}

func (x *DropNonLinearAlgorithmIndex) Reset() {
	*x = DropNonLinearAlgorithmIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropNonLinearAlgorithmIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropNonLinearAlgorithmIndex) ProtoMessage() {}

func (x *DropNonLinearAlgorithmIndex) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropNonLinearAlgorithmIndex.ProtoReflect.Descriptor instead.
func (*DropNonLinearAlgorithmIndex) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{6}
}

func (x *DropNonLinearAlgorithmIndex) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DropNonLinearAlgorithmIndex) GetNonLinearIndices() []nonlinear.NonLinearAlgorithm {
	if x != nil {
		return x.NonLinearIndices
	}
	return nil
}

func (x *DropNonLinearAlgorithmIndex) GetErrorIfNotExists() bool {
	if x != nil {
		return x.ErrorIfNotExists
	}
	return false
}

type DelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deletes a key-value pair from the store, matching the given key
	// Updates indices non-blocking after deletion
	Store string               `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"` // Store name
	Keys  []*keyval.StoreInput `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`   // Key to delete (type depends on the store model)
}

func (x *DelKey) Reset() {
	*x = DelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelKey) ProtoMessage() {}

func (x *DelKey) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelKey.ProtoReflect.Descriptor instead.
func (*DelKey) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{7}
}

func (x *DelKey) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DelKey) GetKeys() []*keyval.StoreInput {
	if x != nil {
		return x.Keys
	}
	return nil
}

type DropStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deletes the entire store and removes all associated data
	// Destroys the store, and updates indices accordingly
	Store            string `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                    // Store name
	ErrorIfNotExists bool   `protobuf:"varint,2,opt,name=error_if_not_exists,json=errorIfNotExists,proto3" json:"error_if_not_exists,omitempty"` // Flag to throw an error if the store does not exist
}

func (x *DropStore) Reset() {
	*x = DropStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropStore) ProtoMessage() {}

func (x *DropStore) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropStore.ProtoReflect.Descriptor instead.
func (*DropStore) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{8}
}

func (x *DropStore) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *DropStore) GetErrorIfNotExists() bool {
	if x != nil {
		return x.ErrorIfNotExists
	}
	return false
}

type GetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fetches specific input(image or string) from a store. This only works if, store_original is set to true
	Store string               `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"` // Store name
	Keys  []*keyval.StoreInput `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`   // Keys to retrieve from the store
}

func (x *GetKey) Reset() {
	*x = GetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKey) ProtoMessage() {}

func (x *GetKey) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKey.ProtoReflect.Descriptor instead.
func (*GetKey) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{9}
}

func (x *GetKey) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *GetKey) GetKeys() []*keyval.StoreInput {
	if x != nil {
		return x.Keys
	}
	return nil
}

type InfoServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoServer) Reset() {
	*x = InfoServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoServer) ProtoMessage() {}

func (x *InfoServer) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoServer.ProtoReflect.Descriptor instead.
func (*InfoServer) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{10}
}

type ListClients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListClients) Reset() {
	*x = ListClients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClients) ProtoMessage() {}

func (x *ListClients) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClients.ProtoReflect.Descriptor instead.
func (*ListClients) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{11}
}

type ListStores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStores) Reset() {
	*x = ListStores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStores) ProtoMessage() {}

func (x *ListStores) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStores.ProtoReflect.Descriptor instead.
func (*ListStores) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{12}
}

type PurgeStores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PurgeStores) Reset() {
	*x = PurgeStores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeStores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeStores) ProtoMessage() {}

func (x *PurgeStores) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeStores.ProtoReflect.Descriptor instead.
func (*PurgeStores) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{13}
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{14}
}

type Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets a list of entries in the store
	// Each entry corresponds to a key-value pair and is validated before insertion
	Store             string                                `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`                                                                                                      // Store name
	Inputs            []*keyval.AiStoreEntry                `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`                                                                                                    // List of entries to set
	PreprocessAction  preprocess.PreprocessAction           `protobuf:"varint,3,opt,name=preprocess_action,json=preprocessAction,proto3,enum=ai.preprocess.PreprocessAction" json:"preprocess_action,omitempty"`                   // Preprocessing action to apply to inputs before setting
	ExecutionProvider *execution_provider.ExecutionProvider `protobuf:"varint,4,opt,name=execution_provider,json=executionProvider,proto3,enum=ai.execution_provider.ExecutionProvider,oneof" json:"execution_provider,omitempty"` // Optional execution provider for optimizations
}

func (x *Set) Reset() {
	*x = Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Set) ProtoMessage() {}

func (x *Set) ProtoReflect() protoreflect.Message {
	mi := &file_ai_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Set.ProtoReflect.Descriptor instead.
func (*Set) Descriptor() ([]byte, []int) {
	return file_ai_query_proto_rawDescGZIP(), []int{15}
}

func (x *Set) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *Set) GetInputs() []*keyval.AiStoreEntry {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Set) GetPreprocessAction() preprocess.PreprocessAction {
	if x != nil {
		return x.PreprocessAction
	}
	return preprocess.PreprocessAction(0)
}

func (x *Set) GetExecutionProvider() execution_provider.ExecutionProvider {
	if x != nil && x.ExecutionProvider != nil {
		return *x.ExecutionProvider
	}
	return execution_provider.ExecutionProvider(0)
}

var File_ai_query_proto protoreflect.FileDescriptor

var file_ai_query_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x69, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x61, 0x69, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1b, 0x61, 0x69, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x61, 0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x2f, 0x6e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x61, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x49, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x33, 0x0a,
	0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41,
	0x49, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x6e, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x03, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x6d, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x5f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x4e,
	0x12, 0x3d, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x4c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e,
	0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a,
	0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x48, 0x01, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x22, 0x47, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x6e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70,
	0x50, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xb9,
	0x01, 0x0a, 0x1b, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x6e, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0x50, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69,
	0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x0c, 0x0a, 0x0a,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x06, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x8c,
	0x02, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x2e, 0x41, 0x69, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x46, 0x5a,
	0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x65,
	0x6e, 0x39, 0x36, 0x2f, 0x61, 0x68, 0x6e, 0x6c, 0x69, 0x63, 0x68, 0x2f, 0x73, 0x64, 0x6b, 0x2f,
	0x61, 0x68, 0x6e, 0x6c, 0x69, 0x63, 0x68, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x69, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ai_query_proto_rawDescOnce sync.Once
	file_ai_query_proto_rawDescData = file_ai_query_proto_rawDesc
)

func file_ai_query_proto_rawDescGZIP() []byte {
	file_ai_query_proto_rawDescOnce.Do(func() {
		file_ai_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_ai_query_proto_rawDescData)
	})
	return file_ai_query_proto_rawDescData
}

var file_ai_query_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ai_query_proto_goTypes = []any{
	(*CreateStore)(nil),                       // 0: ai.query.CreateStore
	(*GetPred)(nil),                           // 1: ai.query.GetPred
	(*GetSimN)(nil),                           // 2: ai.query.GetSimN
	(*CreatePredIndex)(nil),                   // 3: ai.query.CreatePredIndex
	(*CreateNonLinearAlgorithmIndex)(nil),     // 4: ai.query.CreateNonLinearAlgorithmIndex
	(*DropPredIndex)(nil),                     // 5: ai.query.DropPredIndex
	(*DropNonLinearAlgorithmIndex)(nil),       // 6: ai.query.DropNonLinearAlgorithmIndex
	(*DelKey)(nil),                            // 7: ai.query.DelKey
	(*DropStore)(nil),                         // 8: ai.query.DropStore
	(*GetKey)(nil),                            // 9: ai.query.GetKey
	(*InfoServer)(nil),                        // 10: ai.query.InfoServer
	(*ListClients)(nil),                       // 11: ai.query.ListClients
	(*ListStores)(nil),                        // 12: ai.query.ListStores
	(*PurgeStores)(nil),                       // 13: ai.query.PurgeStores
	(*Ping)(nil),                              // 14: ai.query.Ping
	(*Set)(nil),                               // 15: ai.query.Set
	(models.AIModel)(0),                       // 16: ai.models.AIModel
	(nonlinear.NonLinearAlgorithm)(0),         // 17: algorithm.nonlinear.NonLinearAlgorithm
	(*predicates.PredicateCondition)(nil),     // 18: predicates.PredicateCondition
	(*keyval.StoreInput)(nil),                 // 19: keyval.StoreInput
	(algorithms.Algorithm)(0),                 // 20: algorithm.algorithms.Algorithm
	(preprocess.PreprocessAction)(0),          // 21: ai.preprocess.PreprocessAction
	(execution_provider.ExecutionProvider)(0), // 22: ai.execution_provider.ExecutionProvider
	(*keyval.AiStoreEntry)(nil),               // 23: keyval.AiStoreEntry
}
var file_ai_query_proto_depIdxs = []int32{
	16, // 0: ai.query.CreateStore.query_model:type_name -> ai.models.AIModel
	16, // 1: ai.query.CreateStore.index_model:type_name -> ai.models.AIModel
	17, // 2: ai.query.CreateStore.non_linear_indices:type_name -> algorithm.nonlinear.NonLinearAlgorithm
	18, // 3: ai.query.GetPred.condition:type_name -> predicates.PredicateCondition
	19, // 4: ai.query.GetSimN.search_input:type_name -> keyval.StoreInput
	18, // 5: ai.query.GetSimN.condition:type_name -> predicates.PredicateCondition
	20, // 6: ai.query.GetSimN.algorithm:type_name -> algorithm.algorithms.Algorithm
	21, // 7: ai.query.GetSimN.preprocess_action:type_name -> ai.preprocess.PreprocessAction
	22, // 8: ai.query.GetSimN.execution_provider:type_name -> ai.execution_provider.ExecutionProvider
	17, // 9: ai.query.CreateNonLinearAlgorithmIndex.non_linear_indices:type_name -> algorithm.nonlinear.NonLinearAlgorithm
	17, // 10: ai.query.DropNonLinearAlgorithmIndex.non_linear_indices:type_name -> algorithm.nonlinear.NonLinearAlgorithm
	19, // 11: ai.query.DelKey.keys:type_name -> keyval.StoreInput
	19, // 12: ai.query.GetKey.keys:type_name -> keyval.StoreInput
	23, // 13: ai.query.Set.inputs:type_name -> keyval.AiStoreEntry
	21, // 14: ai.query.Set.preprocess_action:type_name -> ai.preprocess.PreprocessAction
	22, // 15: ai.query.Set.execution_provider:type_name -> ai.execution_provider.ExecutionProvider
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ai_query_proto_init() }
func file_ai_query_proto_init() {
	if File_ai_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ai_query_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetPred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetSimN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePredIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateNonLinearAlgorithmIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DropPredIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DropNonLinearAlgorithmIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DropStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*InfoServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListClients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListStores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PurgeStores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_query_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ai_query_proto_msgTypes[2].OneofWrappers = []any{}
	file_ai_query_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ai_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ai_query_proto_goTypes,
		DependencyIndexes: file_ai_query_proto_depIdxs,
		MessageInfos:      file_ai_query_proto_msgTypes,
	}.Build()
	File_ai_query_proto = out.File
	file_ai_query_proto_rawDesc = nil
	file_ai_query_proto_goTypes = nil
	file_ai_query_proto_depIdxs = nil
}
