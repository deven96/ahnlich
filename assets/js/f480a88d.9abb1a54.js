"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[4054],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},70945:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"client-libraries/rust/request-ai/get-key","title":"Get Key","description":"Fetches a record from a vector store by its unique key. This provides a deterministic lookup of a specific embedding and its metadata, useful for retrieving known vectors or verifying insertion results.","source":"@site/docs/client-libraries/rust/request-ai/get-key.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/get-key","permalink":"/docs/client-libraries/rust/request-ai/get-key","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/get-key.md","tags":[],"version":"current","frontMatter":{"title":"Get Key"},"sidebar":"docsSidebar","previous":{"title":"Get Sim N","permalink":"/docs/client-libraries/rust/request-ai/get-simn"},"next":{"title":"Get By Predicate","permalink":"/docs/client-libraries/rust/request-ai/get-by-predicate"}}');var i=t(74848),s=t(28453);const a={title:"Get Key"},l="Get Key",c={},o=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"get-key",children:"Get Key"})}),"\n",(0,i.jsx)(n.p,{children:"Fetches a record from a vector store by its unique key. This provides a deterministic lookup of a specific embedding and its metadata, useful for retrieving known vectors or verifying insertion results."}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_client_rs::error::AhnlichError;\nuse ahnlich_types::ai::query::GetKey;\nuse ahnlich_types::keyval::store_input::Value;\nuse ahnlich_types::keyval::StoreInput;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    let addr = "127.0.0.1:1370";\n    let client = AiClient::new(addr.to_string()).await?;\n\n\n    let keys = vec![\n        StoreInput { value: Some(Value::RawString("Adidas Yeezy".to_string())) },\n        StoreInput { value: Some(Value::RawString("Nike Air Jordans".to_string())) },\n    ];\n\n\n    let params = GetKey {\n        store: "Main0".to_string(),\n        keys, // directly pass the Vec\n    };\n\n\n    let result = client.get_key(params, None).await?;\n\n\n    for entry in result.entries {\n        if let Some(k) = entry.key {\n            println!("Key retrieved: {:?}", k.value);\n        }\n    }\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"params: GetKey"})," \u2014 The input containing the store name and the unique key of the record to retrieve."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent ID for distributed observability and tracing."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Ok(Get)"})," \u2014 Contains the retrieved record, including its vector embedding and associated metadata."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if the key does not exist, the store is unavailable, or the request fails."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Wraps the ",(0,i.jsx)(n.code,{children:"GetKey"})," request parameters in a ",(0,i.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Attaches trace propagation metadata if provided."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Forwards the request to the AI service\u2019s ",(0,i.jsx)(n.code,{children:"get_key"})," RPC endpoint."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Awaits the response and unwraps the result."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Returns the ",(0,i.jsx)(n.code,{children:"Get"})," object with the stored vector and metadata."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);