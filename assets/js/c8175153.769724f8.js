"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[9708],{28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>c});var n=r(96540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}},73267:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"client-libraries/python/request-db/list-stores","title":"List Stores","description":"The List Stores request retrieves the set of Stores currently registered on the DB server. Each Store corresponds to a logical container of vectors. This operation is commonly used for introspection, administrative tooling, and debugging.","source":"@site/docs/client-libraries/python/request-db/list-stores.md","sourceDirName":"client-libraries/python/request-db","slug":"/client-libraries/python/request-db/list-stores","permalink":"/docs/client-libraries/python/request-db/list-stores","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-db/list-stores.md","tags":[],"version":"current","frontMatter":{"title":"List Stores"},"sidebar":"docsSidebar","previous":{"title":"Info Server","permalink":"/docs/client-libraries/python/request-db/info-server"},"next":{"title":"Create Store","permalink":"/docs/client-libraries/python/request-db/create-store"}}');var s=r(74848),i=r(28453);const o={title:"List Stores"},c="List Stores",l={},a=[{value:"Behavior",id:"behavior",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"list-stores",children:"List Stores"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"List Stores"})," request retrieves the set of Stores currently registered on the DB server. Each Store corresponds to a logical container of vectors. This operation is commonly used for ",(0,s.jsx)(t.strong,{children:"introspection"}),", ",(0,s.jsx)(t.strong,{children:"administrative tooling"}),", and ",(0,s.jsx)(t.strong,{children:"debugging"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"behavior",children:"Behavior"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The client sends a ListStores request."}),"\n",(0,s.jsx)(t.li,{children:"The server responds with a collection of registered Stores."}),"\n",(0,s.jsx)(t.li,{children:"An empty list means no Stores have been created yet."}),"\n"]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Click to expand source code"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.db_service import DbServiceStub\nfrom ahnlich_client_py.grpc.db import query as db_query\n\nasync def list_stores():\n  async with Channel(host="127.0.0.1", port=1369) as channel:\n    client = DbServiceStub(channel)\n  tracing_id = "00-80e1afed08e019fc1110464cfa66635c-7a085853722dc6d2-01"\n  response = await client.list_stores(\n    db_query.ListStores(),\n    metadata={"ahnlich-trace-id": tracing_id}\n  )\n  print(f"Stores: {[store.name for store in response.stores]}")\n  \nif __name__ == "__main__":\n  asyncio.run(list_stores())   \n'})})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);