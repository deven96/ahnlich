"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[7607],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(96540);const t={},c=i.createContext(t);function s(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(c.Provider,{value:n},e.children)}},45290:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"client-libraries/go/request-db/ping","title":"Ping","description":"Description","source":"@site/docs/client-libraries/go/request-db/ping.md","sourceDirName":"client-libraries/go/request-db","slug":"/client-libraries/go/request-db/ping","permalink":"/docs/client-libraries/go/request-db/ping","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/request-db/ping.md","tags":[],"version":"current","frontMatter":{"title":"Ping","sidebar_posiiton":1},"sidebar":"docsSidebar","previous":{"title":"Request DB","permalink":"/docs/client-libraries/go/request-db/"},"next":{"title":"Info Server","permalink":"/docs/client-libraries/go/request-db/info-server"}}');var t=r(74848),c=r(28453);const s={title:"Ping",sidebar_posiiton:1},o="Ping",l={},a=[{value:"Description",id:"description",level:2},{value:"Source Code Example",id:"source-code-example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"ping",children:"Ping"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Ping"})," request is the simplest way to verify connectivity between your Go client and an active ",(0,t.jsx)(n.strong,{children:"Ahnlich DB server"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When a client calls ",(0,t.jsx)(n.code,{children:"Ping"}),", the server responds immediately if it is reachable and healthy. This is useful in a variety of scenarios:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Connection health check"})," \u2013 Before performing more expensive operations such as storing or searching vectors, you can ensure the server is running and ready to process requests."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Service monitoring"})," \u2013 Can be integrated into a heartbeat system to periodically confirm the DB server is online."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Debugging setup"})," \u2013 Helpful for quickly confirming that your gRPC connection and server configuration are correct."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Click to expand source code"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "time"\n\n\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/credentials/insecure"\n\n\n      dbsvc "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/services/db_service"\n    dbquery "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/query"\n)\n\n\nconst ServerAddr = "127.0.0.1:1369"\n\n\ntype ExampleDBClient struct {\n  conn   *grpc.ClientConn\n    client dbsvc.DBServiceClient\n    ctx    context.Context\n}\n\n\nfunc NewDBClient(ctx context.Context) (*ExampleDBClient, error) {\n    conn, err := grpc.DialContext(ctx, ServerAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n    if err != nil {\n        return nil, fmt.Errorf("failed to dial DB server %q: %w", ServerAddr, err)\n    }\n    client := dbsvc.NewDBServiceClient(conn)\n    return &ExampleDBClient{conn: conn, client: client, ctx: ctx}, nil\n}\n\n\nfunc (c *ExampleDBClient) Close() error {\n    return c.conn.Close()\n}\n\n\nfunc (c *ExampleDBClient) examplePingDB() error {\n    resp, err := c.client.Ping(c.ctx, &dbquery.Ping{})\n    if err != nil {\n        return err\n    }\n    fmt.Println("Ping:", resp)\n    return nil\n}\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n\n\n    client, err := NewDBClient(ctx)\n    if err != nil {\n        log.Fatalf("Failed to create DB client: %v", err)\n    }\n    defer client.Close()\n\n\n    if err := client.examplePingDB(); err != nil {\n        log.Fatalf("Ping failed: %v", err)\n    }\n}\n'})})]}),"\n",(0,t.jsxs)(n.p,{children:["This example defines an ",(0,t.jsx)(n.code,{children:"examplePingDB"})," method on the ",(0,t.jsx)(n.code,{children:"ExampleDBClient"})," type. It sends a ",(0,t.jsx)(n.code,{children:"Ping"})," request to the DB service using the ",(0,t.jsx)(n.code,{children:"dbquery.Ping{}"})," message and prints the response. If the server is unavailable or the request fails, an error is returned."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);