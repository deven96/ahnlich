"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[3409],{25061:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"client-libraries/go/request-db/set","title":"Set","description":"Description","source":"@site/docs/client-libraries/go/request-db/set.md","sourceDirName":"client-libraries/go/request-db","slug":"/client-libraries/go/request-db/set","permalink":"/docs/client-libraries/go/request-db/set","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/request-db/set.md","tags":[],"version":"current","frontMatter":{"title":"Set"},"sidebar":"docsSidebar","previous":{"title":"Create Store","permalink":"/docs/client-libraries/go/request-db/create-store"},"next":{"title":"GetSimN","permalink":"/docs/client-libraries/go/request-db/get-simn"}}');var i=t(74848),s=t(28453);const l={title:"Set"},c="Set",o={},a=[{value:"Description",id:"description",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Source Code Example",id:"source-code-example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Set"})," request is used to ",(0,i.jsx)(n.strong,{children:"insert or update entries"})," (vectors with associated metadata) into a given store. This is one of the core operations of Ahnlich DB, as it establishes the embeddings that can later be queried for similarity search."]}),"\n",(0,i.jsx)(n.p,{children:"Each entry in a store consists of two parts:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key"})," \u2013 the vector itself (a fixed-dimension embedding)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Value"})," \u2013 metadata stored alongside the vector, represented as a key-value map. Metadata enables additional filtering and querying beyond pure vector similarity."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The vector provided in ",(0,i.jsx)(n.code,{children:"StoreKey"})," ",(0,i.jsx)(n.strong,{children:"must match the store\u2019s dimension"}),". For example, a 4-dimensional store only accepts ",(0,i.jsx)(n.code,{children:"[1, 2, 3, 4]"})," shaped vectors."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Metadata values can be of different types (strings, numbers, booleans). In the example, a string label ",(0,i.jsx)(n.code,{children:'"A"'})," is stored."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Multiple entries can be inserted in a single request by batching them in the ",(0,i.jsx)(n.code,{children:"Inputs"})," field."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If a key already exists in the store, calling Set again will ",(0,i.jsx)(n.strong,{children:"update"})," its value."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand source code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "time"\n\n\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/credentials/insecure"\n\n\n    dbsvc   "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/services/db_service"\n    dbquery "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/query"\n    keyval  "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/keyval"\n    metadata "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/metadata"\n)\n\n\nconst ServerAddr = "127.0.0.1:1369"\n\n\ntype ExampleDBClient struct {\n    conn   *grpc.ClientConn\n    client dbsvc.DBServiceClient\n    ctx    context.Context\n}\n\n\nfunc NewDBClient(ctx context.Context) (*ExampleDBClient, error) {\n    conn, err := grpc.DialContext(ctx, ServerAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n    if err != nil {\n        return nil, fmt.Errorf("failed to dial DB server %q: %w", ServerAddr, err)\n    }\n    client := dbsvc.NewDBServiceClient(conn)\n    return &ExampleDBClient{conn: conn, client: client, ctx: ctx}, nil\n}\n\n\nfunc (c *ExampleDBClient) Close() error { return c.conn.Close() }\n\n\n// Set example\nfunc (c *ExampleDBClient) exampleSet(store string) error {\n    entries := []*keyval.DbStoreEntry{\n        {\n            Key: &keyval.StoreKey{Key: []float32{1, 2, 3, 4}},\n            Value: &keyval.StoreValue{\n                Value: map[string]*metadata.MetadataValue{\n                    "label": {\n                        Value: &metadata.MetadataValue_RawString{RawString: "A"},\n                    },\n                },\n            },\n        },\n    }\n    _, err := c.client.Set(c.ctx, &dbquery.Set{Store: store, Inputs: entries})\n    if err != nil {\n        return err\n    }\n    fmt.Println("Inserted entry into store:", store)\n    return nil\n}\n\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n\n\n    client, err := NewDBClient(ctx)\n    if err != nil {\n        log.Fatalf("Failed to create DB client: %v", err)\n    }\n    defer client.Close()\n\n\n    storeName := "my_store"\n    if err := client.exampleSet(storeName); err != nil {\n        log.Fatalf("Set failed: %v", err)\n    }\n}\n\n'})})]}),"\n",(0,i.jsxs)(n.p,{children:["This inserts a single vector ",(0,i.jsx)(n.code,{children:"[1, 2, 3, 4]"})," into the store ",(0,i.jsx)(n.code,{children:"my_store"})," with metadata ",(0,i.jsx)(n.code,{children:'{ "label": "A" }'}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var r=t(96540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);