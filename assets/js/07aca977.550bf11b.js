"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[3588],{10695:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"client-libraries/go/request-ai/get-by-predicate","title":"Get by Predicate","description":"Description","source":"@site/docs/client-libraries/go/request-ai/get-by-predicate.md","sourceDirName":"client-libraries/go/request-ai","slug":"/client-libraries/go/request-ai/get-by-predicate","permalink":"/docs/client-libraries/go/request-ai/get-by-predicate","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/request-ai/get-by-predicate.md","tags":[],"version":"current","frontMatter":{"title":"Get by Predicate"},"sidebar":"docsSidebar","previous":{"title":"GetSimN","permalink":"/docs/client-libraries/go/request-ai/get-simn"},"next":{"title":"Create Predicate Index","permalink":"/docs/client-libraries/go/request-ai/create-predicate-index"}}');var r=t(74848),c=t(28453);const a={title:"Get by Predicate"},s="Get by Predicate",l={},d=[{value:"Description",id:"description",level:2},{value:"Source Code Example",id:"source-code-example",level:2},{value:"What the code does",id:"what-the-code-does",level:2},{value:"Behavior",id:"behavior",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"get-by-predicate",children:"Get by Predicate"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"GetByPredicate"})," request-ai retrieves entries from an AI-managed store by applying ",(0,r.jsx)(n.strong,{children:"metadata-based filtering"}),". Unlike similarity search (",(0,r.jsx)(n.code,{children:"GetSimN"}),"), which operates on vector embeddings, predicate queries operate on ",(0,r.jsx)(n.strong,{children:"stored metadata attributes"}),". This enables developers to fetch records that satisfy specific metadata conditions, regardless of their embedding similarity."]}),"\n",(0,r.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Click to expand source code"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "time"\n\n\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/credentials/insecure"\n\n\n    aiquery "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/ai/query"\n    aisvc "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/services/ai_service"\n    metadata "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/metadata"\n    predicates "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/predicates"\n)\n\n\nconst AIAddr = "127.0.0.1:1370"\n\n\ntype ExampleAIClient struct {\n    conn   *grpc.ClientConn\n    client aisvc.AIServiceClient\n    ctx    context.Context\n}\n\n\nfunc NewAIClient(ctx context.Context) (*ExampleAIClient, error) {\n    conn, err := grpc.DialContext(ctx, AIAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n    if err != nil {\n        return nil, fmt.Errorf("failed to dial AI server %q: %w", AIAddr, err)\n    }\n    client := aisvc.NewAIServiceClient(conn)\n    return &ExampleAIClient{conn: conn, client: client, ctx: ctx}, nil\n}\n\n\nfunc (c *ExampleAIClient) Close() error {\n    return c.conn.Close()\n}\n\n\n// ---- GetByPredicate standalone ----\nfunc (c *ExampleAIClient) exampleGetByPredicateAI() error {\n    cond := &predicates.PredicateCondition{\n        Kind: &predicates.PredicateCondition_Value{\n            Value: &predicates.Predicate{\n                Kind: &predicates.Predicate_Equals{\n                    Equals: &predicates.Equals{\n                        Key: "f",\n                        Value: &metadata.MetadataValue{\n                            Value: &metadata.MetadataValue_RawString{RawString: "v"},\n                        },\n                    },\n                },\n            },\n        },\n    }\n\n\n    resp, err := c.client.GetPred(c.ctx, &aiquery.GetPred{\n        Store:     "ai_store",\n        Condition: cond,\n    })\n    if err != nil {\n        return err\n    }\n    fmt.Println(" AI GetByPredicate Response:", resp.Entries)\n    return nil\n}\n\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n    defer cancel()\n\n\n    client, err := NewAIClient(ctx)\n    if err != nil {\n        log.Fatalf(" Failed to create AI client: %v", err)\n    }\n    defer client.Close()\n\n\n    if err := client.exampleGetByPredicateAI(); err != nil {\n        log.Fatalf(" GetByPredicate failed: %v", err)\n    }\n}\n\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"what-the-code-does",children:"What the code does"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Constructs a ",(0,r.jsx)(n.strong,{children:"predicate condition"})," that checks if the metadata field ",(0,r.jsx)(n.code,{children:'"f"'})," equals the raw string ",(0,r.jsx)(n.code,{children:'"v"'}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Issues a ",(0,r.jsx)(n.code,{children:"GetByPredicate"}),' request against "',(0,r.jsx)(n.code,{children:"ai_store"}),'".']}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["On success, prints the retrieved entries (",(0,r.jsx)(n.code,{children:"resp.Entries"}),"); otherwise, returns the error."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The AI proxy evaluates the condition against stored entries\u2019 metadata."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Only records with metadata key ",(0,r.jsx)(n.code,{children:'"f"'})," equal to ",(0,r.jsx)(n.code,{children:'"v"'})," are returned."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Does not perform embedding similarity\u2014this is purely metadata-based retrieval."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If no matching entries exist, the response is valid but empty."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Useful for filtering results in combination with embedding-based searches."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const r={},c=i.createContext(r);function a(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);