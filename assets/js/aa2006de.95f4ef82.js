"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[9280],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function d(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(t.Provider,{value:n},e.children)}},51521:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"client-libraries/python/type-meanings","title":"Type Meanings","description":"The following terms are fundamental to how Ahnlich AI requests are structured and processed.","source":"@site/docs/client-libraries/python/type-meanings.md","sourceDirName":"client-libraries/python","slug":"/client-libraries/python/type-meanings","permalink":"/docs/client-libraries/python/type-meanings","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/type-meanings.md","tags":[],"version":"current","frontMatter":{"title":"Type Meanings","sidebar_posiiton":5},"sidebar":"docsSidebar","previous":{"title":"Bulk Requests","permalink":"/docs/client-libraries/python/bulk-requests"},"next":{"title":"Go","permalink":"/docs/client-libraries/go/"}}');var r=i(74848),t=i(28453);const d={title:"Type Meanings",sidebar_posiiton:5},l="Type Meanings",a={},c=[{value:"Store Key",id:"store-key",level:2},{value:"Store Value",id:"store-value",level:2},{value:"Store Predicates (Predicate Indices)",id:"store-predicates-predicate-indices",level:2},{value:"Predicates",id:"predicates",level:2},{value:"PredicateConditions",id:"predicateconditions",level:2},{value:"Example \u2013 single predicate condition:",id:"example--single-predicate-condition",level:3},{value:"Example \u2013 binary metadata value:",id:"example--binary-metadata-value",level:3},{value:"Example \u2013 compound condition with <code>AND</code>:",id:"example--compound-condition-with-and",level:3},{value:"MetadataValue",id:"metadatavalue",level:2},{value:"Search Input",id:"search-input",level:2},{value:"AIModels",id:"aimodels",level:2},{value:"AIStoreType",id:"aistoretype",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"type-meanings",children:"Type Meanings"})}),"\n",(0,r.jsxs)(n.p,{children:["The following terms are fundamental to how ",(0,r.jsx)(n.strong,{children:"Ahnlich AI requests"})," are structured and processed."]}),"\n",(0,r.jsx)(n.h2,{id:"store-key",children:"Store Key"}),"\n",(0,r.jsx)(n.p,{children:"A one-dimensional vector that uniquely identifies an item in the store."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Functions like a ",(0,r.jsx)(n.strong,{children:"primary key"})," in a database."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Ensures that every stored entry has a distinct handle for retrieval and indexing."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Source Code Source Code Example: a numerical vector representing an embedding for a product image."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"store-value",children:"Store Value"}),"\n",(0,r.jsxs)(n.p,{children:["A dictionary containing texts or binary data associated with a ",(0,r.jsx)(n.code,{children:"StoreKey"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Stores the ",(0,r.jsx)(n.strong,{children:"payload"})," of information that can be retrieved, searched, or filtered."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"May include metadata such as titles, descriptions, or binary content (like embeddings, files, or serialized objects)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:'Think of it as the "body" of the data linked to the store key.'}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"store-predicates-predicate-indices",children:"Store Predicates (Predicate Indices)"}),"\n",(0,r.jsxs)(n.p,{children:["Special indices built on top of ",(0,r.jsx)(n.code,{children:"StoreValue"})," fields to make filtering more efficient."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["They ",(0,r.jsx)(n.strong,{children:"optimize lookups"})," by pre-indexing specific fields."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:['Useful when you need fast filtering by metadata like "',(0,r.jsx)(n.code,{children:"job"}),'" or "',(0,r.jsx)(n.code,{children:"rank"}),'".']}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Without them, searches would be slower since the system would need to scan every entry."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"predicates",children:"Predicates"}),"\n",(0,r.jsx)(n.p,{children:"Operations that define how filtering is performed on data."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Examples include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Equals"})," \u2192 match exact values."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"NotEquals"})," \u2192 exclude values."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Contains"})," \u2192 substring or set membership checks."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["They are always tied to a ",(0,r.jsx)(n.strong,{children:"key"})," in a ",(0,r.jsx)(n.code,{children:"StoreValue"})," and evaluated against a ",(0,r.jsx)(n.strong,{children:"metadata value"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Provide the basic building blocks for query logic."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"predicateconditions",children:"PredicateConditions"}),"\n",(0,r.jsxs)(n.p,{children:["Conditions that ",(0,r.jsx)(n.strong,{children:"wrap predicates"})," and allow combining them logically."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"PredicateCondition"})," can represent:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"single predicate"})," (just one filter condition)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"compound condition"})," using ",(0,r.jsx)(n.code,{children:"AND"})," or ",(0,r.jsx)(n.code,{children:"OR"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["This makes it possible to construct ",(0,r.jsx)(n.strong,{children:"complex filters"}),", e.g., \u201call sorcerers who are chunin rank.\u201d"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example--single-predicate-condition",children:"Example \u2013 single predicate condition:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'condition = predicates.PredicateCondition(\n    value=predicates.Predicate(\n        equals=predicates.Equals(\n            key="job", value=metadata.MetadataValue(raw_string="sorcerer")\n        )\n    )\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example--binary-metadata-value",children:"Example \u2013 binary metadata value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'condition = predicates.PredicateCondition(\n    value=predicates.Predicate(\n        equals=predicates.Equals(\n            key="rank", value=metadata.MetadataValue(image=[2,2,3,4,5,6,7])\n        )\n    )\n)\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"example--compound-condition-with-and",children:["Example \u2013 compound condition with ",(0,r.jsx)(n.code,{children:"AND"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'condition = predicates.PredicateCondition(\n    and_=predicates.AndCondition(\n        left=predicates.PredicateCondition(\n            value=predicates.Predicate(\n                equals=predicates.Equals(\n                    key="job",\n                    value=metadata.MetadataValue(raw_string="sorcerer")\n                )\n            )\n        ),\n        right=predicates.PredicateCondition(\n            value=predicates.Predicate(\n                equals=predicates.Equals(\n                    key="rank",\n                    value=metadata.MetadataValue(raw_string="chunin")\n                )\n            )\n        )\n    )\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"metadatavalue",children:"MetadataValue"}),"\n",(0,r.jsx)(n.p,{children:"The container used inside predicates to hold values."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Supports both ",(0,r.jsx)(n.strong,{children:"raw strings"}),' (like "',(0,r.jsx)(n.code,{children:"sorcerer"}),'") and ',(0,r.jsx)(n.strong,{children:"binary vectors"})," (lists of bytes/integers)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["This makes it versatile enough to handle both ",(0,r.jsx)(n.strong,{children:"structured text metadata"})," and ",(0,r.jsx)(n.strong,{children:"embeddings or binary payloads"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"search-input",children:"Search Input"}),"\n",(0,r.jsx)(n.p,{children:"The query input sent to Ahnlich AI for processing."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Can be a ",(0,r.jsx)(n.strong,{children:"string"}),' (text input, e.g., "',(0,r.jsx)(n.code,{children:"What is AI?"}),'") or a ',(0,r.jsx)(n.strong,{children:"binary file"})," (like an image or audio file)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The type of input depends on the ",(0,r.jsx)(n.strong,{children:"AI model"})," and the ",(0,r.jsx)(n.strong,{children:"store configuration"})," (string vs. binary store)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"aimodels",children:"AIModels"}),"\n",(0,r.jsx)(n.p,{children:"The set of supported AI models within Ahnlich AI."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Each model determines the ",(0,r.jsx)(n.strong,{children:"type of input"})," it can process (e.g., text-only, image, multimodal)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Choosing the right model ensures that the search input is properly understood and processed."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"aistoretype",children:"AIStoreType"}),"\n",(0,r.jsx)(n.p,{children:"Defines the type of store being created."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"String Store"})," - optimized for textual inputs and queries."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Binary Store"})," - optimized for binary data like embeddings, images, or raw vectors."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Must be chosen carefully depending on whether you are working with ",(0,r.jsx)(n.strong,{children:"text-based AI models"})," or ",(0,r.jsx)(n.strong,{children:"binary models"}),"."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);