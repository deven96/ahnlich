"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[9643],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const i={},c=r.createContext(i);function s(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(c.Provider,{value:n},e.children)}},53091:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"client-libraries/go/request-db/get-key","title":"GetKey","description":"Description","source":"@site/docs/client-libraries/go/request-db/get-key.md","sourceDirName":"client-libraries/go/request-db","slug":"/client-libraries/go/request-db/get-key","permalink":"/docs/client-libraries/go/request-db/get-key","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/request-db/get-key.md","tags":[],"version":"current","frontMatter":{"title":"GetKey"},"sidebar":"docsSidebar","previous":{"title":"GetSimN","permalink":"/docs/client-libraries/go/request-db/get-simn"},"next":{"title":"Get by Predicate","permalink":"/docs/client-libraries/go/request-db/get-by-predicate"}}');var i=t(74848),c=t(28453);const s={title:"GetKey"},o="GetKey",l={},d=[{value:"Description",id:"description",level:2},{value:"Source Code Example",id:"source-code-example",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"getkey",children:"GetKey"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GetKey"})," request is used to retrieve ",(0,i.jsx)(n.strong,{children:"specific entries"})," from a store by providing the exact vector keys. Unlike GetSimN, which searches for approximate or closest matches, GetKey performs a ",(0,i.jsx)(n.strong,{children:"direct lookup"})," based on the stored vectors."]}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand source code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "time"\n\n\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/credentials/insecure"\n\n\n    dbsvc   "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/services/db_service"\n    dbquery "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/query"\n    keyval  "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/keyval"\n)\n\n\nconst ServerAddr = "127.0.0.1:1369"\n\n\n// ExampleDBClient holds the gRPC connection, client, and context.\ntype ExampleDBClient struct {\n    conn   *grpc.ClientConn\n    client dbsvc.DBServiceClient\n    ctx    context.Context\n}\n\n\n// NewDBClient connects to the Ahnlich DB server.\nfunc NewDBClient(ctx context.Context) (*ExampleDBClient, error) {\n    conn, err := grpc.DialContext(\n        ctx,\n        ServerAddr,\n        grpc.WithTransportCredentials(insecure.NewCredentials()),\n        grpc.WithBlock(),\n    )\n    if err != nil {\n        return nil, fmt.Errorf("failed to dial DB server %q: %w", ServerAddr, err)\n    }\n    client := dbsvc.NewDBServiceClient(conn)\n    return &ExampleDBClient{conn: conn, client: client, ctx: ctx}, nil\n}\n\n\n// Close closes the gRPC connection.\nfunc (c *ExampleDBClient) Close() error {\n    return c.conn.Close()\n}\n\n\n// -------------------- GetKey --------------------\nfunc (c *ExampleDBClient) exampleGetKey() error {\n    resp, err := c.client.GetKey(c.ctx, &dbquery.GetKey{\n        Store: "my_stores",\n        Keys:  []*keyval.StoreKey{{Key: []float32{1, 2, 3, 4}}},\n    })\n    if err != nil {\n        return err\n    }\n    fmt.Println("GetKey Results:")\n    for _, entry := range resp.Entries {\n        fmt.Println(" - Key:", entry.Key.Key, "Value:", entry.Value.Value)\n    }\n    return nil\n}\n\n\n// -------------------- Main --------------------\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n\n\n    client, err := NewDBClient(ctx)\n    if err != nil {\n        log.Fatalf("Failed to create DB client: %v", err)\n    }\n    defer client.Close()\n\n\n    if err := client.exampleGetKey(); err != nil {\n        log.Fatalf("GetKey failed: %v", err)\n    }\n}\n'})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Store"})," \u2013 Targets the ",(0,i.jsx)(n.code,{children:"my_store"})," vector store."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Keys"})," \u2013 A slice of vector keys to look up. In this case, the request asks for the entry with key ",(0,i.jsx)(n.code,{children:"[1, 2, 3, 4]"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Response"})," \u2013 If the key exists in the store, the server returns the corresponding entries (vector + metadata) inside ",(0,i.jsx)(n.code,{children:"resp.Entries"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This operation is especially useful when you need ",(0,i.jsx)(n.strong,{children:"exact retrieval"})," of vectors and their metadata, such as fetching embeddings for validation, re-indexing, or checking consistency of stored data."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);