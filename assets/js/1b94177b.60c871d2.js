"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[2666],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(96540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},83153:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"client-libraries/rust/request-db/drop-non-linear-algx","title":"Drop Non-Linear Algorithm Index","description":"Removes an existing non-linear algorithm index from a store. This operation is useful when an index is no longer needed, when switching to a different indexing strategy, or during cleanup of store resources. Dropping the index reverts the store back to standard linear search behavior unless another index exists.","source":"@site/docs/client-libraries/rust/request-db/drop-non-linear-algx.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/drop-non-linear-algx","permalink":"/docs/client-libraries/rust/request-db/drop-non-linear-algx","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/drop-non-linear-algx.md","tags":[],"version":"current","frontMatter":{"title":"Drop Non-Linear Algorithm Index"},"sidebar":"docsSidebar","previous":{"title":"Create Non-Linear Algorithm Index","permalink":"/docs/client-libraries/rust/request-db/create-non-linear-algx"},"next":{"title":"Delete By Predicate","permalink":"/docs/client-libraries/rust/request-db/delete-by-predicate"}}');var t=r(74848),s=r(28453);const o={title:"Drop Non-Linear Algorithm Index"},l="Drop Non-Linear Algorithm Index",d={},a=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"drop-non-linear-algorithm-index",children:"Drop Non-Linear Algorithm Index"})}),"\n",(0,t.jsx)(n.p,{children:"Removes an existing non-linear algorithm index from a store. This operation is useful when an index is no longer needed, when switching to a different indexing strategy, or during cleanup of store resources. Dropping the index reverts the store back to standard linear search behavior unless another index exists."}),"\n",(0,t.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Click to expand"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use ahnlich_types::db::query::DropNonLinearAlgorithmIndex;\nuse ahnlich_types::db::server::Del;\nuse ahnlich_client_rs::db::DbClient;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let addr = "http://127.0.0.1:1369".to_string();\n    let db_client = DbClient::new(addr).await?;\n\n\n    let params = DropNonLinearAlgorithmIndex {\n        store: "Main".to_string(),\n        non_linear_indices: vec![0, 1],\n        error_if_not_exists: false,\n    };\n\n\n    match db_client\n        .drop_non_linear_algorithm_index(params, None)\n        .await\n    {\n        Ok(Del { deleted_count }) => {\n            println!("Successfully dropped {} non-linear index(es).", deleted_count);\n        }\n        Err(e) => {\n            eprintln!("Error dropping non-linear index: {:?}", e);\n        }\n    }\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"params: DropNonLinearAlgorithmIndex"})," \u2014 Specifies the target store and index to be dropped."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace identifier for observability."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Del"})," \u2014 Confirmation that the index has been dropped."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"AhnlichError"})," \u2014 If the operation fails due to invalid parameters or missing index."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Builds a request with the given ",(0,t.jsx)(n.code,{children:"params"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Adds tracing information when provided."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Sends the request to the DB service to drop the index."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Returns confirmation once the index has been removed."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Cleaning up unused indexes."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Switching from non-linear search back to linear search."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Replacing an old index with a newly configured one."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);