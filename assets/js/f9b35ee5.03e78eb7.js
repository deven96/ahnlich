"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[7809],{16029:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"client-libraries/python/request-ai/delete-key","title":"Delete Key","description":"How to delete a key and its associated value from a store using the Ahnlich AI Client.","source":"@site/docs/client-libraries/python/request-ai/delete-key.md","sourceDirName":"client-libraries/python/request-ai","slug":"/client-libraries/python/request-ai/delete-key","permalink":"/docs/client-libraries/python/request-ai/delete-key","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-ai/delete-key.md","tags":[],"version":"current","frontMatter":{"title":"Delete Key"},"sidebar":"docsSidebar","previous":{"title":"Drop Predicate Index","permalink":"/docs/client-libraries/python/request-ai/drop-predicate-index"},"next":{"title":"Drop Store","permalink":"/docs/client-libraries/python/request-ai/drop-store"}}');var r=t(74848),a=t(28453);const s={title:"Delete Key"},o="Delete Key",c={},l=[{value:"Behavior",id:"behavior",level:2},{value:"Source Code Example",id:"source-code-example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"delete-key",children:"Delete Key"})}),"\n",(0,r.jsx)(n.p,{children:"How to delete a key and its associated value from a store using the Ahnlich AI Client."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Delete Key"})," operation removes a single entry from a store. A key uniquely identifies a vector-value pair in the store, and deleting it permanently removes both the key and the stored value."]}),"\n",(0,r.jsx)(n.p,{children:"This operation is useful when:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You want to remove outdated or irrelevant data."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You need to clean up test data."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You want to maintain store integrity by pruning unused keys."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If the specified key does not exist, the behavior depends on the server configuration. In general, no changes are made, and the request safely returns without errors."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Click to expand source code"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.ai_service import AiServiceStub\nfrom ahnlich_client_py.grpc.ai import query as ai_query\nfrom ahnlich_client_py.grpc import keyval\n\n\nasync def drop_key():\n  async with Channel(host="127.0.0.1", port=1370) as channel:\n      client = AiServiceStub(channel)\n      response = await client.del_key(\n          ai_query.DelKey(\n              store="test store 1",\n              keys=keyval.StoreInput(raw_string="Custom Made Jordan 4")\n          )\n      )\n      print(response) # Del()\n\n\nif __name__ == "__main__":\n  asyncio.run(drop_key())\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key match found"})," \u2192 The key and its associated value are permanently removed."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key not found"})," \u2192 No action is performed; the request completes without altering the store."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,r.jsx)(n.p,{children:"In the context of the rest of the application code:"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Click to expand code"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.ai_service import AiServiceStub\nfrom ahnlich_client_py.grpc.ai import query as ai_query\n\n\nasync def trace_id():\n  async with Channel(host="127.0.0.1", port=1370) as channel:\n      client = AiServiceStub(channel)\n      \n      # Prepare tracing metadata\n      tracing_id = "00-80e1afed08e019fc1110464cfa66635c-7a085853722dc6d2-01"\n      metadata = {"ahnlich-trace-id": tracing_id}\n      \n      # Make request with metadata\n      response = await client.ping(\n          ai_query.Ping(),\n          metadata=metadata\n      )\n      print(response) # Pong()\n\n\nif __name__ == "__main__":\n  asyncio.run(trace_id())\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);