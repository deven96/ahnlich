"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[7603],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(96540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}},45120:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"client-libraries/rust/rust-specific-resources","title":"Rust Specific Resources","description":"Before installing ahnlichclientrs, you need Rust and Cargo set up on your system.","source":"@site/docs/client-libraries/rust/rust-specific-resources.md","sourceDirName":"client-libraries/rust","slug":"/client-libraries/rust/rust-specific-resources","permalink":"/docs/client-libraries/rust/rust-specific-resources","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/rust-specific-resources.md","tags":[],"version":"current","frontMatter":{"title":"Rust Specific Resources"},"sidebar":"docsSidebar","previous":{"title":"Rust","permalink":"/docs/client-libraries/rust/"},"next":{"title":"request-db","permalink":"/docs/client-libraries/rust/request-db/"}}');var r=i(74848),l=i(28453);const t={title:"Rust Specific Resources"},c="Quickstart - Setup Guide",d={},o=[{value:"Windows",id:"windows",level:2},{value:"macOS",id:"macos",level:2},{value:"Linux (Debian/Ubuntu example)",id:"linux-debianubuntu-example",level:2},{value:"Quick Sanity Check (All Platforms)",id:"quick-sanity-check-all-platforms",level:2},{value:"Install the SDK",id:"install-the-sdk",level:2},{value:"Whats Included in the SDK",id:"whats-included-in-the-sdk",level:2},{value:"Capabilities",id:"capabilities",level:3},{value:"Clients",id:"clients",level:3},{value:"DB Client",id:"db-client",level:3},{value:"Source Code Source Code Example: DB Client",id:"source-code-source-code-example-db-client",level:4},{value:"AI Client",id:"ai-client",level:3},{value:"Source Code Source Code Example: AI Client",id:"source-code-source-code-example-ai-client",level:4},{value:"Pipelines",id:"pipelines",level:2},{value:"Source Code Source Code Example: DB Pipeline",id:"source-code-source-code-example-db-pipeline",level:4}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"quickstart---setup-guide",children:"Quickstart - Setup Guide"})}),"\n",(0,r.jsx)(n.p,{children:"Before installing ahnlich_client_rs, you need Rust and Cargo set up on your system."}),"\n",(0,r.jsx)(n.h2,{id:"windows",children:"Windows"}),"\n",(0,r.jsx)(n.p,{children:"Install Visual C++ Build Tools (needed by many crates)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"winget install --id Microsoft.VisualStudio.2022.BuildTools -e --source winget\n"})}),"\n",(0,r.jsx)(n.p,{children:'In the installer UI, check "Desktop development with C++" and finish'}),"\n",(0,r.jsx)(n.p,{children:"Install Rust (rustup + stable toolchain)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"winget install --id Rustlang.Rustup -e\n"})}),"\n",(0,r.jsx)(n.p,{children:"#Open a NEW terminal so PATH updates, then verify"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"rustc --version     # check Rust version\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cargo --version     # check Cargo version\n"})}),"\n",(0,r.jsx)(n.h2,{id:"macos",children:"macOS"}),"\n",(0,r.jsx)(n.p,{children:"Install compiler & build tools"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"xcode-select --install   # one-time setup\n"})}),"\n",(0,r.jsx)(n.p,{children:"Install Rust (rustup + stable toolchain)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n"})}),"\n",(0,r.jsx)(n.p,{children:"Load Cargo into the shell (new terminals do this automatically)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'source "$HOME/.cargo/env"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Verify installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"rustc --version\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cargo --version\n"})}),"\n",(0,r.jsx)(n.h2,{id:"linux-debianubuntu-example",children:"Linux (Debian/Ubuntu example)"}),"\n",(0,r.jsx)(n.p,{children:"Install prerequisites"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"sudo apt update\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"sudo apt install -y build-essential pkg-config libssl-dev curl\n"})}),"\n",(0,r.jsx)(n.p,{children:"Install Rust (rustup + stable toolchain)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n"})}),"\n",(0,r.jsx)(n.p,{children:"Load Cargo into the shell"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'source "$HOME/.cargo/env"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Verify installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"rustc --version\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cargo --version\n"})}),"\n",(0,r.jsx)(n.h2,{id:"quick-sanity-check-all-platforms",children:"Quick Sanity Check (All Platforms)"}),"\n",(0,r.jsx)(n.p,{children:"Create and run a starter app"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cargo new hello-rust\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cd hello-rust\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'cargo run   # should print "Hello, world!"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"install-the-sdk",children:"Install the SDK"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cargo add ahnlich_client_rs\n"})}),"\n",(0,r.jsx)(n.h2,{id:"whats-included-in-the-sdk",children:"Whats Included in the SDK"}),"\n",(0,r.jsx)(n.p,{children:"The ahnlich_client_rs crate provides an idiomatic Rust client for Ahnlich\u2019s Vector Database (DB) and AI services. It enables developers to integrate similarity search and AI-powered embedding workflows directly into Rust applications."}),"\n",(0,r.jsx)(n.h3,{id:"capabilities",children:"Capabilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"DB Client"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Store vectors (",(0,r.jsx)(n.code,{children:"StoreKey: Vec<f32>"}),") and metadata (",(0,r.jsx)(n.code,{children:"StoreValue: HashMap<String, String>"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Query for nearest neighbors with filtering (",(0,r.jsx)(n.code,{children:"Predicates"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Manage stores (create, list, delete)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"AI Client"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Generate embeddings from raw inputs (text, JSON, or other supported formats)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Interpret embeddings for similarity, clustering, or semantic tasks."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Designed to complement the DB client by producing vectors ready for indexing and search."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"clients",children:"Clients"}),"\n",(0,r.jsx)(n.p,{children:"This crate exposes two primary client modules for interacting with Ahnlich services:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"db"})," \u2014 for interacting with the ",(0,r.jsx)(n.strong,{children:"Vector Database (DB)"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ai"})," \u2014 for interacting with the ",(0,r.jsx)(n.strong,{children:"AI Service"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Both clients support:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Direct method calls"})," for simple operations."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pipeline builders"})," for batching multiple commands and receiving results in sequence."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"db-client",children:"DB Client"}),"\n",(0,r.jsx)(n.p,{children:"The DB Client is used to manage vector stores and perform similarity queries.\nIt provides methods for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Creating and deleting stores."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Storing vectors and associated metadata."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Querying nearest neighbors with filters and predicates."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Running operations in pipelines for higher throughput."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"source-code-source-code-example-db-client",children:"Source Code Source Code Example: DB Client"}),"\n",(0,r.jsx)(n.p,{children:"use ahnlich_client_rs::db::DbClient;`**"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[tokio::main]\n\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n\n    let db_client = DbClient::new("127.0.0.1:1369".to_string()).await?;\n\n    let tracing_id: Option<String> = None;\n\n    db_client.ping(tracing_id).await?;\n\n    Ok(())`**\n\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ai-client",children:"AI Client"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"AI Client"})," is used to generate and interpret embeddings.\nIt provides methods for:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Creating embeddings from raw input (e.g., text, JSON)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sending embedding requests in pipelines for batch workloads."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Integrating directly with the DB Client by producing vectors ready for storage."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"source-code-source-code-example-ai-client",children:"Source Code Source Code Example: AI Client"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AIClient;\n\n#[tokio::main]\n\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n\n    let ai_client = AIClient::new("127.0.0.1:1369".to_string()).await?;\n\n    let tracing_id: Option<String> = None;\n\n    ai_client.ping(tracing_id).await?;\n\n    Ok(())\n\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"pipelines",children:"Pipelines"}),"\n",(0,r.jsx)(n.p,{children:"Pipelines enable multiple ordered operations to be issued in a batch.\nThis ensures:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sequential execution"})," \u2014 operations are applied in the order they are added."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consistent read-after-write semantics"})," \u2014 queries can safely depend on previous writes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reduced overhead"})," \u2014 fewer gRPC round-trips compared to issuing requests individually."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Both the ",(0,r.jsx)(n.strong,{children:"DB Client"})," and ",(0,r.jsx)(n.strong,{children:"AI Client"})," provide pipeline builders, making it possible to group multiple commands into a single request stream."]}),"\n",(0,r.jsx)(n.h4,{id:"source-code-source-code-example-db-pipeline",children:"Source Code Source Code Example: DB Pipeline"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\n\n#[tokio::main]\n\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n\n    let db_client = DbClient::new("127.0.0.1:1369".to_string()).await?;\n\n    let tracing_id: Option<String> = None;\n\n    let mut pipeline = db_client.pipeline(tracing_id);\n\n    pipeline.list_clients();\n\n    pipeline.list_stores();\n\n    let responses = pipeline.exec().await?;\n\n    Ok(())\n\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"In this Source Code Source Code Example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["A new pipeline is created from the ",(0,r.jsx)(n.code,{children:"DbClient"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Two operations are enqueued:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"list_clients()"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"list_stores()"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"exec()"})," executes the pipeline, returning the responses in the same order the operations were added."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);