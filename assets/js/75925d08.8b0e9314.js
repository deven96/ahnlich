"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[4181],{816:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"client-libraries/rust/request-db/get-by-predicate","title":"Get By Predicate","description":"Retrieve one or more stored vectors and their associated metadata from a store by applying a predicate filter. Unlike Get Key, which retrieves a single item by its unique key, Get by Predicate allows querying based on conditions defined on metadata fields (for example, \\"all items where category = book\\"). This is useful for flexible filtering, targeted queries, or conditional retrieval.","source":"@site/docs/client-libraries/rust/request-db/get-by-predicate.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/get-by-predicate","permalink":"/docs/client-libraries/rust/request-db/get-by-predicate","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/get-by-predicate.md","tags":[],"version":"current","frontMatter":{"title":"Get By Predicate"},"sidebar":"docsSidebar","previous":{"title":"Get Key","permalink":"/docs/client-libraries/rust/request-db/get-key"},"next":{"title":"Create Predicate Index","permalink":"/docs/client-libraries/rust/request-db/create-predicate-index"}}');var i=n(74848),s=n(28453);const a={title:"Get By Predicate"},d="Get By Predicate",l={},o=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"get-by-predicate",children:"Get By Predicate"})}),"\n",(0,i.jsxs)(t.p,{children:["Retrieve one or more stored vectors and their associated metadata from a store by applying a predicate filter. Unlike ",(0,i.jsx)(t.code,{children:"Get Key"}),", which retrieves a single item by its unique key, ",(0,i.jsx)(t.code,{children:"Get by Predicate"}),' allows querying based on conditions defined on metadata fields (for example, "all items where ',(0,i.jsx)(t.code,{children:"category = book"}),'"). This is useful for flexible filtering, targeted queries, or conditional retrieval.']}),"\n",(0,i.jsx)(t.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\nuse ahnlich_types::{\n    db::query::GetPred,\n    metadata::{MetadataValue, metadata_value::Value},\n    predicates::{\n        Predicate, PredicateCondition,\n        predicate::Kind as PredicateKind,\n        predicate_condition::Kind as PredicateConditionKind,\n        Equals,\n    },\n};\nuse tokio;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let addr = "http://127.0.0.1:1369";\n    let client = DbClient::new(addr.to_string()).await?;\n\n\n    let condition = PredicateCondition {\n        kind: Some(PredicateConditionKind::Value(Predicate {\n            kind: Some(PredicateKind::Equals(Equals {\n                key: "role".into(),\n                value: Some(MetadataValue {\n                    value: Some(Value::RawString("admin".into())),\n                }),\n            })),\n        })),\n    };\n\n\n    let get_pred_params = GetPred {\n        store: "Main".to_string(),\n        condition: Some(condition),\n    };\n\n\n    let result = client.get_pred(get_pred_params, None).await?;\n    println!("Fetched rows: {:#?}", result);\n\n\n    Ok(())\n}\n\n'})})]}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"params: GetPred"})," \u2014 Contains the store name and predicate condition used to filter results."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace context for observability, attached to the request if provided."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"Get"})," \u2014 Response with all matched vectors and metadata."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"AhnlichError"})," \u2014 Error if the store is missing, the predicate is invalid, or the server cannot complete the request."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Builds a gRPC request from the given ",(0,i.jsx)(t.code,{children:"GetPred"})," parameters."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Attaches optional tracing metadata using ",(0,i.jsx)(t.code,{children:"add_trace_parent"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Calls the ",(0,i.jsx)(t.code,{children:"get_pred"})," RPC on the server through the cloned client."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Waits asynchronously for the server\u2019s response and extracts the inner ",(0,i.jsx)(t.code,{children:"Get"})," payload with ",(0,i.jsx)(t.code,{children:".into_inner()"}),"."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var r=n(96540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);