"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[2388],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var t=n(96540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}},48832:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"client-libraries/python/request-ai/list-stores","title":"List Stores","description":"How to request a list of available vector stores from the Ahnlich AI Service using the Python client.","source":"@site/docs/client-libraries/python/request-ai/list-stores.md","sourceDirName":"client-libraries/python/request-ai","slug":"/client-libraries/python/request-ai/list-stores","permalink":"/docs/client-libraries/python/request-ai/list-stores","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-ai/list-stores.md","tags":[],"version":"current","frontMatter":{"title":"List Stores"},"sidebar":"docsSidebar","previous":{"title":"Info Server","permalink":"/docs/client-libraries/python/request-ai/info-server"},"next":{"title":"Create Store","permalink":"/docs/client-libraries/python/request-ai/create-store"}}');var r=n(74848),i=n(28453);const o={title:"List Stores"},l="List Stores",a={},c=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Define Request Parameters",id:"define-request-parameters",level:2},{value:"Define Response Handling",id:"define-response-handling",level:2},{value:"Customize Usage",id:"customize-usage",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"list-stores",children:"List Stores"})}),"\n",(0,r.jsxs)(s.p,{children:["How to request a ",(0,r.jsx)(s.strong,{children:"list of available vector stores"})," from the Ahnlich AI Service using the Python client."]}),"\n",(0,r.jsxs)(s.p,{children:["In Ahnlich, vector stores are the fundamental units that organize data for semantic search, embeddings, and AI-driven retrieval. The ",(0,r.jsx)(s.strong,{children:"List Stores"})," request allows developers to discover which stores are currently registered and available to query."]}),"\n",(0,r.jsx)(s.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,r.jsx)(s.p,{children:"In the context of the rest of the application code:"}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Click to expand source code"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.ai_service import AiServiceStub\nfrom ahnlich_client_py.grpc.ai import query as ai_query\n\n\nasync def list_stores():\n  async with Channel(host="127.0.0.1", port=1370) as channel:\n      client = AiServiceStub(channel)\n      response = await client.list_stores(ai_query.ListStores())\n      print(response) #StoreList(stores=[AiStoreInfo(name=\'test store\', embedding_size=384)])\n\n\nif __name__ == "__main__":\n  asyncio.run(list_stores())\n'})})]}),"\n",(0,r.jsx)(s.h2,{id:"define-request-parameters",children:"Define Request Parameters"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"ListStores"})," request does not take any required parameters.\nIt queries the ",(0,r.jsx)(s.strong,{children:"AI service registry"})," and returns metadata about all accessible stores."]}),"\n",(0,r.jsx)(s.h2,{id:"define-response-handling",children:"Define Response Handling"}),"\n",(0,r.jsx)(s.p,{children:"The response provides a structured list of stores, where each entry typically contains:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Store name"})," (unique identifier)"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Configuration details"})," (embedding dimensions, indexing strategy, etc.)"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Associated algorithms"})," (if applicable)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This allows developers to dynamically discover stores at runtime without hardcoding store names."}),"\n",(0,r.jsx)(s.h2,{id:"customize-usage",children:"Customize Usage"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ListStores"})," is useful for:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Dynamic discovery"}),": Applications can adapt to whatever stores exist at runtime."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Debugging"}),": Confirming that a store was successfully created and registered."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Observability"}),": Displaying available stores in admin dashboards."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.strong,{children:"List Stores"})," request is often used as a precursor to ",(0,r.jsx)(s.strong,{children:"querying embeddings"})," or similarity search, since it ensures the target store exists before making downstream calls."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);