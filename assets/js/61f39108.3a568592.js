"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[5759],{9113:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"components/ahnlich-cli/db-commands","title":"DB Commands","description":"The Ahnlich CLI also supports structured database stores that allow you to insert, retrieve, and manage key-value data with predicates and indexes. Unlike AI Stores, which use embeddings and models, DB Stores are optimized for direct key-based and predicate-based queries.","source":"@site/docs/components/ahnlich-cli/db-commands.md","sourceDirName":"components/ahnlich-cli","slug":"/components/ahnlich-cli/db-commands","permalink":"/docs/components/ahnlich-cli/db-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/components/ahnlich-cli/db-commands.md","tags":[],"version":"current","frontMatter":{"title":"DB Commands"},"sidebar":"docsSidebar","previous":{"title":"Installation","permalink":"/docs/components/ahnlich-cli/installation"},"next":{"title":"AI Commands","permalink":"/docs/components/ahnlich-cli/ai-commands"}}');var i=r(74848),d=r(28453);const t={title:"DB Commands"},l="Ahnlich CLI \u2013 Database Commands",a={},o=[{value:"Example Workflow",id:"example-workflow",level:2},{value:"DB CLI Commands",id:"db-cli-commands",level:2},{value:"1. Ping the DB server",id:"1-ping-the-db-server",level:3},{value:"2. Get DB server information",id:"2-get-db-server-information",level:3},{value:"3. List all DB stores",id:"3-list-all-db-stores",level:3},{value:"4. Create a Store for DB",id:"4-create-a-store-for-db",level:3},{value:"5. Insert DB Data",id:"5-insert-db-data",level:3},{value:"6. Drop a Store",id:"6-drop-a-store",level:3},{value:"7. Get Data by Key",id:"7-get-data-by-key",level:3},{value:"8. Query DB Data by Predicate",id:"8-query-db-data-by-predicate",level:3},{value:"9. Create Predicate Index",id:"9-create-predicate-index",level:3},{value:"10. Drop Predicate Index",id:"10-drop-predicate-index",level:3},{value:"11. Create Non-Linear Algorithm Index",id:"11-create-non-linear-algorithm-index",level:3},{value:"12. Drop Non-Linear Algorithm Index",id:"12-drop-non-linear-algorithm-index",level:3},{value:"13. Delete a Key",id:"13-delete-a-key",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ahnlich-cli--database-commands",children:"Ahnlich CLI \u2013 Database Commands"})}),"\n",(0,i.jsx)(n.p,{children:"The Ahnlich CLI also supports structured database stores that allow you to insert, retrieve, and manage key-value data with predicates and indexes. Unlike AI Stores, which use embeddings and models, DB Stores are optimized for direct key-based and predicate-based queries."}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"DB Store"})," manages:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Keys and Values"})," \u2013 you insert plain data (strings, JSON-like objects, numbers)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Predicates"})," \u2013 metadata fields for filtering queries."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Indexes"})," \u2013 predicate and algorithmic indexes for efficient lookups."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"With DB Stores, you can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Insert data as key-value pairs."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Retrieve values directly by key."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Query data using predicates."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create and drop indexes for better performance."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Delete specific keys or drop entire stores."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create a DB Store"})," with predicates and optional indexes."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Insert Data"})," into the store."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Query Data"})," by key or predicate."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Manage Indexes"})," for faster searches."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Drop Stores or Keys"})," when they\u2019re no longer needed."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"db-cli-commands",children:"DB CLI Commands"}),"\n",(0,i.jsx)(n.p,{children:"Below are the most common commands you can run against your DB store:"}),"\n",(0,i.jsx)(n.h3,{id:"1-ping-the-db-server",children:"1. Ping the DB server"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"PING"})}),"\n",(0,i.jsx)(n.p,{children:"Checks if the DB server is alive and responding."}),"\n",(0,i.jsx)(n.h3,{id:"2-get-db-server-information",children:"2. Get DB server information"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"INFOSERVER"})}),"\n",(0,i.jsx)(n.p,{children:"Returns server metadata, including version, address, type, and resource limits."}),"\n",(0,i.jsx)(n.h3,{id:"3-list-all-db-stores",children:"3. List all DB stores"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"LISTSTORES"})}),"\n",(0,i.jsx)(n.p,{children:"Lists all stores currently available on the DB server."}),"\n",(0,i.jsx)(n.h3,{id:"4-create-a-store-for-db",children:"4. Create a Store for DB"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CREATESTORE my_store PREDICATES (author, category)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Creates a new database store ",(0,i.jsx)(n.code,{children:"my_store"})," with ",(0,i.jsx)(n.code,{children:"author"})," and ",(0,i.jsx)(n.code,{children:"category"})," as metadata fields."]}),"\n",(0,i.jsx)(n.h3,{id:"5-insert-db-data",children:"5. Insert DB Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SET ((key1, {author: Alice, category: ml}),\n     (key2, {author: Bob, category: dev})) IN my_store\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Inserts two records into ",(0,i.jsx)(n.code,{children:"my_store"})," with associated predicates."]}),"\n",(0,i.jsx)(n.h3,{id:"6-drop-a-store",children:"6. Drop a Store"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DROPSTORE my_store IF EXISTS\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Deletes the store ",(0,i.jsx)(n.code,{children:"my_store"})," if it exists."]}),"\n",(0,i.jsx)(n.h3,{id:"7-get-data-by-key",children:"7. Get Data by Key"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"GET key1 IN my_store\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Retrieves the entry with ",(0,i.jsx)(n.code,{children:"key1"})," from ",(0,i.jsx)(n.code,{children:"my_store"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"8-query-db-data-by-predicate",children:"8. Query DB Data by Predicate"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"GETPRED (author = Alice) IN my_store\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Retrieves all entries in ",(0,i.jsx)(n.code,{children:"my_store"})," where ",(0,i.jsx)(n.code,{children:"author = Alice"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"9-create-predicate-index",children:"9. Create Predicate Index"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CREATEPREDINDEX (author, category) IN my_store\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Creates an index on ",(0,i.jsx)(n.code,{children:"author"})," and ",(0,i.jsx)(n.code,{children:"category"})," predicates to speed up lookups."]}),"\n",(0,i.jsx)(n.h3,{id:"10-drop-predicate-index",children:"10. Drop Predicate Index"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DROPPREDINDEX (category) IN my_store\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes the index on the ",(0,i.jsx)(n.code,{children:"category"})," predicate."]}),"\n",(0,i.jsx)(n.h3,{id:"11-create-non-linear-algorithm-index",children:"11. Create Non-Linear Algorithm Index"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"CREATENONLINEARALGORITHMINDEX (btree) IN my_store\n"})}),"\n",(0,i.jsx)(n.p,{children:"Creates a B-Tree index for efficient range and predicate queries."}),"\n",(0,i.jsx)(n.h3,{id:"12-drop-non-linear-algorithm-index",children:"12. Drop Non-Linear Algorithm Index"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DROPNONLINEARALGORITHMINDEX (btree) IN my_store\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Drops the B-Tree index from ",(0,i.jsx)(n.code,{children:"my_store"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"13-delete-a-key",children:"13. Delete a Key"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DELETEKEY (key1) IN my_store\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Deletes the entry ",(0,i.jsx)(n.code,{children:"key1"})," from ",(0,i.jsx)(n.code,{children:"my_store"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(96540);const i={},d=s.createContext(i);function t(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);