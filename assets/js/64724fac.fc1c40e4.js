"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[9184],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var t=i(96540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},50242:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"client-libraries/rust/request-ai/list-connected-clients","title":"List Connected Clients","description":"Retrieves a list of clients currently connected to the AI service. This provides visibility into active sessions, useful for monitoring, debugging, and coordinating multi-client AI workloads.","source":"@site/docs/client-libraries/rust/request-ai/list-connected-clients.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/list-connected-clients","permalink":"/docs/client-libraries/rust/request-ai/list-connected-clients","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/list-connected-clients.md","tags":[],"version":"current","frontMatter":{"title":"List Connected Clients"},"sidebar":"docsSidebar","previous":{"title":"Drop Store","permalink":"/docs/client-libraries/rust/request-ai/drop-store"},"next":{"title":"Create Non-Linear Algorithm Index","permalink":"/docs/client-libraries/rust/request-ai/create-non-linear-algx"}}');var s=i(74848),r=i(28453);const l={title:"List Connected Clients"},c="List Connected Clients",o={},a=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"list-connected-clients",children:"List Connected Clients"})}),"\n",(0,s.jsxs)(n.p,{children:["Retrieves a list of clients currently connected to the ",(0,s.jsx)(n.strong,{children:"AI service"}),". This provides visibility into active sessions, useful for monitoring, debugging, and coordinating multi-client AI workloads."]}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use ahnlich_types::db::query::CreateNonLinearAlgorithmIndex;\nuse ahnlich_client_rs::AiClient; // AiClient is exposed at crate root\nuse tokio;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Connect to AI client (adjust the URL if needed)\n    let ai_client = AiClient::new("http://[::1]:1370".to_string()).await?;\n\n\n    // Only `store` and `non_linear_indices` are valid fields\n    let params = CreateNonLinearAlgorithmIndex {\n        store: "Deven Kicks".to_string(),\n        non_linear_indices: vec!["my_algorithm".to_string()],\n    };\n\n\n    // Call the RPC\n    let response = ai_client\n        .create_non_linear_algorithm_index(params, None)\n        .await?;\n\n\n    println!("Non-linear algorithm index created: {:?}", response);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Ok(ClientList)"})," \u2014 A structured list of active AI client connections."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if the request fails due to connectivity issues or service errors."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Wraps an empty ",(0,s.jsx)(n.code,{children:"ListClients {}"})," request in a ",(0,s.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Adds trace metadata if provided."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Calls the AI service\u2019s ",(0,s.jsx)(n.code,{children:"list_clients"})," RPC."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Awaits the response and extracts the list of connected clients."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);