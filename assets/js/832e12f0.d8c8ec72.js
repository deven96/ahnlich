"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[8956],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(96540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},72781:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"client-libraries/python/request-db/create-store","title":"Create Store","description":"A Store in Ahnlich is like a logical dataset or collection. Each store holds vectors and their associated metadata, allowing you to organize data by application, environment, or project.","source":"@site/docs/client-libraries/python/request-db/create-store.md","sourceDirName":"client-libraries/python/request-db","slug":"/client-libraries/python/request-db/create-store","permalink":"/docs/client-libraries/python/request-db/create-store","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-db/create-store.md","tags":[],"version":"current","frontMatter":{"title":"Create Store"},"sidebar":"docsSidebar","previous":{"title":"List Stores","permalink":"/docs/client-libraries/python/request-db/list-stores"},"next":{"title":"Set","permalink":"/docs/client-libraries/python/request-db/set"}}');var s=n(74848),i=n(28453);const o={title:"Create Store"},a="Create Store",c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"create-store",children:"Create Store"})}),"\n",(0,s.jsx)(t.p,{children:"A Store in Ahnlich is like a logical dataset or collection. Each store holds vectors and their associated metadata, allowing you to organize data by application, environment, or project."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Behavior"}),": Creates a new isolated vector store. Multiple stores can coexist, enabling different workloads."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Response"}),": A confirmation message (Unit)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"Click to expand source code"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.db_service import DbServiceStub\nfrom ahnlich_client_py.grpc.db import query as db_query\nfrom ahnlich_client_py.grpc.db.server import Unit\n\nasync def create_store():\n  async with Channel(host="127.0.0.1", port=1369) as channel:\n    client = DbServiceStub(channel)\n    response = await client.create_store(\n      db_query.CreateStore(\n        store="test store 006",\n        dimension=5,  # Fixed vector dimension\n        create_predicates=["job"],  # Index these metadata fields\n        error_if_exists=True\n      )\n    )\n    # response is Unit() on success\n  \n    # All store_keys must match this dimension\n    # Example valid key:\n    valid_key = [1.0, 2.0, 3.0, 4.0, 5.0]  # length = 5\n  assert isinstance(response, Unit)\nif __name__ == "__main__":\n  asyncio.run(create_store())\n'})})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);