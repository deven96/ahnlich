"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[3721],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var i=t(96540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},57868:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"client-libraries/rust/request-db/list-connected-clients","title":"List Connected Clients","description":"Retrieves a list of all clients currently connected to the database service. This is useful for monitoring active sessions, debugging connectivity issues, and gaining visibility into which applications are using the DB.","source":"@site/docs/client-libraries/rust/request-db/list-connected-clients.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/list-connected-clients","permalink":"/docs/client-libraries/rust/request-db/list-connected-clients","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/list-connected-clients.md","tags":[],"version":"current","frontMatter":{"title":"List Connected Clients"},"sidebar":"docsSidebar","previous":{"title":"Drop Store","permalink":"/docs/client-libraries/rust/request-db/drop-store"},"next":{"title":"Create Non-Linear Algorithm Index","permalink":"/docs/client-libraries/rust/request-db/create-non-linear-algx"}}');var s=t(74848),r=t(28453);const l={title:"List Connected Clients"},c="List Connected Clients",o={},a=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"list-connected-clients",children:"List Connected Clients"})}),"\n",(0,s.jsx)(n.p,{children:"Retrieves a list of all clients currently connected to the database service. This is useful for monitoring active sessions, debugging connectivity issues, and gaining visibility into which applications are using the DB."}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\nuse ahnlich_client_rs::error::AhnlichError;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    // Set the DB server address\n    let addr = "127.0.0.1:1369".to_string();\n\n\n    // Initialize the DB client\n    let db_client = DbClient::new(addr).await?;\n\n\n    // Fetch the list of connected clients\n    let clients = db_client.list_clients(None).await?;\n\n\n    // Print the clients in a readable way\n    println!("Connected clients:");\n    for (i, client) in clients.clients.iter().enumerate() {\n        println!("{}. {:?}", i + 1, client);\n    }\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace context for observability."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ClientList"})," \u2014 A structured list of connected clients with their identifiers and metadata."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"AhnlichError"})," \u2014 If the request fails due to communication or server-side errors."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Constructs a ",(0,s.jsx)(n.code,{children:"ListClients"})," request."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Adds optional tracing information."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Queries the DB service for all currently connected clients and returns the result."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);