"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[856],{20387:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"client-libraries/rust/request-ai/ping","title":"Ping","description":"Checks connectivity with the Ahnlich AI service and verifies the server is reachable over the current gRPC channel. Use this lightweight call for health checks or to validate that the AI client can communicate with the service before issuing embedding or inference requests.","source":"@site/docs/client-libraries/rust/request-ai/ping.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/ping","permalink":"/docs/client-libraries/rust/request-ai/ping","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/ping.md","tags":[],"version":"current","frontMatter":{"title":"Ping"},"sidebar":"docsSidebar","previous":{"title":"Request AI","permalink":"/docs/client-libraries/rust/request-ai/"},"next":{"title":"Info Server","permalink":"/docs/client-libraries/rust/request-ai/info-server"}}');var r=i(74848),s=i(28453);const l={title:"Ping"},c="Ping",a={},o=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ping",children:"Ping"})}),"\n",(0,r.jsxs)(n.p,{children:["Checks connectivity with the ",(0,r.jsx)(n.strong,{children:"Ahnlich AI"})," service and verifies the server is reachable over the current gRPC channel. Use this lightweight call for health checks or to validate that the AI client can communicate with the service before issuing embedding or inference requests."]}),"\n",(0,r.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Click to expand"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// src/bin/pingai.rs\n\n\nuse ahnlich_client_rs::ai::AiClient; // AiClient path\nuse ahnlich_client_rs::error::AhnlichError; // Error type\nuse ahnlich_types::ai::pipeline::AiResponsePipeline;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    // AI server address\n    let addr = "http://127.0.0.1:1370";\n\n\n    // Initialize the AI client\n    let ai_client = AiClient::new(addr.to_string()).await?;\n\n\n    // Simple ping request\n    let pong = ai_client.ping(None).await?;\n    println!("AI Server Pong received: {:?}", pong);\n\n\n    // Using a pipeline to send a ping\n    let mut pipeline = ai_client.pipeline(None);\n    pipeline.ping();\n    let res: AiResponsePipeline = pipeline.exec().await?;\n    println!("Pipeline response: {:?}", res);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent used to propagate observability metadata with the request."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Ok(Pong)"})," \u2014 A lightweight acknowledgement from the server indicating connectivity."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 If the request fails due to transport, server, or authentication errors."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Constructs a ",(0,r.jsx)(n.code,{children:"tonic::Request"})," carrying an empty ",(0,r.jsx)(n.code,{children:"Ping {}"})," message."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Calls ",(0,r.jsx)(n.code,{children:"add_trace_parent(&mut req, tracing_id)"})," to attach the optional tracing context to the gRPC metadata."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Uses a cloned gRPC client to call the remote ",(0,r.jsx)(n.code,{children:"ping"})," RPC, awaits the response, and returns the inner ",(0,r.jsx)(n.code,{children:"Pong"})," payload."]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var t=i(96540);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);