"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[1943],{28453:(e,r,s)=>{s.d(r,{R:()=>o,x:()=>l});var t=s(96540);const i={},n=t.createContext(i);function o(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(n.Provider,{value:r},e.children)}},79210:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"client-libraries/rust/request-ai/list-stores","title":"List Store","description":"Retrieves a list of all vector stores currently managed by the AI service. Each store represents a logical container for embeddings and their associated metadata. This operation is useful for exploring available stores before performing read or write operations.","source":"@site/docs/client-libraries/rust/request-ai/list-stores.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/list-stores","permalink":"/docs/client-libraries/rust/request-ai/list-stores","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/list-stores.md","tags":[],"version":"current","frontMatter":{"title":"List Store"},"sidebar":"docsSidebar","previous":{"title":"Info Server","permalink":"/docs/client-libraries/rust/request-ai/info-server"},"next":{"title":"Create Store","permalink":"/docs/client-libraries/rust/request-ai/create-store"}}');var i=s(74848),n=s(28453);const o={title:"List Store"},l="List Stores",a={},c=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components},{Details:s}=r;return s||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"list-stores",children:"List Stores"})}),"\n",(0,i.jsxs)(r.p,{children:["Retrieves a list of all vector stores currently managed by the ",(0,i.jsx)(r.strong,{children:"AI service"}),". Each store represents a logical container for embeddings and their associated metadata. This operation is useful for exploring available stores before performing read or write operations."]}),"\n",(0,i.jsx)(r.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_client_rs::error::AhnlichError;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    let addr = "127.0.0.1:1370";\n    let client = AiClient::new(addr.to_string()).await?;\n\n\n    let stores = client.list_stores(None).await?;\n    println!("Stores: {:?}", stores);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,i.jsx)(r.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"Ok(StoreList)"})," \u2014 A structured list of available vector stores managed by the AI service."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"Err(AhnlichError)"})," \u2014 If the request fails due to connectivity issues, authorization errors, or service unavailability."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Creates a ",(0,i.jsx)(r.code,{children:"tonic::Request"})," wrapping an empty ",(0,i.jsx)(r.code,{children:"ListStores {}"})," message."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:"Adds a tracing ID if provided for observability."}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Calls the remote ",(0,i.jsx)(r.code,{children:"list_stores"})," RPC using the AI client."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:"Awaits the result and unwraps the server\u2019s response."}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Returns the ",(0,i.jsx)(r.code,{children:"StoreList"})," object containing store metadata."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);