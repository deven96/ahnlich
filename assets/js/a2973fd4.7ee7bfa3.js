"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[5509],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(96540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},58535:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"client-libraries/rust/request-ai/drop-store","title":"Drop Store","description":"Deletes an entire vector store from the AI service, including all embeddings and their associated metadata. This is a destructive operation and should be used with caution. Dropping a store is useful when the store is no longer needed, when cleaning up unused resources, or when resetting a dataset for fresh ingestion.","source":"@site/docs/client-libraries/rust/request-ai/drop-store.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/drop-store","permalink":"/docs/client-libraries/rust/request-ai/drop-store","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/drop-store.md","tags":[],"version":"current","frontMatter":{"title":"Drop Store"},"sidebar":"docsSidebar","previous":{"title":"Delete Key","permalink":"/docs/client-libraries/rust/request-ai/delete-key"},"next":{"title":"List Connected Clients","permalink":"/docs/client-libraries/rust/request-ai/list-connected-clients"}}');var s=r(74848),i=r(28453);const o={title:"Drop Store"},l="Drop Store",a={},c=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"drop-store",children:"Drop Store"})}),"\n",(0,s.jsxs)(n.p,{children:["Deletes an entire vector store from the ",(0,s.jsx)(n.strong,{children:"AI service"}),", including all embeddings and their associated metadata. This is a destructive operation and should be used with caution. Dropping a store is useful when the store is no longer needed, when cleaning up unused resources, or when resetting a dataset for fresh ingestion."]}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use ahnlich_types::ai::query::DropStore;\nuse ahnlich_client_rs::ai::AiClient;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = AiClient::new("http://127.0.0.1:1370".to_string()).await?;\n\n\n    let drop_params = DropStore {\n        store: "Deven Kicks".to_string(),\n        error_if_not_exists: true,\n    };\n\n\n    let result = client.drop_store(drop_params, None).await?;\n\n\n    println!("Deleted count: {}", result.deleted_count);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"params: DropStore"})," \u2014 Specifies the store to remove."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent ID for observability and distributed tracing."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Ok(Del)"})," \u2014 Confirmation that the store and all its contents were successfully deleted."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if the store does not exist, is in use, or the deletion fails."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Wraps the ",(0,s.jsx)(n.code,{children:"DropStore"})," parameters in a ",(0,s.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attaches optional tracing metadata."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Sends the request to the AI service\u2019s RPC endpoint."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Awaits the server response and extracts the result."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)(n.code,{children:"Del"})," object confirming the store\u2019s removal."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);