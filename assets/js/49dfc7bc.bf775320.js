"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[6779],{28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>a});var t=r(96540);const i={},s=t.createContext(i);function d(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(s.Provider,{value:n},e.children)}},32390:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"client-libraries/rust/request-db/create-predicate-index","title":"Create Predicate Index","description":"Creates an index on a predicate field in a store. Predicate indexes allow efficient filtering and retrieval of vectors based on metadata conditions, improving query performance for repeated predicate lookups.","source":"@site/docs/client-libraries/rust/request-db/create-predicate-index.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/create-predicate-index","permalink":"/docs/client-libraries/rust/request-db/create-predicate-index","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/create-predicate-index.md","tags":[],"version":"current","frontMatter":{"title":"Create Predicate Index"},"sidebar":"docsSidebar","previous":{"title":"Get By Predicate","permalink":"/docs/client-libraries/rust/request-db/get-by-predicate"},"next":{"title":"Drop Predicate Index","permalink":"/docs/client-libraries/rust/request-db/drop-predicate-index"}}');var i=r(74848),s=r(28453);const d={title:"Create Predicate Index"},a="Create Predicate Index",c={},l=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"create-predicate-index",children:"Create Predicate Index"})}),"\n",(0,i.jsx)(n.p,{children:"Creates an index on a predicate field in a store. Predicate indexes allow efficient filtering and retrieval of vectors based on metadata conditions, improving query performance for repeated predicate lookups."}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\nuse ahnlich_types::db::query::CreatePredIndex;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // connect to DB server\n    let db_client = DbClient::new("127.0.0.1:1369".to_string()).await?;\n    let tracing_id: Option<String> = None;\n\n\n    // Create predicate index request\n    let params = CreatePredIndex {\n        store: "Main".to_string(),\n        predicates: vec!["role = \'admin\'".to_string()], // <-- must be Vec<String>\n    };\n\n\n    // Call the client\n    match db_client.create_pred_index(params, tracing_id).await {\n        Ok(result) => {\n            println!("Created predicate index: {:?}", result);\n        }\n        Err(err) => {\n            eprintln!("Error creating predicate index: {:?}", err);\n        }\n    }\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"params: CreatePredIndex"})," \u2014 Defines the target store and the predicate field to be indexed."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CreateIndex"})," \u2014 Response confirming that the index has been successfully created."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"AhnlichError"})," \u2014 Returned if the store does not exist, the field is invalid, or index creation fails."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Wraps the provided ",(0,i.jsx)(n.code,{children:"CreatePredIndex"})," parameters into a gRPC request."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Adds optional tracing metadata to the request for debugging or monitoring."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Invokes the ",(0,i.jsx)(n.code,{children:"create_pred_index"})," RPC on the Ahnlich server via the cloned gRPC client."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Awaits the server\u2019s response and extracts the ",(0,i.jsx)(n.code,{children:"CreateIndex"})," result using ",(0,i.jsx)(n.code,{children:".into_inner()"}),"."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);