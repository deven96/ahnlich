"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[5933],{6200:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"client-libraries/go/request-ai/ping","title":"Ping","description":"Description","source":"@site/docs/client-libraries/go/request-ai/ping.md","sourceDirName":"client-libraries/go/request-ai","slug":"/client-libraries/go/request-ai/ping","permalink":"/docs/client-libraries/go/request-ai/ping","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/request-ai/ping.md","tags":[],"version":"current","frontMatter":{"title":"Ping"},"sidebar":"docsSidebar","previous":{"title":"Request AI","permalink":"/docs/client-libraries/go/request-ai/"},"next":{"title":"Info Server","permalink":"/docs/client-libraries/go/request-ai/info-server"}}');var r=i(74848),c=i(28453);const o={title:"Ping"},l="Ping",s={},a=[{value:"Description",id:"description",level:2},{value:"Source Code Example",id:"source-code-example",level:2},{value:"Behavior",id:"behavior",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ping",children:"Ping"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Ping"})," request verifies basic connectivity and reachability between your Go client and the ",(0,r.jsx)(n.strong,{children:"Ahnlich AI proxy"}),". It\u2019s the simplest call you can make to confirm the AI service is available before sending heavier requests (for example, embedding or create-store operations)."]}),"\n",(0,r.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Click to expand source code"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\n\nimport (\n  "context"\n  "fmt"\n  "log"\n  "time"\n\n\n  "google.golang.org/grpc"\n  "google.golang.org/grpc/credentials/insecure"\n\n\n  aiquery "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/ai/query"\n  aisvc "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/services/ai_service"\n)\n\n\nconst AIAddr = "127.0.0.1:1370"\n\n\n// ExampleAIClient holds the gRPC connection and AI client.\ntype ExampleAIClient struct {\n  conn   *grpc.ClientConn\n  client aisvc.AIServiceClient\n  ctx    context.Context\n}\n\n\n// NewAIClient connects to the AI server and returns a client.\nfunc NewAIClient(ctx context.Context) (*ExampleAIClient, error) {\n  conn, err := grpc.DialContext(ctx, AIAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n  if err != nil {\n      return nil, fmt.Errorf("failed to dial AI server %q: %w", AIAddr, err)\n  }\n  client := aisvc.NewAIServiceClient(conn)\n  return &ExampleAIClient{conn: conn, client: client, ctx: ctx}, nil\n}\n\n\n// Close closes the gRPC connection.\nfunc (c *ExampleAIClient) Close() error {\n  return c.conn.Close()\n}\n\n\n// ---- Ping Example ----\nfunc (c *ExampleAIClient) examplePingAI() error {\n  resp, err := c.client.Ping(c.ctx, &aiquery.Ping{})\n  if err != nil {\n      return err\n  }\n  fmt.Println(" AI Ping:", resp)\n  return nil\n}\n\n\nfunc main() {\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n\n  client, err := NewAIClient(ctx)\n  if err != nil {\n      log.Fatalf("Failed to create AI client: %v", err)\n  }\n  defer client.Close()\n\n\n  if err := client.examplePingAI(); err != nil {\n      log.Fatalf("Ping failed: %v", err)\n  }\n}\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsx)(n.p,{children:"A successful call indicates the client can reach and receive a response from the AI proxy."}),"\n",(0,r.jsx)(n.p,{children:"A failure (non-nil err) typically indicates connectivity problems or that the AI proxy is not currently accepting requests."}),"\n",(0,r.jsx)(n.p,{children:"The call should be fast and lightweight \u2014 suitable for frequent checks if needed, but treat it as an RPC (avoid unnecessarily tight polling loops)."})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(96540);const r={},c=t.createContext(r);function o(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);