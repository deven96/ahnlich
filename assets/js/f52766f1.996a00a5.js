"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[3746],{26146:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"client-libraries/python/request-db/ping","title":"Ping","description":"The Ping request is used to test the connectivity between the Python client and the Ahnlich DB server.","source":"@site/docs/client-libraries/python/request-db/ping.md","sourceDirName":"client-libraries/python/request-db","slug":"/client-libraries/python/request-db/ping","permalink":"/docs/client-libraries/python/request-db/ping","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-db/ping.md","tags":[],"version":"current","frontMatter":{"title":"Ping","sidebar_posiiton":1},"sidebar":"docsSidebar","previous":{"title":"Request DB","permalink":"/docs/client-libraries/python/request-db/"},"next":{"title":"Info Server","permalink":"/docs/client-libraries/python/request-db/info-server"}}');var r=t(74848),s=t(28453);const c={title:"Ping",sidebar_posiiton:1},o="Ping",a={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ping",children:"Ping"})}),"\n",(0,r.jsx)(n.p,{children:"The Ping request is used to test the connectivity between the Python client and the Ahnlich DB server.\nIt acts as a health check to confirm that the DB service is up and running, and it is also useful for debugging or monitoring setups."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Input"}),": No arguments are required. You may pass optional metadata, such as tracing IDs, for observability and distributed tracing."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Behavior"}),": The client sends a simple ping message to the DB server, and the server responds with a Pong."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response"}),": A Pong message confirming connectivity."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Click to expand source code"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.db_service import DbServiceStub\nfrom ahnlich_client_py.grpc.db import query as db_query\nfrom ahnlich_client_py.grpc.db.server import Pong\n\nasync def Ping():\n\n  """\n  Test ping\n  """\n\n  # Initialize client\n\n  async with Channel(host="127.0.0.1", port=1369) as channel:\n\n    db_client = DbServiceStub(channel)\n\n    # Prepare tracing metadata\n\n    tracing_id = "00-80e1afed08e019fc1110464cfa66635c-7a085853722dc6d2-01"\n\n    metadata = {"ahnlich-trace-id": tracing_id}\n\n    # Make request with metadata\n\n    response = await db_client.ping(\n\n      db_query.Ping(),\n\n      metadata=metadata\n\n    )\n\nif __name__ == "__main__":\n  asyncio.run(Ping()) \n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);