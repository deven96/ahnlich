"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[7474],{28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var i=r(96540);const s={},t=i.createContext(s);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:n},e.children)}},88928:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"client-libraries/python/request-db/get-simn","title":"GetSimN","description":"The GetSimN request performs a similarity search.","source":"@site/docs/client-libraries/python/request-db/get-simn.md","sourceDirName":"client-libraries/python/request-db","slug":"/client-libraries/python/request-db/get-simn","permalink":"/docs/client-libraries/python/request-db/get-simn","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-db/get-simn.md","tags":[],"version":"current","frontMatter":{"title":"GetSimN"},"sidebar":"docsSidebar","previous":{"title":"Set","permalink":"/docs/client-libraries/python/request-db/set"},"next":{"title":"GetKey","permalink":"/docs/client-libraries/python/request-db/get-key"}}');var s=r(74848),t=r(28453);const c={title:"GetSimN"},l="GetSimN",o={},h=[];function a(e){const n={br:"br",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"getsimn",children:"GetSimN"})}),"\n",(0,s.jsxs)(n.p,{children:["The GetSimN request performs a similarity search.",(0,s.jsx)(n.br,{}),"\n","It retrieves the N closest vectors to a given query vector."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"store"}),": store name."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"search_input"}),": the query vector (",(0,s.jsx)(n.code,{children:"StoreKey"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"closest_n"}),": number of results to return (> 0)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"algorithm"}),": similarity metric (e.g. CosineSimilarity, EuclideanDistance)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Behavior"}),": The server compares the query vector with stored vectors using the chosen similarity metric."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Response"}),": A list of entries with:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"key"})," (vector),"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"value"})," (metadata),"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"score"})," (similarity measure)."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Click to expand source code"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.db_service import DbServiceStub\nfrom ahnlich_client_py.grpc.db import query as db_query\nfrom ahnlich_client_py.grpc import keyval\nfrom ahnlich_client_py.grpc.algorithm.algorithms import Algorithm\n\n\nasync def get_simn():\n  async with Channel(host="127.0.0.1", port=1369) as channel:\n    client = DbServiceStub(channel)\n\n\n    search_key = keyval.StoreKey(key=[5.0, 5.1, 3.4, 5.1, 4.9])\n\n\n    response = await client.get_sim_n(\n      db_query.GetSimN(\n        store="test store",\n        search_input=search_key,\n        closest_n=3,\n        algorithm=Algorithm.CosineSimilarity\n      )\n    )\n\n    print(response.entries)  # [(key, value, score), ...]\n\n\nif __name__ == "__main__":\n  asyncio.run(get_simn())\n'})})]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);