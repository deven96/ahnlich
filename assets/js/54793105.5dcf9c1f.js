"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[3085],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},98328:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"client-libraries/rust/request-db/set","title":"Set","description":"The Set request inserts or updates a vector in a given store. Each vector is stored alongside optional metadata and a unique key. If a key already exists in the store, calling Set with the same key will overwrite the existing vector and metadata.","source":"@site/docs/client-libraries/rust/request-db/set.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/set","permalink":"/docs/client-libraries/rust/request-db/set","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/set.md","tags":[],"version":"current","frontMatter":{"title":"Set"},"sidebar":"docsSidebar","previous":{"title":"Create Store","permalink":"/docs/client-libraries/rust/request-db/create-store"},"next":{"title":"Get Sim N","permalink":"/docs/client-libraries/rust/request-db/get-simn"}}');var i=t(74848),s=t(28453);const a={title:"Set"},l="Set",o={},d=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Set"})," request inserts or updates a vector in a given store. Each vector is stored alongside optional metadata and a unique key. If a key already exists in the store, calling ",(0,i.jsx)(n.code,{children:"Set"})," with the same key will overwrite the existing vector and metadata."]}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\nuse ahnlich_types::{\n    db::query::Set,\n    keyval::{DbStoreEntry, StoreKey, StoreValue},\n    metadata::{MetadataValue, metadata_value::Value},\n};\nuse std::collections::HashMap;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Connect to DB server\n    let db_client = DbClient::new("127.0.0.1:1369".to_string()).await?;\n\n\n    let tracing_id: Option<String> = None;\n\n\n    // Construct inputs for the "set"\n    let inputs = vec![DbStoreEntry {\n        key: Some(StoreKey {\n            key: vec![0.5, 0.2, 0.9], // must match store dimension\n        }),\n        value: Some(StoreValue {\n            value: HashMap::from_iter([(\n                "role".into(),\n                MetadataValue {\n                    value: Some(Value::RawString("admin".into())),\n                },\n            )]),\n        }),\n    }];\n\n\n    let params = Set {\n        store: "Main".to_string(), // store must already exist\n        inputs,\n    };\n\n\n    // Call set\n    match db_client.set(params, tracing_id).await {\n        Ok(result) => {\n            println!("Set operation result: {:?}", result);\n        }\n        Err(err) => {\n            eprintln!("Error inserting vector: {:?}", err);\n        }\n    }\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"params: Set"})," \u2013 Defines the data to be stored. This includes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"store"})," \u2013 The name of the target store."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"key"})," \u2013 A unique identifier for the vector."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"vector"})," \u2013 The vector data (as ",(0,i.jsx)(n.code,{children:"Vec<f32>"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"metadata"})," \u2013 Optional key\u2013value pairs to annotate the vector (e.g., labels, categories)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2013 An optional tracing identifier for distributed observability."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Ok(SetResult)"})," \u2013 Contains information about the completed operation, such as success status and assigned identifiers."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2013 Returned if the operation fails. Common error cases include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Target store does not exist."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Provided vector does not match the dimensionality of the store."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Invalid key or malformed metadata."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Transport or server-side errors."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Set"})," is an upsert operation: it will insert if the key does not exist, or update if it already exists."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Vectors written with ",(0,i.jsx)(n.code,{children:"Set"})," are immediately available for similarity searches (e.g., ",(0,i.jsx)(n.code,{children:"Get Sim N"}),") or retrieval by key."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Metadata can be leveraged in predicate-based queries if a predicate index is defined."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Ensure consistent key usage to avoid unintended overwrites."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);