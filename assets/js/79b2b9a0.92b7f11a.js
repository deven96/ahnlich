"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[8079],{28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var r=i(96540);const s={},t=r.createContext(s);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(t.Provider,{value:n},e.children)}},60488:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"client-libraries/rust/request-ai/new","title":"New","description":"Initializes a new AI client instance that can communicate with the Ahnlich AI service. This method sets up the gRPC connection and prepares the client for performing operations such as embedding insertions, similarity searches, and pipelines.","source":"@site/docs/client-libraries/rust/request-ai/new.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/new","permalink":"/docs/client-libraries/rust/request-ai/new","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/new.md","tags":[],"version":"current","frontMatter":{"title":"New"},"sidebar":"docsSidebar","previous":{"title":"Drop Non-Linear Algorithm Index","permalink":"/docs/client-libraries/rust/request-ai/drop-non-linear-algx"},"next":{"title":"Purge Stores","permalink":"/docs/client-libraries/rust/request-ai/purge-stores"}}');var s=i(74848),t=i(28453);const c={title:"New"},l="New",a={},o=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"new",children:"New"})}),"\n",(0,s.jsxs)(n.p,{children:["Initializes a new ",(0,s.jsx)(n.strong,{children:"AI client"})," instance that can communicate with the Ahnlich ",(0,s.jsx)(n.strong,{children:"AI service"}),". This method sets up the gRPC connection and prepares the client for performing operations such as embedding insertions, similarity searches, and pipelines."]}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_client_rs::error::AhnlichError;\nuse tokio;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    let addr = "127.0.0.1:1370".to_string();\n\n\n    match AiClient::new(addr).await {\n        Ok(_client) => {\n            println!("AiClient successfully created!");\n            Ok(())\n        }\n        Err(e) => {\n            eprintln!("Failed to create AiClient: {:?}", e);\n            Err(e)\n        }\n    }\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"addr: String"})," \u2014 The address of the AI service (e.g., ",(0,s.jsx)(n.code,{children:'"127.0.0.1:1369"'}),"). If the scheme (",(0,s.jsx)(n.code,{children:"http://"})," or ",(0,s.jsx)(n.code,{children:"https://"}),") is not provided, it defaults to ",(0,s.jsx)(n.code,{children:"http://"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Ok(AiClient)"})," \u2014 A fully initialized AI client ready to perform requests."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if the connection fails or the provided address is invalid."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Ensures the address includes a valid HTTP/HTTPS scheme."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Creates a gRPC ",(0,s.jsx)(n.code,{children:"Channel"})," from the given address."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Connects to the AI service using ",(0,s.jsx)(n.code,{children:"AiServiceClient::connect"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Wraps the client in an ",(0,s.jsx)(n.code,{children:"AiClient"})," struct and returns it."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);