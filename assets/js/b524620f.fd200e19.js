"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[5716],{4878:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"client-libraries/rust/rust","title":"Rust","description":"The Ahnlich Rust client library is a Rust crate that allows you to interact with Ahnlich DB and Ahnlich AI.","source":"@site/docs/client-libraries/rust/rust.md","sourceDirName":"client-libraries/rust","slug":"/client-libraries/rust/","permalink":"/docs/client-libraries/rust/","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/rust.md","tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"title":"Rust","sidebar_position":30},"sidebar":"docsSidebar","previous":{"title":"Reference","permalink":"/docs/client-libraries/python/reference"},"next":{"title":"Installation and Usage","permalink":"/docs/client-libraries/rust/installation-and-usage"}}');var s=i(4848),r=i(8453);const l={title:"Rust",sidebar_position:30},c="Rust",a={},d=[{value:"\ud83e\udd80 Ahnlich Rust SDK",id:"-ahnlich-rust-sdk",level:2},{value:"\ud83d\ude80 Connecting to DB / AI Services",id:"-connecting-to-db--ai-services",level:2},{value:"Installation",id:"installation",level:2},{value:"Reference",id:"reference",level:2}];function o(e){const n={a:"a",code:"code",div:"div",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rust",children:"Rust"})}),"\n",(0,s.jsxs)(n.p,{children:["The Ahnlich Rust client library is a Rust crate that allows you to interact with ",(0,s.jsx)(n.a,{href:"/docs/components/ahnlich-db/",children:"Ahnlich DB"})," and ",(0,s.jsx)(n.a,{href:"/docs/components/ahnlich-ai/",children:"Ahnlich AI"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"id: client-rust"}),"\n",(0,s.jsx)(n.p,{children:"title: Rust SDK (\ud83e\udd80)"}),"\n",(0,s.jsx)(n.p,{children:"sidebar_label: Rust"}),"\n",(0,s.jsx)(n.p,{children:"description: Official Rust client library to integrate with Ahnlich DB (exact vector search) and AI (semantic embeddings) services."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-ahnlich-rust-sdk",children:"\ud83e\udd80 Ahnlich Rust SDK"}),"\n",(0,s.jsxs)(n.p,{children:["The official Rust client to interface with ",(0,s.jsx)(n.strong,{children:"ahnlich\u2011db"})," (exact similarity search) and ",(0,s.jsx)(n.strong,{children:"ahnlich\u2011ai"})," (semantic similarity) over gRPC."]}),"\n",(0,s.jsxs)(n.p,{children:["See full API docs and examples at ",(0,s.jsxs)(n.a,{href:"https://docs.rs/ahnlich_client_rs/0.1.0/ahnlich_client_rs/",children:["docs.rs \u2013 ",(0,s.jsx)(n.code,{children:"ahnlich_client_rs"})]})," ",(0,s.jsx)(n.div,{children:"oaicite:0"})]}),"\n",(0,s.jsx)(n.h2,{id:"-connecting-to-db--ai-services",children:"\ud83d\ude80 Connecting to DB / AI Services"}),"\n",(0,s.jsx)(n.p,{children:"Both services expect:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ahnlich-db"})," should be accessible (default: ",(0,s.jsx)(n.code,{children:"127.0.0.1:1369"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ahnlich-ai"})," should be separately reachable (default: ",(0,s.jsx)(n.code,{children:"127.0.0.1:1370"})," or as configured)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The SDK supports optional W3C trace context via an ",(0,s.jsx)(n.code,{children:"Option<String>"})," ",(0,s.jsx)(n.code,{children:"trace_id"})," in all calls."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust,no_run",children:'#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    let tracing_id: Option<String> = None;\n\n    // \u2714\ufe0f DB client:\n    let db_client = ahnlich_client_rs::db::DbClient::new("127.0.0.1:1369".to_string()).await?;\n    db_client.ping(tracing_id.clone()).await?;\n\n    // \u2714\ufe0f AI client:\n    let ai_client = ahnlich_client_rs::ai::AIClient::new("127.0.0.1:1369".to_string()).await?;\n    ai_client.ping(tracing_id.clone()).await?;\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\udde0 Best Practices\nAlways match vector/query dimension to the store\u2019s declared dimension (e.g. 128 or 768)."}),"\n",(0,s.jsx)(n.p,{children:"Use DbClient::pipeline() or AIClient::pipeline() if you require ordered batched operations with predictable response order."}),"\n",(0,s.jsx)(n.p,{children:"Metadata predicates are fast and flexible filtering tools\u2014even if predicates aren't pre-indexed."}),"\n",(0,s.jsx)(n.p,{children:"AI Stores automatically handle embedding; no need to compute embeddings manually for raw input."}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/client-libraries/rust/installation-and-usage",children:"Installation and Usage"})}),"\n",(0,s.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/client-libraries/rust/reference",children:"Reference"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var t=i(6540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);