"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[4342],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(96540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},51988:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"client-libraries/python/request-ai/create-non-linear-algx","title":"Create Non-Linear algorithm Index","description":"The Create Non Linear Algorithm Index operation builds an index structure for non-linear search algorithms, such as KD-Tree. These index enable faster query performance in high-dimensional vector spaces by avoiding brute-force scans.","source":"@site/docs/client-libraries/python/request-ai/create-non-linear-algx.md","sourceDirName":"client-libraries/python/request-ai","slug":"/client-libraries/python/request-ai/create-non-linear-algx","permalink":"/docs/client-libraries/python/request-ai/create-non-linear-algx","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-ai/create-non-linear-algx.md","tags":[],"version":"current","frontMatter":{"title":"Create Non-Linear algorithm Index"},"sidebar":"docsSidebar","previous":{"title":"Drop Store","permalink":"/docs/client-libraries/python/request-ai/drop-store"},"next":{"title":"Drop Non-Linear Algorithm Index","permalink":"/docs/client-libraries/python/request-ai/drop-non-linear-algx"}}');var t=r(74848),s=r(28453);const o={title:"Create Non-Linear algorithm Index"},a="Create Non-Linear algorithm Index",l={},c=[{value:"Behavior",id:"behavior",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"create-non-linear-algorithm-index",children:"Create Non-Linear algorithm Index"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Create Non Linear Algorithm Index"})," operation builds an index structure for non-linear search algorithms, such as KD-Tree. These index enable faster query performance in high-dimensional vector spaces by avoiding brute-force scans."]}),"\n",(0,t.jsx)(n.p,{children:"This operation is typically used when:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"You want to optimize search performance for similarity lookups."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"You are initializing a new store and need efficient query structures."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If an index for the specified algorithm already exists, the call will fail when ",(0,t.jsx)(n.code,{children:"error_if_exists=True"})," is set."]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Click to expand source code"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.ai_service import AiServiceStub\nfrom ahnlich_client_py.grpc.ai import query as ai_query\nfrom ahnlich_client_py.grpc.algorithm.nonlinear import NonLinearAlgorithm\n\n\nasync def create_non_linear_algorithm_index():\n  async with Channel(host="127.0.0.1", port=1370) as channel:\n      client = AiServiceStub(channel)\n      response = await client.create_non_linear_algorithm_index(\n          ai_query.CreateNonLinearAlgorithmIndex(\n              store="test store",\n              non_linear_indices=[NonLinearAlgorithm.KDTree],\n              # error_if_exists=True\n          )\n      )\n      print(response) # CreateIndex(created_indexes=1)\n\n\nif __name__ == "__main__":\n  asyncio.run(create_non_linear_algorithm_index())\n\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Index does not exist"})," - The index for the given algorithm(s) is created successfully."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Index already exists"})," -"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"error_if_exists=True"}),", the request fails with an error."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"error_if_exists=False"}),", the request completes without creating a duplicate index."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Non-linear index are designed to improve query performance but may require additional memory."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["You can create indices for multiple algorithms by listing them under ",(0,t.jsx)(n.code,{children:"algorithms=[...]"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"This operation only creates the index; it does not insert or modify store data."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);