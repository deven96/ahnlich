"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[8896],{28453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>d});var s=n(96540);const i={},t=s.createContext(i);function l(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:r},e.children)}},68531:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"client-libraries/rust/request-db/request-db","title":"request-db","description":"The Request DB provides a set of operations for managing vector stores and interacting with their contents. These APIs wrap low-level gRPC calls in a convenient Rust interface, handling request construction, tracing propagation, and response parsing. Together, they enable you to create, query, update, and delete records within the database in a structured and reliable way.","source":"@site/docs/client-libraries/rust/request-db/request-db.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/","permalink":"/docs/client-libraries/rust/request-db/","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/request-db.md","tags":[],"version":"current","frontMatter":{"title":"request-db"},"sidebar":"docsSidebar","previous":{"title":"Rust Specific Resources","permalink":"/docs/client-libraries/rust/rust-specific-resources"},"next":{"title":"Ping","permalink":"/docs/client-libraries/rust/request-db/ping"}}');var i=n(74848),t=n(28453);const l={title:"request-db"},d="Request DB",c={},a=[{value:"Capabilities",id:"capabilities",level:2},{value:"Behavior",id:"behavior",level:2}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"request-db",children:"Request DB"})}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.strong,{children:"Request DB"})," provides a set of operations for managing vector stores and interacting with their contents. These APIs wrap low-level gRPC calls in a convenient Rust interface, handling request construction, tracing propagation, and response parsing. Together, they enable you to create, query, update, and delete records within the database in a structured and reliable way."]}),"\n",(0,i.jsx)(r.p,{children:"Each operation follows the same execution pattern:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Request preparation"})," \u2014 Input parameters are wrapped in a ",(0,i.jsx)(r.code,{children:"tonic::Request"})," object."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Execution"})," \u2014 The client forwards the request to the DB service."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Response handling"})," \u2014 The response is unwrapped and returned in a typed result."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"capabilities",children:"Capabilities"}),"\n",(0,i.jsx)(r.p,{children:"With Request DB, you can:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Manage stores"})," \u2014 Create, list, and drop vector stores."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Insert and update data"})," \u2014 Use ",(0,i.jsx)(r.code,{children:"set"})," to add or modify records."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Query data"})," \u2014 Fetch by key, by predicate, or by similarity (",(0,i.jsx)(r.code,{children:"get_key"}),", ",(0,i.jsx)(r.code,{children:"get_pred"}),", ",(0,i.jsx)(r.code,{children:"get_sim_n"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Delete data"})," \u2014 Remove records by key or predicate (",(0,i.jsx)(r.code,{children:"del_key"}),", ",(0,i.jsx)(r.code,{children:"del_pred"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Index management"})," \u2014 Create and drop indexes for predicate and algorithm-based queries."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Server & client metadata"})," \u2014 Retrieve cluster information (",(0,i.jsx)(r.code,{children:"info_server"}),", ",(0,i.jsx)(r.code,{children:"list_clients"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsx)(r.p,{children:"All Request DB operations are designed to:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Ensure consistency"})," \u2014 Calls execute atomically on the server side."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Support idempotency"})," \u2014 Repeated calls with the same parameters will yield consistent results."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Handle concurrency"})," \u2014 Multiple clients can safely read and write without corrupting data."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Propagate observability"})," \u2014 Optional tracing IDs allow for full request tracing in distributed environments."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Below are the operations for managing vector stores, storing and retrieving vectors, performing similarity queries, and handling indexes in the Ahnlich database."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/ping",children:"Ping"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/info-server",children:"Info Server"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/list-stores",children:"List Stores"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/create-store",children:"Create Store"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/set",children:"Set"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/get-simn",children:"Get Sim N"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/get-key",children:"Get Key"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/get-by-predicate",children:"Get by Predicate"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/create-predicate-index",children:"Create Predicate Index"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/drop-predicate-index",children:"Drop Predicate Index"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/delete-key",children:"Delete Key"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/drop-store",children:"Drop Store"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/list-connected-clients",children:"List Connected Clients"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/create-non-linear-algx",children:"Create Non-Linear Algorithm Index"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/drop-non-linear-algx",children:"Drop Non-Linear Algorithm Index"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/docs/client-libraries/rust/request-db/delete-by-predicate",children:"Delete By Predicate"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);