"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[1002],{28453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>o});var s=i(96540);const r={},n=s.createContext(r);function l(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(n.Provider,{value:t},e.children)}},72151:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"client-libraries/rust/types-and-utilities","title":"Type & Utilities","description":"The crate re-exports commonly used parameter and result types through the prelude module, simplifying imports across your Rust project. This allows you to access frequently used structures, enums, and request builders without importing them individually from multiple modules.","source":"@site/docs/client-libraries/rust/types-and-utilities.md","sourceDirName":"client-libraries/rust","slug":"/client-libraries/rust/types-and-utilities","permalink":"/docs/client-libraries/rust/types-and-utilities","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/types-and-utilities.md","tags":[],"version":"current","frontMatter":{"title":"Type & Utilities"},"sidebar":"docsSidebar","previous":{"title":"Pipeline","permalink":"/docs/client-libraries/rust/pipeline"},"next":{"title":"Testing","permalink":"/docs/client-libraries/rust/testing"}}');var r=i(74848),n=i(28453);const l={title:"Type & Utilities"},o="Type & Utilities",c={},u=[{value:"Details",id:"details",level:2}];function a(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"type--utilities",children:"Type & Utilities"})}),"\n",(0,r.jsxs)(t.p,{children:["The crate re-exports commonly used parameter and result types through the ",(0,r.jsx)(t.code,{children:"prelude"})," module, simplifying imports across your Rust project. This allows you to access frequently used structures, enums, and request builders without importing them individually from multiple modules."]}),"\n",(0,r.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"All core types for AI and DB operations are accessible via the prelude."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["For complete type definitions, including structs, enums, and request builders, refer to the ",(0,r.jsxs)(t.strong,{children:[(0,r.jsx)(t.code,{children:"ahnlich_types"})," crate"]}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"This abstraction improves readability and reduces boilerplate in your Rust code when working with Ahnlich clients."}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);