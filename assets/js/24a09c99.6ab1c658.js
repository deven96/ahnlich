"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[1204],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(96540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},82479:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"client-libraries/rust/request-ai/set","title":"Set","description":"Inserts or updates embeddings and their associated metadata into a vector store managed by the AI service. This operation is central to populating a store with new data or refreshing existing entries to keep the dataset consistent and relevant for similarity search.","source":"@site/docs/client-libraries/rust/request-ai/set.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/set","permalink":"/docs/client-libraries/rust/request-ai/set","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/set.md","tags":[],"version":"current","frontMatter":{"title":"Set"},"sidebar":"docsSidebar","previous":{"title":"Create Store","permalink":"/docs/client-libraries/rust/request-ai/create-store"},"next":{"title":"Get Sim N","permalink":"/docs/client-libraries/rust/request-ai/get-simn"}}');var s=t(74848),i=t(28453);const a={title:"Set"},o="Set",l={},c=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,s.jsxs)(n.p,{children:["Inserts or updates embeddings and their associated metadata into a vector store managed by the ",(0,s.jsx)(n.strong,{children:"AI service"}),". This operation is central to populating a store with new data or refreshing existing entries to keep the dataset consistent and relevant for similarity search."]}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_client_rs::error::AhnlichError;\nuse ahnlich_types::ai::preprocess::PreprocessAction;\nuse ahnlich_types::ai::query::Set;\nuse ahnlich_types::keyval::{AiStoreEntry, StoreInput, StoreValue};\nuse ahnlich_types::keyval::store_input::Value;\nuse std::collections::HashMap;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    // Connect to AI server\n    let addr = "127.0.0.1:1370";\n    let client = AiClient::new(addr.to_string()).await?;\n\n\n    // Prepare data for Set\n    let set_params = Set {\n        store: "Main0".to_string(),\n        execution_provider: None,\n        preprocess_action: PreprocessAction::NoPreprocessing as i32,\n        inputs: vec![\n            AiStoreEntry {\n                key: Some(StoreInput { value: Some(Value::RawString("Adidas Yeezy".into())) }),\n                value: Some(StoreValue { value: HashMap::new() }),\n            },\n            AiStoreEntry {\n                key: Some(StoreInput { value: Some(Value::RawString("Nike Air Jordans".into())) }),\n                value: Some(StoreValue { value: HashMap::new() }),\n            },\n        ],\n    };\n\n\n    // Run the set command\n    let res = client.set(set_params, None).await?;\n    println!("Inserted entries: {:?}", res.upsert);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"params: Set"})," \u2014 The embeddings and metadata to be stored, including the store key and value. If a key already exists, this call updates the associated record."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Ok(SetResult)"})," \u2014 Contains the outcome of the insertion or update (e.g., confirmation of success, affected keys)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 If the operation fails due to invalid input, conflicts, or server-side errors."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Prepares the ",(0,s.jsx)(n.code,{children:"Set"})," request payload inside a ",(0,s.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Adds tracing context if provided."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Sends the request via the AI client\u2019s ",(0,s.jsx)(n.code,{children:"set"})," RPC method."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Waits for the response and extracts the typed result."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)(n.code,{children:"SetResult"})," indicating success or failure."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);