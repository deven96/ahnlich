"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[8072],{3846:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"client-libraries/rust/request-ai/create-predicate-index","title":"Create Predicate Index","description":"Creates a predicate index in the AI service to optimize filtered embedding queries. Speeds up retrieval of embeddings based on metadata constraints, improving the performance of get_pred operations.","source":"@site/docs/client-libraries/rust/request-ai/create-predicate-index.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/create-predicate-index","permalink":"/docs/client-libraries/rust/request-ai/create-predicate-index","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/create-predicate-index.md","tags":[],"version":"current","frontMatter":{"title":"Create Predicate Index"},"sidebar":"docsSidebar","previous":{"title":"Get By Predicate","permalink":"/docs/client-libraries/rust/request-ai/get-by-predicate"},"next":{"title":"Drop Predicate Index","permalink":"/docs/client-libraries/rust/request-ai/drop-predicate-index"}}');var t=r(74848),s=r(28453);const a={title:"Create Predicate Index"},d="Create Predicate Index",c={},l=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"create-predicate-index",children:"Create Predicate Index"})}),"\n",(0,t.jsxs)(n.p,{children:["Creates a predicate index in the AI service to optimize filtered embedding queries. Speeds up retrieval of embeddings based on metadata constraints, improving the performance of ",(0,t.jsx)(n.code,{children:"get_pred"})," operations."]}),"\n",(0,t.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Click to expand"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_client_rs::error::AhnlichError;\nuse ahnlich_types::ai::query::CreatePredIndex;\nuse ahnlich_types::ai::server::CreateIndex;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    // Connect to the AI service\n    let ai_client = AiClient::new("http://127.0.0.1:1370".to_string())\n        .await\n        .expect("Failed to connect AI client");\n\n\n    // Define which store and which predicates to index\n    let params = CreatePredIndex {\n        store: "Deven Kicks".to_string(),\n        predicates: vec!["Brand".to_string(), "Vintage".to_string()],\n    };\n\n\n    // Call the API\n    let response: CreateIndex = ai_client.create_pred_index(params, None).await?;\n\n\n    println!(" Created predicate indexes: {:?}", response);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"params: CreatePredIndex"})," \u2014 Specifies the store and the metadata fields to index for predicate-based queries."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent ID for observability and distributed tracing."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Ok(CreateIndex)"})," \u2014 Confirmation that the predicate index was successfully created, along with index details."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if index creation fails due to invalid parameters, store issues, or server errors."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Wraps the ",(0,t.jsx)(n.code,{children:"CreatePredIndex"})," input in a ",(0,t.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Adds optional tracing metadata."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Calls the AI/DB service\u2019s ",(0,t.jsx)(n.code,{children:"create_pred_index"})," RPC endpoint."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Waits for the response and extracts the index creation result."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Returns the newly created index information."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var i=r(96540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);