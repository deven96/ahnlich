"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[3106],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(96540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},28526:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"client-libraries/rust/request-ai/create-non-linear-algx","title":"Create Non-Linear Algorithm Index","description":"Creates a non-linear algorithm index on a vector store within the AI service to optimize similarity search performance. These indexes accelerate nearest-neighbor and semantic searches over large embedding datasets, making retrieval faster and more efficient.","source":"@site/docs/client-libraries/rust/request-ai/create-non-linear-algx.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/create-non-linear-algx","permalink":"/docs/client-libraries/rust/request-ai/create-non-linear-algx","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/create-non-linear-algx.md","tags":[],"version":"current","frontMatter":{"title":"Create Non-Linear Algorithm Index"},"sidebar":"docsSidebar","previous":{"title":"List Connected Clients","permalink":"/docs/client-libraries/rust/request-ai/list-connected-clients"},"next":{"title":"Drop Non-Linear Algorithm Index","permalink":"/docs/client-libraries/rust/request-ai/drop-non-linear-algx"}}');var t=r(74848),s=r(28453);const a={title:"Create Non-Linear Algorithm Index"},l="Create Non-Linear Algorithm Index",o={},c=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"create-non-linear-algorithm-index",children:"Create Non-Linear Algorithm Index"})}),"\n",(0,t.jsxs)(n.p,{children:["Creates a ",(0,t.jsx)(n.strong,{children:"non-linear algorithm index"})," on a vector store within the ",(0,t.jsx)(n.strong,{children:"AI service"})," to optimize similarity search performance. These indexes accelerate nearest-neighbor and semantic searches over large embedding datasets, making retrieval faster and more efficient."]}),"\n",(0,t.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Click to expand"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_types::ai::query::CreateNonLinearAlgorithmIndex;\nuse ahnlich_types::algorithm::nonlinear::NonLinearAlgorithm;\nuse tokio;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = AiClient::new("http://127.0.0.1:1370".to_string()).await?;\n\n\n    let params = CreateNonLinearAlgorithmIndex {\n        store: "MyStore".to_string(),\n        non_linear_indices: vec![NonLinearAlgorithm::KdTree as i32],\n    };\n\n\n    let result = client.create_non_linear_algorithm_index(params, None).await?;\n    println!("Created non-linear indices: {:?}", result);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"params: CreateNonLinearAlgorithmIndex"})," \u2014 Specifies the target store and algorithm parameters for building the non-linear index."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Ok(CreateIndex)"})," \u2014 Confirmation that the non-linear algorithm index was successfully created, including index details."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if index creation fails due to invalid parameters, store issues, or server errors."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Wraps the ",(0,t.jsx)(n.code,{children:"CreateNonLinearAlgorithmIndex"})," input in a ",(0,t.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Attaches tracing metadata if provided."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Calls the AI service\u2019s ",(0,t.jsx)(n.code,{children:"create_non_linear_algorithm_index"})," RPC endpoint."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Awaits the response and extracts the result."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"CreateIndex"})," object with details of the created index."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);