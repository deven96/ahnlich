"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[8464],{28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var t=i(96540);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}},36092:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"client-libraries/python/request-ai/ping","title":"Ping","description":"The Ping request verifies connectivity with the AI Service.","source":"@site/docs/client-libraries/python/request-ai/ping.md","sourceDirName":"client-libraries/python/request-ai","slug":"/client-libraries/python/request-ai/ping","permalink":"/docs/client-libraries/python/request-ai/ping","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-ai/ping.md","tags":[],"version":"current","frontMatter":{"title":"Ping"},"sidebar":"docsSidebar","previous":{"title":"Request AI","permalink":"/docs/client-libraries/python/request-ai/"},"next":{"title":"Info Server","permalink":"/docs/client-libraries/python/request-ai/info-server"}}');var r=i(74848),s=i(28453);const c={title:"Ping"},o="Ping",l={},a=[];function h(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ping",children:"Ping"})}),"\n",(0,r.jsx)(n.p,{children:"The Ping request verifies connectivity with the AI Service.\nIt works just like the DB Ping, but instead communicates with the AI server (running on port 1370 by default)."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Input"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No additional fields are required."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Behavior"}),": Sends a lightweight request to check if the AI Service is responsive."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Returns a ",(0,r.jsx)(n.code,{children:"Pong"})," message if the AI service is alive."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Click to expand source code"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.ai_service import AiServiceStub\nfrom ahnlich_client_py.grpc.ai import query as ai_query\n\n\nasync def ping():\n  async with Channel(host="127.0.0.1", port=1370) as channel:\n      client = AiServiceStub(channel)\n      response = await client.ping(ai_query.Ping())\n  print(response) #Pong()\n\n\nif __name__ == "__main__":\n  asyncio.run(ping())\n'})})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);