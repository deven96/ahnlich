"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[9037],{27183:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"client-libraries/rust/request-ai/delete-key","title":"Delete Key","description":"Deletes a specific embedding and its associated metadata from a vector store in the AI service. This operation is useful for removing obsolete or incorrect embeddings, ensuring that similarity searches and AI queries return only relevant results.","source":"@site/docs/client-libraries/rust/request-ai/delete-key.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/delete-key","permalink":"/docs/client-libraries/rust/request-ai/delete-key","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/delete-key.md","tags":[],"version":"current","frontMatter":{"title":"Delete Key"},"sidebar":"docsSidebar","previous":{"title":"Drop Predicate Index","permalink":"/docs/client-libraries/rust/request-ai/drop-predicate-index"},"next":{"title":"Drop Store","permalink":"/docs/client-libraries/rust/request-ai/drop-store"}}');var i=t(74848),s=t(28453);const l={title:"Delete Key"},a="Delete Key",c={},o=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"delete-key",children:"Delete Key"})}),"\n",(0,i.jsxs)(n.p,{children:["Deletes a specific embedding and its associated metadata from a vector store in the ",(0,i.jsx)(n.strong,{children:"AI service"}),". This operation is useful for removing obsolete or incorrect embeddings, ensuring that similarity searches and AI queries return only relevant results."]}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_client_rs::error::AhnlichError;\nuse ahnlich_types::ai::query::DelKey;\nuse ahnlich_types::ai::server::Del;\nuse ahnlich_types::keyval::StoreInput;\nuse ahnlich_types::keyval::store_input::Value;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    // Connect to server\n    let ai_client = AiClient::new("http://127.0.0.1:1370".to_string())\n        .await\n        .expect(" Failed to connect AI client");\n\n\n    // Define key to delete\n    let params = DelKey {\n        store: "Deven Kicks".to_string(),\n        keys: vec![StoreInput {\n            value: Some(Value::RawString("Nike Air Jordans".to_string())),\n        }],\n    };\n\n\n    // Call delete\n    let response: Del = ai_client.del_key(params, None).await?;\n    println!(" Deleted key result: {:?}", response);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"params: DelKey"})," \u2014 Specifies the store and the unique key of the embedding to remove."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent ID for observability and distributed tracing."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Ok(Del)"})," \u2014 Confirmation that the embedding and metadata were successfully deleted."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if the key does not exist, the store is unavailable, or the deletion fails."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Wraps the ",(0,i.jsx)(n.code,{children:"DelKey"})," parameters in a ",(0,i.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Attaches tracing metadata if provided."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Sends the deletion request to the AI service via RPC."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Awaits the response and extracts the result."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Returns a ",(0,i.jsx)(n.code,{children:"Del"})," object indicating successful deletion."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);