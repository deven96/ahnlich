"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[9834],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var r=t(96540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}},95422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"client-libraries/go/request-ai/get-simn","title":"GetSimN","description":"Description","source":"@site/docs/client-libraries/go/request-ai/get-simn.md","sourceDirName":"client-libraries/go/request-ai","slug":"/client-libraries/go/request-ai/get-simn","permalink":"/docs/client-libraries/go/request-ai/get-simn","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/request-ai/get-simn.md","tags":[],"version":"current","frontMatter":{"title":"GetSimN"},"sidebar":"docsSidebar","previous":{"title":"Set","permalink":"/docs/client-libraries/go/request-ai/set"},"next":{"title":"Get by Predicate","permalink":"/docs/client-libraries/go/request-ai/get-by-predicate"}}');var i=t(74848),s=t(28453);const l={title:"GetSimN"},c="GetSimN",a={},o=[{value:"Description",id:"description",level:2},{value:"Source Code Example",id:"source-code-example",level:2},{value:"Behavior",id:"behavior",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"getsimn",children:"GetSimN"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GetSimN"})," request-ai performs a ",(0,i.jsx)(n.strong,{children:"nearest-neighbor search"})," using a ",(0,i.jsx)(n.strong,{children:"raw query input"}),". The AI proxy embeds the raw query with the store\u2019s configured ",(0,i.jsx)(n.strong,{children:"QueryModel"}),", sends the similarity search to the DB, and returns the top-N matches."]}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand source code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n  "context"\n  "fmt"\n  "log"\n  "time"\n\n\n  "google.golang.org/grpc"\n  "google.golang.org/grpc/credentials/insecure"\n\n\n  aiquery "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/ai/query"\n  aisvc "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/services/ai_service"\n  keyval "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/keyval"\n  metadata "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/metadata"\n)\n\n\nconst AIAddr = "127.0.0.1:1370"\n\n\ntype ExampleAIClient struct {\n  conn   *grpc.ClientConn\n  client aisvc.AIServiceClient\n  ctx    context.Context\n}\n\n\nfunc NewAIClient(ctx context.Context) (*ExampleAIClient, error) {\n  conn, err := grpc.DialContext(ctx, AIAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n  if err != nil {\n      return nil, fmt.Errorf("failed to dial AI server %q: %w", AIAddr, err)\n  }\n  client := aisvc.NewAIServiceClient(conn)\n  return &ExampleAIClient{conn: conn, client: client, ctx: ctx}, nil\n}\n\n\nfunc (c *ExampleAIClient) Close() error {\n  return c.conn.Close()\n}\n\n\n// Helper to unwrap Key (StoreInput)\nfunc unwrapKey(k *keyval.StoreInput) string {\n  if k == nil {\n      return "<nil>"\n  }\n  switch v := k.Value.(type) {\n  case *keyval.StoreInput_RawString:\n      return v.RawString\n  default:\n      return fmt.Sprintf("%v", v)\n  }\n}\n\n\n// Helper to unwrap Value (StoreValue)\nfunc unwrapValue(v *keyval.StoreValue) map[string]string {\n  result := make(map[string]string)\n  if v == nil {\n      return result\n  }\n  for k, val := range v.Value {\n      switch mv := val.Value.(type) {\n      case *metadata.MetadataValue_RawString:\n          result[k] = mv.RawString\n      default:\n          result[k] = fmt.Sprintf("%v", mv)\n      }\n  }\n  return result\n}\n\n\n// ---- GetSimN  ----\nfunc (c *ExampleAIClient) exampleGetSimNAI() error {\n  resp, err := c.client.GetSimN(c.ctx, &aiquery.GetSimN{\n      Store:       "ai_store01", // must already exist and have data\n      SearchInput: &keyval.StoreInput{Value: &keyval.StoreInput_RawString{RawString: "X"}},\n      ClosestN:    3,\n  })\n  if err != nil {\n      return err\n  }\n\n\n  fmt.Println(" AI GetSimN Response:")\n  for i, entry := range resp.Entries {\n      fmt.Printf("  #%d Key=%s  Value=%v\\n", i+1, unwrapKey(entry.Key), unwrapValue(entry.Value))\n  }\n  return nil\n}\n\n\nfunc main() {\n  ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n  defer cancel()\n\n\n  client, err := NewAIClient(ctx)\n  if err != nil {\n      log.Fatalf(" Failed to create AI client: %v", err)\n  }\n  defer client.Close()\n\n\n  if err := client.exampleGetSimNAI(); err != nil {\n      log.Fatalf(" GetSimN failed: %v", err)\n  }\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The AI proxy ",(0,i.jsx)(n.strong,{children:"embeds"})," the raw ",(0,i.jsx)(n.code,{children:"SearchInput"})," with the store\u2019s ",(0,i.jsx)(n.strong,{children:"QueryModel"})," and forwards the search to the DB."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The response contains up to ",(0,i.jsx)(n.code,{children:"ClosestN"})," matching entries (",(0,i.jsx)(n.code,{children:"resp.Entries"}),") from the store (entries include stored vectors\u2019 associated data/metadata)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Results depend on what has been previously ingested (e.g., via AI ",(0,i.jsx)(n.code,{children:"Set"})," or direct DB ingestion)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"If no neighbors are found, the call succeeds with an empty result set; failures return a non-nil error."}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);