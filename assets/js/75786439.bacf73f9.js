"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[612],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var i=n(96540);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}},78785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"client-libraries/rust/request-ai/get-by-predicate","title":"Get By Predicate","description":"Retrieves records from a vector store that satisfy a given predicate filter. Supports filtered semantic queries where embeddings must meet metadata-based conditions in addition to similarity searches.","source":"@site/docs/client-libraries/rust/request-ai/get-by-predicate.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/get-by-predicate","permalink":"/docs/client-libraries/rust/request-ai/get-by-predicate","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/get-by-predicate.md","tags":[],"version":"current","frontMatter":{"title":"Get By Predicate"},"sidebar":"docsSidebar","previous":{"title":"Get Key","permalink":"/docs/client-libraries/rust/request-ai/get-key"},"next":{"title":"Create Predicate Index","permalink":"/docs/client-libraries/rust/request-ai/create-predicate-index"}}');var r=n(74848),a=n(28453);const s={title:"Get By Predicate"},d="Get By Predicate",c={},l=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"get-by-predicate",children:"Get By Predicate"})}),"\n",(0,r.jsx)(t.p,{children:"Retrieves records from a vector store that satisfy a given predicate filter. Supports filtered semantic queries where embeddings must meet metadata-based conditions in addition to similarity searches."}),"\n",(0,r.jsx)(t.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Click to expand"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_client_rs::error::AhnlichError;\nuse ahnlich_client_rs::prelude::StoreName;\nuse ahnlich_types::{\n    ai::query::GetPred,\n    predicates::{Predicate, PredicateCondition, predicate::Kind as PredicateKind, predicate_condition::Kind as PredicateConditionKind, Equals},\n    metadata::{MetadataValue, metadata_value::Value as MValue},\n};\nuse tokio;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    // Connect to AI server\n    let ai_client = AiClient::new("http://127.0.0.1:1370".to_string())\n        .await\n        .expect("Failed to connect AI client");\n\n\n    // Define store and metadata condition\n    let store_name = StoreName { value: "Deven Kicks".to_string() };\n    let matching_metadatakey = "Brand".to_string();\n    let matching_metadatavalue = MetadataValue { value: Some(MValue::RawString("Nike".into())) };\n\n\n    // Build predicate condition\n    let condition = PredicateCondition {\n        kind: Some(PredicateConditionKind::Value(Predicate {\n            kind: Some(PredicateKind::Equals(Equals {\n                key: matching_metadatakey.clone(),\n                value: Some(matching_metadatavalue.clone()),\n            })),\n        })),\n    };\n\n\n    let get_pred_params = GetPred {\n        store: store_name.value.clone(),\n        condition: Some(condition),\n    };\n\n\n    // Call get_pred\n    let response = ai_client.get_pred(get_pred_params, None).await?;\n\n\n    println!("Matching entries:");\n    for entry in response.entries {\n        println!("{:?}", entry);\n    }\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"params: GetPred"})," \u2014 Contains the store name and predicate expression used to filter records."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent ID for distributed tracing and observability."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Ok(Get)"})," \u2014 A collection of records (embeddings + metadata) that satisfy the predicate filter."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Err(AhnlichError)"})," \u2014 Returned if the store cannot be queried, the predicate is invalid, or the request fails."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Constructs a ",(0,r.jsx)(t.code,{children:"tonic::Request"})," from the ",(0,r.jsx)(t.code,{children:"GetPred"})," parameters."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Attaches tracing metadata when provided."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Calls the AI service\u2019s ",(0,r.jsx)(t.code,{children:"get_pred"})," RPC endpoint."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Waits for the server response and extracts the result."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Returns the retrieved records packaged in a ",(0,r.jsx)(t.code,{children:"Get"})," object."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);