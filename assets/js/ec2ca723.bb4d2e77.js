"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[6583],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var r=t(96540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}},77557:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"client-libraries/rust/request-db/get-key","title":"Get Key","description":"Retrieve a single stored vector (and its associated metadata) by key from a specified store. Use this request to fetch the exact item you previously inserted with Set or to validate the contents of a given key.","source":"@site/docs/client-libraries/rust/request-db/get-key.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/get-key","permalink":"/docs/client-libraries/rust/request-db/get-key","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/get-key.md","tags":[],"version":"current","frontMatter":{"title":"Get Key"},"sidebar":"docsSidebar","previous":{"title":"Get Sim N","permalink":"/docs/client-libraries/rust/request-db/get-simn"},"next":{"title":"Get By Predicate","permalink":"/docs/client-libraries/rust/request-db/get-by-predicate"}}');var i=t(74848),s=t(28453);const l={title:"Get Key"},o="Get Key",d={},a=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"get-key",children:"Get Key"})}),"\n",(0,i.jsxs)(n.p,{children:["Retrieve a single stored vector (and its associated metadata) by key from a specified store. Use this request to fetch the exact item you previously inserted with ",(0,i.jsx)(n.code,{children:"Set"})," or to validate the contents of a given key."]}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\nuse ahnlich_types::{\n    db::query::GetKey,\n    keyval::StoreKey,\n};\nuse tokio;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // point to your DB server (default is 1369, adjust if needed)\n    let addr = "http://127.0.0.1:1369";\n    let client = DbClient::new(addr.to_string()).await?;\n\n\n    // example: look up a key from store "Main"\n    let get_key_params = GetKey {\n        store: "Main".to_string(),\n        keys: vec![\n            StoreKey {\n                key: vec![1.2, 1.3, 1.4], // must match a previously Set key\n            },\n        ],\n    };\n\n\n    match client.get_key(get_key_params, None).await {\n        Ok(result) => {\n            println!("Fetched: {:#?}", result);\n        }\n        Err(e) => {\n            eprintln!("Error fetching key: {:?}", e);\n        }\n    }\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"params: GetKey"})," \u2014 Request payload identifying the target store and key. Depending on your server proto, this typically includes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"store"})," (required) \u2014 The store name to query."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"key"})," (required) \u2014 The unique identifier for the vector to retrieve."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Optional flags (server-dependent) to control returned fields (for example, whether the raw vector or metadata should be included)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent to propagate observability context. When provided, ",(0,i.jsx)(n.code,{children:"add_trace_parent"})," attaches tracing metadata to the outgoing gRPC request."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Ok(Get)"})," \u2014 A ",(0,i.jsx)(n.code,{children:"Get"})," response containing the requested payload. This commonly includes the vector data, any stored metadata, and the key. The exact fields are defined by the crate\u2019s Get type and server proto."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Failure to fetch the key. Typical error cases:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Target store not found."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Key not found (missing)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Permission or authentication failures."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Transport-level errors (connection, timeout)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Any server-side validation or internal error."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Read-only RPC with no side effects on server state."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The request is synchronous in the sense that it returns the current stored value at the time of the call."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Tracing metadata (if provided) is propagated for observability and debugging."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The code returns the inner response (",(0,i.jsx)(n.code,{children:"into_inner()"}),"), delivering the ",(0,i.jsx)(n.code,{children:"Get"})," payload directly to the caller."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);