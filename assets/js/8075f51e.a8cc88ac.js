"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[1342],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var r=i(96540);const s={},t=r.createContext(s);function d(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(t.Provider,{value:n},e.children)}},50196:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"components/ahnlich-cli/ai-commands","title":"AI Commands","description":"The Ahnlich CLI supports AI-powered vector stores that enable semantic search, similarity matching, and predicate-based queries. This allows developers to insert embeddings (from text, images, or other binary inputs), query them with different similarity algorithms, and manage AI stores just like databases.","source":"@site/docs/components/ahnlich-cli/ai-commands.md","sourceDirName":"components/ahnlich-cli","slug":"/components/ahnlich-cli/ai-commands","permalink":"/docs/components/ahnlich-cli/ai-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/components/ahnlich-cli/ai-commands.md","tags":[],"version":"current","frontMatter":{"title":"AI Commands"},"sidebar":"docsSidebar","previous":{"title":"DB Commands","permalink":"/docs/components/ahnlich-cli/db-commands"},"next":{"title":"\ud83d\uddc4\ufe0f Ahnlich DB","permalink":"/docs/components/ahnlich-db/"}}');var s=i(74848),t=i(28453);const d={title:"AI Commands"},l="Ahnlich CLI \u2013 AI Commands",a={},o=[{value:"Example Workflow",id:"example-workflow",level:2},{value:"AI CLI Commands",id:"ai-cli-commands",level:2},{value:"1. Ping the AI server",id:"1-ping-the-ai-server",level:3},{value:"2. Get AI server information",id:"2-get-ai-server-information",level:3},{value:"3. List all AI stores",id:"3-list-all-ai-stores",level:3},{value:"4. Create a Store for AI",id:"4-create-a-store-for-ai",level:3},{value:"5. Insert AI Data",id:"5-insert-ai-data",level:3},{value:"6. Drop a Store",id:"6-drop-a-store",level:3},{value:"7. Query AI Data by Similarity",id:"7-query-ai-data-by-similarity",level:3},{value:"8. Query AI Data by Predicate",id:"8-query-ai-data-by-predicate",level:3},{value:"9. Create Predicate Index",id:"9-create-predicate-index",level:3},{value:"10. Drop Predicate Index",id:"10-drop-predicate-index",level:3},{value:"11. Create Non-Linear Algorithm Index",id:"11-create-non-linear-algorithm-index",level:3},{value:"12. Drop Non-Linear Algorithm Index",id:"12-drop-non-linear-algorithm-index",level:3},{value:"13. Delete a Key",id:"13-delete-a-key",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ahnlich-cli--ai-commands",children:"Ahnlich CLI \u2013 AI Commands"})}),"\n",(0,s.jsxs)(n.p,{children:["The Ahnlich CLI supports ",(0,s.jsx)(n.strong,{children:"AI-powered vector stores"})," that enable semantic search, similarity matching, and predicate-based queries. This allows developers to insert embeddings (from text, images, or other binary inputs), query them with different similarity algorithms, and manage AI stores just like databases."]}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"AI Store"})," is a specialized store that maintains:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Query Model"})," \u2013 model used to process incoming query inputs (e.g., ",(0,s.jsx)(n.code,{children:"resnet-50"}),", ",(0,s.jsx)(n.code,{children:"all-MiniLM-L6-v2"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Index Model"})," \u2013 model used to generate embeddings for inserted data."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Predicates"})," \u2013 metadata fields associated with each input (e.g., ",(0,s.jsx)(n.code,{children:"author"}),", ",(0,s.jsx)(n.code,{children:"category"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Non-Linear Algorithm Index"})," \u2013 optional advanced indexing (e.g., ",(0,s.jsx)(n.code,{children:"kdtree"}),") to accelerate nearest-neighbor search."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"With AI Stores, you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Insert text, image, or binary inputs with metadata."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Run similarity searches (",(0,s.jsx)(n.code,{children:"cosinesimilarity"}),", ",(0,s.jsx)(n.code,{children:"l2"}),", etc.)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Filter results by predicates."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create and manage indexes for faster queries."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Delete stores or individual keys when no longer needed."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Create an AI Store"})," with models and metadata fields."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Insert AI Data"})," (text or image embeddings + metadata)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Query AI Data"})," using similarity search."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Refine queries"})," with predicates and indexes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Manage lifecycle"})," of stores, indexes, and entries."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ai-cli-commands",children:"AI CLI Commands"}),"\n",(0,s.jsx)(n.p,{children:"Below are the most common commands you can run against your AI store:"}),"\n",(0,s.jsx)(n.h3,{id:"1-ping-the-ai-server",children:"1. Ping the AI server"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"PING"})}),"\n",(0,s.jsx)(n.p,{children:"Checks if the AI server is alive and responding."}),"\n",(0,s.jsx)(n.h3,{id:"2-get-ai-server-information",children:"2. Get AI server information"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"INFOSERVER"})}),"\n",(0,s.jsx)(n.p,{children:"Returns server metadata, including version, address, type, and resource limits."}),"\n",(0,s.jsx)(n.h3,{id:"3-list-all-ai-stores",children:"3. List all AI stores"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"LISTSTORES"})}),"\n",(0,s.jsx)(n.p,{children:"Lists all stores currently available on the AI server."}),"\n",(0,s.jsx)(n.h3,{id:"4-create-a-store-for-ai",children:"4. Create a Store for AI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"CREATESTORE my_store QUERYMODEL resnet-50 INDEXMODEL resnet-50 PREDICATES (author, category) NONLINEARALGORITHMINDEX (kdtree) STOREORIGINAL\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Creates a new store ",(0,s.jsx)(n.code,{children:"my_store"})," with ",(0,s.jsx)(n.code,{children:"resnet-50"})," as both query and index models, supporting predicates ",(0,s.jsx)(n.code,{children:"author"})," and ",(0,s.jsx)(n.code,{children:"category"}),", and enables a KD-Tree index."]}),"\n",(0,s.jsx)(n.h3,{id:"5-insert-ai-data",children:"5. Insert AI Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"SET (([This is the life of Alice], {author: Alice, category: ml}),\n     ([This is the life of Bob], {author: Bob, category: dev})) IN my_store\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Inserts two text entries into ",(0,s.jsx)(n.code,{children:"my_store"})," with metadata tags."]}),"\n",(0,s.jsx)(n.h3,{id:"6-drop-a-store",children:"6. Drop a Store"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DROPSTORE my_store IF EXISTS\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Deletes the store ",(0,s.jsx)(n.code,{children:"my_store"})," if it exists."]}),"\n",(0,s.jsx)(n.h3,{id:"7-query-ai-data-by-similarity",children:"7. Query AI Data by Similarity"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"GETSIMN 4 WITH [This is the life of Alice] USING cosinesimilarity IN my_store WHERE (category = ml)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Finds the top 4 entries most similar to ",(0,s.jsx)(n.code,{children:'"This is the life of Alice"'})," within category ",(0,s.jsx)(n.code,{children:"ml"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"8-query-ai-data-by-predicate",children:"8. Query AI Data by Predicate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"GETPRED (author = Alice) IN my_store\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Retrieves all entries in ",(0,s.jsx)(n.code,{children:"my_store"})," where ",(0,s.jsx)(n.code,{children:"author = Alice"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"9-create-predicate-index",children:"9. Create Predicate Index"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"CREATEPREDINDEX (author, category) IN my_store\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Creates an index on the ",(0,s.jsx)(n.code,{children:"author"})," and ",(0,s.jsx)(n.code,{children:"category"})," predicates to speed up lookups."]}),"\n",(0,s.jsx)(n.h3,{id:"10-drop-predicate-index",children:"10. Drop Predicate Index"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DROPPREDINDEX (category) IN my_store\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Removes the index on the ",(0,s.jsx)(n.code,{children:"category"})," predicate."]}),"\n",(0,s.jsx)(n.h3,{id:"11-create-non-linear-algorithm-index",children:"11. Create Non-Linear Algorithm Index"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"CREATENONLINEARALGORITHMINDEX (kdtree) IN my_store\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a KD-Tree index for non-linear similarity search."}),"\n",(0,s.jsx)(n.h3,{id:"12-drop-non-linear-algorithm-index",children:"12. Drop Non-Linear Algorithm Index"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DROPNONLINEARALGORITHMINDEX (kdtree) IN my_store\n"})}),"\n",(0,s.jsx)(n.p,{children:"Drops the KD-Tree index from the store."}),"\n",(0,s.jsx)(n.h3,{id:"13-delete-a-key",children:"13. Delete a Key"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DELETEKEY ([This is the life of Alice]) IN my_store\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Deletes the entry ",(0,s.jsx)(n.code,{children:'"This is the life of Alice"'})," from ",(0,s.jsx)(n.code,{children:"my_store"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);