"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[8089],{28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var i=r(96540);const s={},t=i.createContext(s);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:n},e.children)}},46480:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"client-libraries/rust/request-db/ping","title":"Ping","description":"Checks connectivity with the Ahnlich service and verifies that the server can accept requests over the current gRPC channel. Useful for health checks, readiness probes, or establishing a baseline before issuing data operations.","source":"@site/docs/client-libraries/rust/request-db/ping.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/ping","permalink":"/docs/client-libraries/rust/request-db/ping","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/ping.md","tags":[],"version":"current","frontMatter":{"title":"Ping"},"sidebar":"docsSidebar","previous":{"title":"request-db","permalink":"/docs/client-libraries/rust/request-db/"},"next":{"title":"Info Server","permalink":"/docs/client-libraries/rust/request-db/info-server"}}');var s=r(74848),t=r(28453);const c={title:"Ping"},l="Ping",o={},a=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ping",children:"Ping"})}),"\n",(0,s.jsx)(n.p,{children:"Checks connectivity with the Ahnlich service and verifies that the server can accept requests over the current gRPC channel. Useful for health checks, readiness probes, or establishing a baseline before issuing data operations."}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Connect to your running ahnlich-db instance\n    let db_client = DbClient::new("127.0.0.1:1369".to_string()).await?;\n\n\n    // Optional tracing ID (can be None if you don\u2019t use tracing)\n    let tracing_id: Option<String> = None;\n\n\n    // Call ping and print the response\n    let res = db_client.ping(tracing_id).await?;\n    println!("Ping response: {:?}", res);\n\n\n    Ok(())\n}\n\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2013 Optional tracing context to propagate to the server."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Pass ",(0,s.jsx)(n.code,{children:"Some(String)"})," to enable distributed tracing for this call."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Pass ",(0,s.jsx)(n.code,{children:"None"})," to omit tracing metadata."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Ok(Pong)"})," \u2013 A server \u201cpong\u201d response indicating the service is reachable."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2013 The request could not be completed (e.g., transport error, server error)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Executes a lightweight RPC with no side effects."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Safe to call at startup, during liveness/readiness checks, or before building pipelines."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Works identically on both ",(0,s.jsx)(n.strong,{children:"DB"})," and ",(0,s.jsx)(n.strong,{children:"AI"})," clients."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);