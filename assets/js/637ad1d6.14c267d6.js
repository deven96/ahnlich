"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[1493],{28453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>o});var n=t(96540);const i={},s=n.createContext(i);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:r},e.children)}},82799:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"client-libraries/rust/request-ai/create-store","title":"Create Store","description":"Creates a new vector store within the AI service. A store acts as a container for embeddings and metadata, enabling structured organization of data for similarity search and retrieval tasks. This is typically the first step before inserting embeddings or performing queries against a specific dataset.","source":"@site/docs/client-libraries/rust/request-ai/create-store.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/create-store","permalink":"/docs/client-libraries/rust/request-ai/create-store","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/create-store.md","tags":[],"version":"current","frontMatter":{"title":"Create Store"},"sidebar":"docsSidebar","previous":{"title":"List Store","permalink":"/docs/client-libraries/rust/request-ai/list-stores"},"next":{"title":"Set","permalink":"/docs/client-libraries/rust/request-ai/set"}}');var i=t(74848),s=t(28453);const a={title:"Create Store"},o="Create Store",c={},l=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"create-store",children:"Create Store"})}),"\n",(0,i.jsx)(r.p,{children:"Creates a new vector store within the AI service. A store acts as a container for embeddings and metadata, enabling structured organization of data for similarity search and retrieval tasks. This is typically the first step before inserting embeddings or performing queries against a specific dataset."}),"\n",(0,i.jsx)(r.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand"}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-rust",children:'use ahnlich_types::ai::query::{CreateStore, DropStore};\nuse ahnlich_client_rs::ai::AiClient;\nuse ahnlich_types::ai::models::AiModel;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = AiClient::new("http://127.0.0.1:1370".to_string()).await?;\n\n\n    // Create store first\n    let create_params = CreateStore {\n        store: "Deven Kicks".to_string(),\n        index_model: AiModel::AllMiniLmL6V2 as i32,\n        query_model: AiModel::AllMiniLmL6V2 as i32,\n        predicates: vec![],\n        non_linear_indices: vec![],\n        error_if_exists: false,\n        store_original: true,\n    };\n    client.create_store(create_params, None).await?;\n\n\n    // Now drop it\n    let drop_params = DropStore {\n        store: "MyStore".to_string(),\n        error_if_not_exists: true,\n    };\n\n\n    let result = client.drop_store(drop_params, None).await?;\n\n\n    println!("Deleted count: {}", result.deleted_count);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,i.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"params: CreateStore"})," \u2014 Input parameters defining the new store (e.g., store name, configuration options)."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent for distributed tracing, included in the request if provided."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"Ok(Unit)"})," \u2014 A confirmation response indicating that the store was successfully created."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"Err(AhnlichError)"})," \u2014 If creation fails due to invalid parameters, a name conflict, or service errors."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Wraps the ",(0,i.jsx)(r.code,{children:"CreateStore"})," parameters in a ",(0,i.jsx)(r.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:"Attaches the tracing ID if provided for observability."}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Invokes the ",(0,i.jsx)(r.code,{children:"create_store"})," RPC on the AI client."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:"Awaits the server\u2019s response and extracts the result."}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Returns ",(0,i.jsx)(r.code,{children:"Unit"})," to signal successful completion."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);