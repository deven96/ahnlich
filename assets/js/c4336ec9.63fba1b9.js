"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[5171],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},82425:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"client-libraries/rust/request-ai/purge-stores","title":"Purge Stores","description":"Deletes all vector stores managed by the AI client, including all embeddings and associated metadata. This is a destructive operation that resets the AI service state, typically used during testing, cleanup, or when starting fresh with new datasets.","source":"@site/docs/client-libraries/rust/request-ai/purge-stores.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/purge-stores","permalink":"/docs/client-libraries/rust/request-ai/purge-stores","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/purge-stores.md","tags":[],"version":"current","frontMatter":{"title":"Purge Stores"},"sidebar":"docsSidebar","previous":{"title":"New","permalink":"/docs/client-libraries/rust/request-ai/new"},"next":{"title":"Pipeline","permalink":"/docs/client-libraries/rust/pipeline"}}');var s=t(74848),r=t(28453);const l={title:"Purge Stores"},a="Purge Stores",o={},c=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"purge-stores",children:"Purge Stores"})}),"\n",(0,s.jsxs)(n.p,{children:["Deletes ",(0,s.jsx)(n.strong,{children:"all vector stores"})," managed by the ",(0,s.jsx)(n.strong,{children:"AI client"}),", including all embeddings and associated metadata. This is a destructive operation that resets the AI service state, typically used during testing, cleanup, or when starting fresh with new datasets."]}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::{AiClient, AiPipeline};\nuse ahnlich_types::ai::models::AiModel;\nuse ahnlich_types::ai::query::CreateStore;\nuse ahnlich_types::ai::pipeline::AiResponsePipeline;\nuse tokio::time::Duration;\n\n\n#[tokio::main]\nasync fn main() {\n    // Initialize AI client (replace with your server address)\n    let ai_client = AiClient::new("http://127.0.0.1:1370".to_string())\n        .await\n        .expect("Could not connect to AI client");\n\n\n    // Create a new pipeline\n    let mut pipeline = ai_client.pipeline(None);\n\n\n    // Example: create a test store\n    let store = CreateStore {\n        store: "TestStore".to_string(),\n        index_model: AiModel::AllMiniLmL6V2 as i32,\n        query_model: AiModel::AllMiniLmL6V2 as i32,\n        predicates: vec![],\n        non_linear_indices: vec![],\n        error_if_exists: true,\n        store_original: true,\n    };\n\n\n    pipeline.create_store(store);\n\n\n    // You can add more pipeline actions here\n    // Example: purge all stores\n    pipeline.purge_stores();\n\n\n    // Execute pipeline\n    let res: AiResponsePipeline = pipeline.exec().await.expect("Pipeline execution failed");\n\n\n    println!("Pipeline result: {res:#?}");\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Ok(Del)"})," \u2014 Confirmation that all stores and their contents were successfully deleted."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if the operation fails due to service errors or connectivity issues."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Wraps an empty ",(0,s.jsx)(n.code,{children:"PurgeStores {}"})," request in a ",(0,s.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attaches optional tracing metadata."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Sends the request to the AI service via RPC."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Awaits the server response and extracts the result."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)(n.code,{children:"Del"})," object indicating successful deletion of all stores."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);