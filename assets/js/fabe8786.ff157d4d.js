"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[2626],{28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>a});var i=r(96540);const t={},s=i.createContext(t);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:n},e.children)}},94657:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"client-libraries/rust/request-ai/drop-predicate-index","title":"Drop Predicate Index","description":"Removes a predicate index used by the AI service to optimize filtered embedding queries. This operation is useful when certain metadata-based filters are no longer needed for semantic search, or when the index must be rebuilt due to changes in input fields.","source":"@site/docs/client-libraries/rust/request-ai/drop-predicate-index.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/drop-predicate-index","permalink":"/docs/client-libraries/rust/request-ai/drop-predicate-index","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/drop-predicate-index.md","tags":[],"version":"current","frontMatter":{"title":"Drop Predicate Index"},"sidebar":"docsSidebar","previous":{"title":"Create Predicate Index","permalink":"/docs/client-libraries/rust/request-ai/create-predicate-index"},"next":{"title":"Delete Key","permalink":"/docs/client-libraries/rust/request-ai/delete-key"}}');var t=r(74848),s=r(28453);const d={title:"Drop Predicate Index"},a="Drop Predicate Index",c={},l=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"drop-predicate-index",children:"Drop Predicate Index"})}),"\n",(0,t.jsxs)(n.p,{children:["Removes a ",(0,t.jsx)(n.strong,{children:"predicate index"})," used by the AI service to optimize filtered embedding queries. This operation is useful when certain metadata-based filters are no longer needed for semantic search, or when the index must be rebuilt due to changes in input fields."]}),"\n",(0,t.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Click to expand"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient;\nuse ahnlich_client_rs::error::AhnlichError;\nuse ahnlich_types::ai::query::DropPredIndex;\nuse ahnlich_types::ai::server::Del;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    // Connect to the AI service\n    let ai_client = AiClient::new("http://127.0.0.1:1370".to_string())\n        .await\n        .expect("Failed to connect AI client");\n\n\n    // Define which store and which predicate index to drop\n    let params = DropPredIndex {\n        store: "Deven Kicks".to_string(),\n        predicates: vec!["Brand".to_string()],\n        error_if_not_exists: true, // \ud83d\udc48 required field, prevents silent no-op\n    };\n\n\n    // Call the API\n    let response: Del = ai_client.drop_pred_index(params, None).await?;\n\n\n    println!(" Dropped predicate index result: {:?}", response);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"params: DropPredIndex"})," \u2014 Specifies the store and the predicate index to remove."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent ID for observability and distributed tracing."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Ok(Del)"})," \u2014 Confirmation that the predicate index was successfully removed."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 Returned if the index does not exist, the store is unavailable, or the request fails."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Wraps the ",(0,t.jsx)(n.code,{children:"DropPredIndex"})," parameters in a ",(0,t.jsx)(n.code,{children:"tonic::Request"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Attaches optional tracing metadata."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Sends the request to the AI service."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Awaits the response and extracts the result."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Returns a ",(0,t.jsx)(n.code,{children:"Del"})," object confirming the deletion."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);