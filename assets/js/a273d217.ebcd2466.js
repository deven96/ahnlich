"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[2250],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(96540);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}},36520:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"client-libraries/rust/request-db/create-non-linear-algx","title":"Create Non-Linear Algorithm Index","description":"Creates a non-linear algorithm index on a store to optimize vector similarity searches beyond basic linear methods. Non-linear indexes improve query performance and scalability when working with large vector datasets.","source":"@site/docs/client-libraries/rust/request-db/create-non-linear-algx.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/create-non-linear-algx","permalink":"/docs/client-libraries/rust/request-db/create-non-linear-algx","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/create-non-linear-algx.md","tags":[],"version":"current","frontMatter":{"title":"Create Non-Linear Algorithm Index"},"sidebar":"docsSidebar","previous":{"title":"List Connected Clients","permalink":"/docs/client-libraries/rust/request-db/list-connected-clients"},"next":{"title":"Drop Non-Linear Algorithm Index","permalink":"/docs/client-libraries/rust/request-db/drop-non-linear-algx"}}');var t=r(74848),a=r(28453);const s={title:"Create Non-Linear Algorithm Index"},o="Create Non-Linear Algorithm Index",l={},c=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"create-non-linear-algorithm-index",children:"Create Non-Linear Algorithm Index"})}),"\n",(0,t.jsx)(n.p,{children:"Creates a non-linear algorithm index on a store to optimize vector similarity searches beyond basic linear methods. Non-linear indexes improve query performance and scalability when working with large vector datasets."}),"\n",(0,t.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Click to expand"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::error::AhnlichError;\nuse ahnlich_types::{\n    db::query::CreateNonLinearAlgorithmIndex,\n    algorithm::nonlinear::NonLinearAlgorithm,\n    services::db_service::db_service_client::DbServiceClient,\n};\nuse tonic::transport::Channel;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    // Connect to your DB server\n    let client = DbServiceClient::<Channel>::connect("http://127.0.0.1:1369").await?;\n  \n    // Create a non-linear algorithm index on the "Main" store\n    let params = CreateNonLinearAlgorithmIndex {\n        store: "Main".to_string(),\n        non_linear_indices: vec![NonLinearAlgorithm::KdTree as i32],\n    };\n\n\n    let response = client\n        .clone()\n        .create_non_linear_algorithm_index(params)\n        .await?\n        .into_inner();\n\n\n    println!("Non-linear algorithm index created: {:?}", response);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"params: CreateNonLinearAlgorithmIndex"})," \u2014 Defines the target store and configuration for the non-linear index."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace context for observability."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"CreateIndex"})," \u2014 Confirmation and details of the newly created index."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"AhnlichError"})," \u2014 If the request fails due to invalid parameters or server errors."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Builds a request with the provided ",(0,t.jsx)(n.code,{children:"params"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Attaches optional tracing metadata for distributed tracing."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Sends the request to the DB service to create the index."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);