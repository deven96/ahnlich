"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[2164],{20018:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"client-libraries/rust/request-db/list-stores","title":"List Stores","description":"Returns the list of vector stores registered in the connected Ahnlich DB service. This request is typically used to discover available stores before performing store-scoped operations such as creating, dropping, or inserting vectors.","source":"@site/docs/client-libraries/rust/request-db/list-stores.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/list-stores","permalink":"/docs/client-libraries/rust/request-db/list-stores","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/list-stores.md","tags":[],"version":"current","frontMatter":{"title":"List Stores"},"sidebar":"docsSidebar","previous":{"title":"Info Server","permalink":"/docs/client-libraries/rust/request-db/info-server"},"next":{"title":"Create Store","permalink":"/docs/client-libraries/rust/request-db/create-store"}}');var s=t(74848),i=t(28453);const o={title:"List Stores"},l="List Stores",c={},a=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"list-stores",children:"List Stores"})}),"\n",(0,s.jsx)(r.p,{children:"Returns the list of vector stores registered in the connected Ahnlich DB service. This request is typically used to discover available stores before performing store-scoped operations such as creating, dropping, or inserting vectors."}),"\n",(0,s.jsx)(r.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Connect to your running ahnlich-db instance\n    let db_client = DbClient::new("127.0.0.1:1369".to_string()).await?;\n\n\n    let tracing_id: Option<String> = None;\n\n\n    // Call list_stores and print the result\n    let stores = db_client.list_stores(tracing_id).await?;\n    println!("Stores: {:?}", stores);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,s.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"tracing_id: Option<String>"})," \u2013 Optional tracing context propagated with the request."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Ok(StoreList)"})," \u2013 Contains metadata for each store available on the server."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Err(AhnlichError)"})," \u2013 Returned when the request cannot be completed (e.g., transport or server error)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"behavior",children:"Behavior"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Executes a read-only RPC with no side effects."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Responses are deterministic: the server returns all currently known stores."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"If no stores exist, the response will contain an empty list."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>l});var n=t(96540);const s={},i=n.createContext(s);function o(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);