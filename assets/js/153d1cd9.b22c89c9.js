"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[8129],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var i=n(96540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},46767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"client-libraries/python/request-ai/get-by-predicate","title":"Get by Predicate","description":"GetPred works similarly to Get_key, but instead of querying by a single key, it returns results that match the defined conditions. This allows filtering AI store entries by metadata values.","source":"@site/docs/client-libraries/python/request-ai/get-by-predicate.md","sourceDirName":"client-libraries/python/request-ai","slug":"/client-libraries/python/request-ai/get-by-predicate","permalink":"/docs/client-libraries/python/request-ai/get-by-predicate","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-ai/get-by-predicate.md","tags":[],"version":"current","frontMatter":{"title":"Get by Predicate"},"sidebar":"docsSidebar","previous":{"title":"GetSimN","permalink":"/docs/client-libraries/python/request-ai/get-simn"},"next":{"title":"Create Predicate Index","permalink":"/docs/client-libraries/python/request-ai/create-predicate-index"}}');var r=n(74848),s=n(28453);const a={title:"Get by Predicate"},c="Get by Predicate",o={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"get-by-predicate",children:"Get by Predicate"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"GetPred"})," works similarly to ",(0,r.jsx)(t.code,{children:"Get_key"}),", but instead of querying by a single key, it returns results that match the defined conditions. This allows filtering AI store entries by metadata values."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"store"})," \u2013 Name of the AI store to query."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"condition"})," \u2013 Predicate condition that defines which entries to return. This can include equality, range, or custom predicate logic."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The result contains a list of entries matching the predicate."}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Click to expand source code"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.ai_service import AiServiceStub\nfrom ahnlich_client_py.grpc.ai import query as ai_query\nfrom ahnlich_client_py.grpc import predicates, metadata\n\n\nasync def get_by_predicate():\n  async with Channel(host="127.0.0.1", port=1370) as channel:\n      client = AiServiceStub(channel)\n      condition = predicates.PredicateCondition(\n          value=predicates.Predicate(\n              equals=predicates.Equals(\n                  key="brand",\n                  value=metadata.MetadataValue(raw_string="Nike")\n              )\n          )\n      )\n      response = await client.get_pred(\n          ai_query.GetPred(\n              store="test store 1",\n              condition=condition\n          )\n      )\n      print(response) #Get(entries=[GetEntry(key=StoreInput(raw_string=\'Jordan One\'), value=StoreValue(value={\'brand\': MetadataValue(raw_string=\'Nike\')}))])\n\n\nif __name__ == "__main__":\n  asyncio.run(get_by_predicate())\n'})})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:['The predicate condition can be extended to other metadata fields beyond "',(0,r.jsx)(t.code,{children:"brand"}),'".']}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"This request is specifically designed for AI store queries."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);