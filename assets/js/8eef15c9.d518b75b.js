"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[2977],{28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var r=n(96540);const i={},s=r.createContext(i);function c(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:t},e.children)}},80040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"client-libraries/python/request-db/get-by-predicate","title":"Get by Predicate","description":"The GetPred request retrieves entries based on metadata conditions (predicates).","source":"@site/docs/client-libraries/python/request-db/get-by-predicate.md","sourceDirName":"client-libraries/python/request-db","slug":"/client-libraries/python/request-db/get-by-predicate","permalink":"/docs/client-libraries/python/request-db/get-by-predicate","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-db/get-by-predicate.md","tags":[],"version":"current","frontMatter":{"title":"Get by Predicate"},"sidebar":"docsSidebar","previous":{"title":"GetKey","permalink":"/docs/client-libraries/python/request-db/get-key"},"next":{"title":"Create Predicate Index","permalink":"/docs/client-libraries/python/request-db/create-predicate-index"}}');var i=n(74848),s=n(28453);const c={title:"Get by Predicate"},a="Get by Predicate",o={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"get-by-predicate",children:"Get by Predicate"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"GetPred"})," request retrieves entries based on ",(0,i.jsx)(t.strong,{children:"metadata conditions (predicates)"}),".\nInstead of matching vectors, it filters results using key/value metadata."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Input"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"store"}),": store name."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"condition"}),": a predicate condition, e.g. ",(0,i.jsx)(t.code,{children:"equals"}),", ",(0,i.jsx)(t.code,{children:"greater_than"}),", etc."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Behavior"}),": Evaluates the predicate against metadata fields and returns all entries that satisfy the condition."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Response"}),": List of matching entries."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"Click to expand source code"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.db_service import DbServiceStub\nfrom ahnlich_client_py.grpc.db import query as db_query\nfrom ahnlich_client_py.grpc import predicates, metadata\n\n\nasync def get_predicate():\n  async with Channel(host="127.0.0.1", port=1369) as channel:\n    client = DbServiceStub(channel)\n    \n    condition = predicates.PredicateCondition(\n      value=predicates.Predicate(\n        equals=predicates.Equals(\n          key="job",\n          value=metadata.MetadataValue(raw_string="sorcerer")\n        )\n      )\n    )\n    \n    response = await client.get_pred(\n      db_query.GetPred(\n        store="test store",\n        condition=condition\n      )\n    )\n    # response.entries contains matching items\n  print(response)\n\n  if __name__ == "__main__":\n    asyncio.run(get_predicate())\n'})})]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);