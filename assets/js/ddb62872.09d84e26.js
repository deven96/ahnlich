"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[8470],{28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var t=n(96540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}},90258:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"client-libraries/rust/request-db/create-store","title":"Create Store","description":"Creates a new vector store within the Ahnlich DB service. A store is the primary container for vectors and metadata, and all vector operations must be scoped to a specific store. This request is essential for initializing logical partitions of data before inserting or querying vectors.","source":"@site/docs/client-libraries/rust/request-db/create-store.md","sourceDirName":"client-libraries/rust/request-db","slug":"/client-libraries/rust/request-db/create-store","permalink":"/docs/client-libraries/rust/request-db/create-store","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-db/create-store.md","tags":[],"version":"current","frontMatter":{"title":"Create Store"},"sidebar":"docsSidebar","previous":{"title":"List Stores","permalink":"/docs/client-libraries/rust/request-db/list-stores"},"next":{"title":"Set","permalink":"/docs/client-libraries/rust/request-db/set"}}');var s=n(74848),i=n(28453);const o={title:"Create Store"},a="Create Store",c={},l=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Usage considerations",id:"usage-considerations",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"create-store",children:"Create Store"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new vector store within the Ahnlich DB service. A store is the primary container for vectors and metadata, and all vector operations must be scoped to a specific store. This request is essential for initializing logical partitions of data before inserting or querying vectors."}),"\n",(0,s.jsx)(r.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",children:'use ahnlich_client_rs::db::DbClient;\nuse ahnlich_types::db::query::CreateStore;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Connect to server\n    let db_client = DbClient::new("127.0.0.1:1369".to_string()).await?;\n\n\n    let tracing_id: Option<String> = None;\n\n\n    // Define parameters for store creation\n    let params = CreateStore {\n        store: "Main".to_string(),\n        dimension: 3,\n        create_predicates: vec!["role".to_string()],\n        non_linear_indices: vec![],\n        error_if_exists: true,\n    };\n\n\n    // Call create_store\n    match db_client.create_store(params, tracing_id).await {\n        Ok(res) => {\n            println!("Store created successfully: {:?}", res);\n        }\n        Err(err) => {\n            eprintln!("Error creating store: {:?}", err);\n        }\n    }\n\n\n    Ok(())\n}\n\n'})})]}),"\n",(0,s.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"params: CreateStore"})," \u2013 The configuration for the new store. This includes required fields such as the store name, vector dimensionality, and optional indexing options.."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Ok(Unit)"})," \u2013 Indicates that the store was successfully created."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Err(AhnlichError)"})," \u2013 Returned if the request fails. Common failure cases include:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"A store with the same name already exists."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Invalid configuration parameters (e.g., mismatched dimensions)."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Server-side or transport-level errors."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"behavior",children:"Behavior"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"This is a write operation and will allocate resources on the server."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Once created, the store immediately becomes available for other operations such as ",(0,s.jsx)(r.code,{children:"Set"}),", ",(0,s.jsx)(r.code,{children:"Get Sim N"}),", or predicate-based queries."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Tracing information, if provided, is propagated through the request for monitoring and debugging."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"usage-considerations",children:"Usage considerations"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Use ",(0,s.jsx)(r.code,{children:"List Stores"})," after creation to verify that the store has been registered successfully."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Stores are persistent until explicitly removed using ",(0,s.jsx)(r.code,{children:"Drop Store"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Proper planning of store dimensions and indexing strategy is recommended, as these cannot be trivially changed after creation."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);