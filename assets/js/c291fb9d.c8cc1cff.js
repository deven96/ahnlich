"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[6697],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var r=t(96540);const i={},s=r.createContext(i);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}},48252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"client-libraries/go/request-db/get-simn","title":"GetSimN","description":"Description","source":"@site/docs/client-libraries/go/request-db/get-simn.md","sourceDirName":"client-libraries/go/request-db","slug":"/client-libraries/go/request-db/get-simn","permalink":"/docs/client-libraries/go/request-db/get-simn","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/request-db/get-simn.md","tags":[],"version":"current","frontMatter":{"title":"GetSimN"},"sidebar":"docsSidebar","previous":{"title":"Set","permalink":"/docs/client-libraries/go/request-db/set"},"next":{"title":"GetKey","permalink":"/docs/client-libraries/go/request-db/get-key"}}');var i=t(74848),s=t(28453);const c={title:"GetSimN"},o="GetSimN",l={},a=[{value:"Description",id:"description",level:2},{value:"Source Code Example",id:"source-code-example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"getsimn",children:"GetSimN"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GetSimN"})," request performs a ",(0,i.jsx)(n.strong,{children:"similarity search"})," against a specific store. It retrieves the top-N closest vectors to a given input vector. This operation is essential for applications that depend on ",(0,i.jsx)(n.strong,{children:"nearest neighbor lookups"})," such as recommendation systems, semantic search, and clustering."]}),"\n",(0,i.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand source code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "time"\n\n\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/credentials/insecure"\n\n\n    dbsvc   "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/services/db_service"\n    dbquery "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/db/query"\n    keyval  "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/keyval"\n)\n\n\nconst ServerAddr = "127.0.0.1:1369"\n\n\n// ExampleDBClient holds the gRPC connection, client, and context.\ntype ExampleDBClient struct {\n    conn   *grpc.ClientConn\n    client dbsvc.DBServiceClient\n    ctx    context.Context\n}\n\n\n// NewDBClient connects to the Ahnlich DB server.\nfunc NewDBClient(ctx context.Context) (*ExampleDBClient, error) {\n    conn, err := grpc.DialContext(\n        ctx,\n        ServerAddr,\n        grpc.WithTransportCredentials(insecure.NewCredentials()),\n        grpc.WithBlock(),\n    )\n    if err != nil {\n        return nil, fmt.Errorf("failed to dial DB server %q: %w", ServerAddr, err)\n    }\n    client := dbsvc.NewDBServiceClient(conn)\n    return &ExampleDBClient{conn: conn, client: client, ctx: ctx}, nil\n}\n\n\n// Close closes the gRPC connection.\nfunc (c *ExampleDBClient) Close() error {\n    return c.conn.Close()\n}\n\n\n// -------------------- GetSimN --------------------\nfunc (c *ExampleDBClient) exampleGetSimN() error {\n    resp, err := c.client.GetSimN(c.ctx, &dbquery.GetSimN{\n        Store:       "my_store",\n        SearchInput: &keyval.StoreKey{Key: []float32{1, 2, 3, 4}},\n        ClosestN:    3,\n    })\n    if err != nil {\n        return err\n    }\n    fmt.Println("GetSimN Results:")\n    for _, entry := range resp.Entries {\n        fmt.Println(" - Key:", entry.Key.Key, "Value:", entry.Value.Value)\n    }\n    return nil\n}\n\n\n// -------------------- Main --------------------\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n\n\n    client, err := NewDBClient(ctx)\n    if err != nil {\n        log.Fatalf("Failed to create DB client: %v", err)\n    }\n    defer client.Close()\n\n\n    if err := client.exampleGetSimN(); err != nil {\n        log.Fatalf("GetSimN failed: %v", err)\n    }\n}\n\n'})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Store"})," \u2013 The request targets ",(0,i.jsx)(n.code,{children:"my_store"}),", which must already exist."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"SearchInput"})," \u2013 A vector ",(0,i.jsx)(n.code,{children:"[1, 2, 3, 4]"})," is used as the query input. This must match the dimensionality of the store."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ClosestN"})," \u2013 The request asks for the 3 most similar vectors."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Response"})," \u2013 The server returns the top matches as ",(0,i.jsx)(n.code,{children:"resp.Entries"}),", including both the stored vectors and any metadata associated with them."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This makes ",(0,i.jsx)(n.code,{children:"GetSimN"})," a fundamental query for retrieving entries most similar to a given embedding while leveraging the similarity algorithms supported by Ahnlich DB."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);