"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[2989],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(96540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},70808:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"client-libraries/python/request-db/info-server","title":"Info Server","description":"The Info Server request retrieves metadata about the running DB server, including the binary version and server type (DB, AI, or Hybrid). This is useful for environment validation, feature gating, and diagnostics.","source":"@site/docs/client-libraries/python/request-db/info-server.md","sourceDirName":"client-libraries/python/request-db","slug":"/client-libraries/python/request-db/info-server","permalink":"/docs/client-libraries/python/request-db/info-server","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-db/info-server.md","tags":[],"version":"current","frontMatter":{"title":"Info Server","sidebar_posiiton":2},"sidebar":"docsSidebar","previous":{"title":"Ping","permalink":"/docs/client-libraries/python/request-db/ping"},"next":{"title":"List Stores","permalink":"/docs/client-libraries/python/request-db/list-stores"}}');var t=r(74848),s=r(28453);const o={title:"Info Server",sidebar_posiiton:2},a="Info Server",c={},l=[{value:"Behavior",id:"behavior",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"info-server",children:"Info Server"})}),"\n",(0,t.jsx)(n.p,{children:"The Info Server request retrieves metadata about the running DB server, including the binary version and server type (DB, AI, or Hybrid). This is useful for environment validation, feature gating, and diagnostics."}),"\n",(0,t.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The client sends an InfoServer request."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The server responds with version and type metadata."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Clients can use this to validate they are connected to the correct server role."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Click to expand source code"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.db_service import DbServiceStub\nfrom ahnlich_client_py.grpc.db import query as db_query\nfrom ahnlich_client_py.grpc.server_types import ServerType\n\nasync def info_server():\n  """Test server version"""\n\n  async with Channel(host="127.0.0.1", port=1369) as channel:\n    client = DbServiceStub(channel)\n    response = await client.info_server(db_query.InfoServer())\n    # response contains server version and type\n    print(f"Server version: {response.info.version}")\n\nif __name__ == "__main__":\n  asyncio.run(info_server())\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);