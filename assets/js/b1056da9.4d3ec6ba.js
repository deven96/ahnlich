"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[3169],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},50980:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"client-libraries/python/request-ai/get-simn","title":"GetSimN","description":"How to retrieve the top N most similar entries from an AI store using the Ahnlich Python SDK.","source":"@site/docs/client-libraries/python/request-ai/get-simn.md","sourceDirName":"client-libraries/python/request-ai","slug":"/client-libraries/python/request-ai/get-simn","permalink":"/docs/client-libraries/python/request-ai/get-simn","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-ai/get-simn.md","tags":[],"version":"current","frontMatter":{"title":"GetSimN"},"sidebar":"docsSidebar","previous":{"title":"Set","permalink":"/docs/client-libraries/python/request-ai/set"},"next":{"title":"Get by Predicate","permalink":"/docs/client-libraries/python/request-ai/get-by-predicate"}}');var r=i(74848),s=i(28453);const o={title:"GetSimN"},l="GetSimN",c={},a=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getsimn",children:"GetSimN"})}),"\n",(0,r.jsx)(n.p,{children:"How to retrieve the top N most similar entries from an AI store using the Ahnlich Python SDK."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GetSimN"})," returns an array of tuples (",(0,r.jsx)(n.code,{children:"store_key"}),", ",(0,r.jsx)(n.code,{children:"store_value"}),", ",(0,r.jsx)(n.code,{children:"similarity_score"}),") of the maximum specified ",(0,r.jsx)(n.code,{children:"N"}),". This allows you to perform similarity searches against the stored AI embeddings."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"store"})," \u2013 Name of the AI store to query."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"search_input"})," \u2013 Query input (string or vector)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"closest_n"})," \u2013 Maximum number of similar results to return (must be > 0)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"algorithm"})," \u2013 Similarity algorithm to use (e.g., Cosine Similarity)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"condition"})," \u2013 Optional predicate condition to filter results."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"execution_provider"})," \u2013 Optional execution provider.`"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The result contains a list of entries with similarity scores."}),"\n",(0,r.jsx)(n.p,{children:"Source code in the context of the rest of the application code."}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Click to expand"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.ai_service import AiServiceStub\nfrom ahnlich_client_py.grpc.ai import query as ai_query\nfrom ahnlich_client_py.grpc import keyval\nfrom ahnlich_client_py.grpc.algorithm import algorithms\n\n\nasync def get_sim_n():\n  async with Channel(host="127.0.0.1", port=1370) as channel:\n      client = AiServiceStub(channel)\n      \n      response = await client.get_sim_n(\n          ai_query.GetSimN(\n              store="test store 1",\n              search_input=keyval.StoreInput(raw_string="Jordan"),\n              closest_n=3,\n              algorithm=algorithms.Algorithm.CosineSimilarity,\n              condition=None,  # Optional predicate condition\n              execution_provider=None  # Optional execution provider\n          )\n      )\n      \n      # Response contains entries with similarity scores\n      for entry in response.entries:\n          print(f"Key: {entry.key.raw_string}")\n          print(f"Score: {entry.similarity}")\n          print(f"Value: {entry.value}")\n\n\n      # Key: Jordan One\n      # Score: Similarity(value=0.858908474445343)\n      # Value: StoreValue(value={\'brand\': MetadataValue(raw_string=\'Nike\')})\n      # Key: Yeezey\n      # Score: Similarity(value=0.21911849081516266)\n      # Value: StoreValue(value={\'brand\': MetadataValue(raw_string=\'Adidas\')})\n\n\nif __name__ == "__main__":\n  asyncio.run(get_sim_n())\n'})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"closest_n"})," must always be a non-zero integer."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This request is designed specifically for AI store queries."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);