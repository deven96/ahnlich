"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[7685],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var r=i(96540);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}},38306:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"client-libraries/rust/request-ai/info-server","title":"Info Server","description":"Retrieves detailed information about the Ahnlich AI service server, including metadata such as version, build information, and runtime configuration. This call is useful for diagnostics, compatibility checks, and ensuring the AI service is running as expected.","source":"@site/docs/client-libraries/rust/request-ai/info-server.md","sourceDirName":"client-libraries/rust/request-ai","slug":"/client-libraries/rust/request-ai/info-server","permalink":"/docs/client-libraries/rust/request-ai/info-server","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/rust/request-ai/info-server.md","tags":[],"version":"current","frontMatter":{"title":"Info Server"},"sidebar":"docsSidebar","previous":{"title":"Ping","permalink":"/docs/client-libraries/rust/request-ai/ping"},"next":{"title":"List Store","permalink":"/docs/client-libraries/rust/request-ai/list-stores"}}');var s=i(74848),t=i(28453);const l={title:"Info Server"},c="Info Server",a={},o=[{value:"Source Code Example",id:"source-code-example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Behavior (explains the code, brief)",id:"behavior-explains-the-code-brief",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"info-server",children:"Info Server"})}),"\n",(0,s.jsx)(n.p,{children:"Retrieves detailed information about the Ahnlich AI service server, including metadata such as version, build information, and runtime configuration. This call is useful for diagnostics, compatibility checks, and ensuring the AI service is running as expected."}),"\n",(0,s.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"Click to expand"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use ahnlich_client_rs::ai::AiClient; // <-- note the `ai::` path\nuse ahnlich_client_rs::error::AhnlichError;\nuse ahnlich_types::shared::info::ServerInfo;\n\n\n#[tokio::main]\nasync fn main() -> Result<(), AhnlichError> {\n    let addr = "127.0.0.1:1370";\n    let client = AiClient::new(addr.to_string()).await?;\n\n\n    // Direct info_server call\n    let server_info: ServerInfo = client.info_server(None).await?;\n    println!("Server Info: {:?}", server_info);\n\n\n    // Using pipeline\n    let mut pipeline = client.pipeline(None);\n    pipeline.info_server();\n    let pipeline_result = pipeline.exec().await?;\n    println!("Pipeline Server Info: {:?}", pipeline_result);\n\n\n    Ok(())\n}\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tracing_id: Option<String>"})," \u2014 Optional trace parent attached to propagate observability metadata with the request."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Ok(ServerInfo)"})," \u2014 Metadata describing the AI service server (e.g., version, configuration)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Err(AhnlichError)"})," \u2014 If the server cannot be reached, request fails, or metadata is missing."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"behavior-explains-the-code-brief",children:"Behavior (explains the code, brief)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Builds a ",(0,s.jsx)(n.code,{children:"tonic::Request"})," with an empty ",(0,s.jsx)(n.code,{children:"InfoServer {}"})," message."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Propagates tracing context if provided."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Calls the remote ",(0,s.jsx)(n.code,{children:"info_server"})," RPC using the cloned client."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Awaits and unwraps the server response."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Extracts the ",(0,s.jsx)(n.code,{children:"info"})," field, returning it as ",(0,s.jsx)(n.code,{children:"ServerInfo"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Ensures the ",(0,s.jsx)(n.code,{children:"info"})," is not ",(0,s.jsx)(n.code,{children:"None"})," with ",(0,s.jsx)(n.code,{children:".expect()"}),", which will panic if missing (a server contract guarantee)."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);