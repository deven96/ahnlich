"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[333],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},46484:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"client-libraries/go/bulk-requests","title":"Bulk Requests","description":"Description","source":"@site/docs/client-libraries/go/bulk-requests.md","sourceDirName":"client-libraries/go","slug":"/client-libraries/go/bulk-requests","permalink":"/docs/client-libraries/go/bulk-requests","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/bulk-requests.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Bulk Requests","sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Drop Non-Linear Algorithm Index","permalink":"/docs/client-libraries/go/request-ai/drop-non-linear-algx"},"next":{"title":"Type Meanings","permalink":"/docs/client-libraries/go/type-meanings"}}');var r=i(74848),t=i(28453);const l={title:"Bulk Requests",sidebar_position:4},o="Bulk Requests \u2014 DB Pipeline",c={},d=[{value:"Description",id:"description",level:2},{value:"Source Code Example",id:"source-code-example",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Source Code Example",id:"source-code-example-1",level:2},{value:"Behavior and expectations",id:"behavior-and-expectations",level:2},{value:"Development &amp; Testing",id:"development--testing",level:2},{value:"Local Development Commands",id:"local-development-commands",level:3},{value:"Install Dependencies",id:"install-dependencies",level:3},{value:"Format Code",id:"format-code",level:3},{value:"Run Tests (Sequential)",id:"run-tests-sequential",level:3},{value:"Lint Check",id:"lint-check",level:3},{value:"Deploy to GitHub Releases",id:"deploy-to-github-releases",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"bulk-requests--db-pipeline",children:"Bulk Requests \u2014 DB Pipeline"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["In scenarios where multiple operations need to be performed against the database in a single workflow, executing each request independently can introduce unnecessary network overhead and increase response time. To address this, the DB service provides a pipeline mechanism, which allows clients to bundle several queries together and send them as one request. This improves efficiency, ensures that queries are executed in a defined sequence, and guarantees that responses are returned in the same order as the submitted queries. Pipelines are especially useful in workloads where ",(0,r.jsx)(n.strong,{children:"set-and-retrieve"})," or ",(0,r.jsx)(n.strong,{children:"batch query patterns"})," are common."]}),"\n",(0,r.jsx)(n.h2,{id:"source-code-example",children:"Source Code Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'\nfunc examplePipelineDB() error {\n  c.ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n  defer cancel()\n\n  conn, err := grpc.DialContext(c.ctx, proc.ServerAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n  if err != nil {\n      return fmt.Errorf("failed to dial DB server %q: %w", ServerAddr, err)\n  }\n  defer conn.Close()\n\n  client := dbsvc.NewDBServiceClient(conn)\n\n  // Build pipeline queries\n  setQ := &pipeline.DBQuery{Query: &pipeline.DBQuery_Set{Set: &dbquery.Set{\n      Store:  "my_store",\n      Inputs: []*keyval.DbStoreEntry{/* ... */},\n  }}}\n  getQ := &pipeline.DBQuery{Query: &pipeline.DBQuery_GetKey{GetKey: &dbquery.GetKey{\n      Store: "my_store",\n      Keys:  []*keyval.StoreKey{/* ... */},\n  }}}\n\n  // Execute pipeline\n  req := &pipeline.DBRequestPipeline{Queries: []*pipeline.DBQuery{setQ, getQ}}\n  resp, err := client.Pipeline(c.ctx, req)\n  if err != nil {\n      return err\n  }\n  fmt.Println("Pipeline responses:", resp.Responses)\n  return nil\n}\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Pipelines minimize network calls by sending multiple queries in a single request."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Queries are executed in ",(0,r.jsx)(n.strong,{children:"order"}),", and results are returned in the same sequence."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Both successful responses and errors are included, aligned with their respective queries."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This approach optimizes performance and makes workflows more efficient when dealing with multiple dependent queries."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"bulk-requests--ai-pipeline",children:"Bulk Requests \u2014 AI Pipeline"}),"\n",(0,r.jsxs)(n.p,{children:["Just like the DB service, the AI service also supports ",(0,r.jsx)(n.strong,{children:"pipelines"})," for combining multiple operations into a single request. This mechanism is particularly useful when you want to both ",(0,r.jsx)(n.strong,{children:"insert embeddings"})," and ",(0,r.jsx)(n.strong,{children:"query for similarities"})," in one sequence. By batching operations together, pipelines reduce ",(0,r.jsx)(n.strong,{children:"network latency"}),", improve throughput, and ensure that results are returned in the same order as the queries were issued.\nThis is valuable in AI workflows where you might first store ",(0,r.jsx)(n.strong,{children:"embeddings"})," (e.g., text, image, or other vectorized data) and immediately ",(0,r.jsx)(n.strong,{children:"retrieve the most similar entries"})," from the store."]}),"\n",(0,r.jsx)(n.h2,{id:"source-code-example-1",children:"Source Code Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func examplePipelineAI() error {\n    c.ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n\n    conn, err := grpc.DialContext(c.ctx, proc.ServerAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n    if err != nil {\n        return fmt.Errorf("failed to dial AI server %q: %w", ServerAddr, err)\n    }\n    defer conn.Close()\n\n    client := aisvc.NewAIServiceClient(conn)\n\n    // Build pipeline queries\n    setQ := &pipeline.AIQuery{Query: &pipeline.AIQuery_Set{Set: &aiquery.Set{\n        Store:  "ai_store",\n        Inputs: []*keyval.AiStoreEntry{/* ... */},\n    }}}\n    simQ := &pipeline.AIQuery{Query: &pipeline.AIQuery_GetSimN{GetSimN: &aiquery.GetSimN{\n        Store:       "ai_store",\n        SearchInput: &keyval.StoreInput{Value: &keyval.StoreInput_RawString{RawString: "X"}},\n        ClosestN:    3,\n    }}}\n\n    // Execute pipeline\n    req := &pipeline.AIRequestPipeline{Queries: []*pipeline.AIQuery{setQ, simQ}}\n    resp, err := client.Pipeline(c.ctx, req)\n    if err != nil {\n        return err\n    }\n    fmt.Println("AI pipeline responses:", resp.Responses)\n    return nil\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"behavior-and-expectations",children:"Behavior and expectations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Both ",(0,r.jsx)(n.code,{children:"Set"})," and ",(0,r.jsx)(n.code,{children:"GetSimN"})," are executed as part of the ",(0,r.jsx)(n.strong,{children:"same pipeline request"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Responses are returned in the ",(0,r.jsx)(n.strong,{children:"same sequence"})," as the queries (",(0,r.jsx)(n.code,{children:"Set - GetSimN"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If one query fails, its error is captured in the response while others continue execution."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Pipelines improve efficiency by minimizing round-trips to the AI server."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Useful in workflows where embeddings are created or updated and then immediately used for ",(0,r.jsx)(n.strong,{children:"similarity search"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"development--testing",children:"Development & Testing"}),"\n",(0,r.jsx)(n.p,{children:"The Go SDK provides a set of Makefile targets and CI/CD workflows to simplify development, testing, and release management. These commands are primarily used by developers working on the SDK itself (rather than SDK consumers)."}),"\n",(0,r.jsx)(n.h3,{id:"local-development-commands",children:"Local Development Commands"}),"\n",(0,r.jsx)(n.h3,{id:"install-dependencies",children:"Install Dependencies"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"make install-dependencies"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Installs all required Go modules and external tools needed to build and test the SDK."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"format-code",children:"Format Code"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"make format"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runs formatting tools to enforce a consistent code style across the codebase."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"run-tests-sequential",children:"Run Tests (Sequential)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"make test"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Executes all unit and integration tests sequentially to validate correctness of implementations."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"lint-check",children:"Lint Check"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"make lint-check"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runs static analysis tools to ensure code quality, style consistency, and to catch potential issues before release."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"deploy-to-github-releases",children:"Deploy to GitHub Releases"}),"\n",(0,r.jsx)(n.p,{children:"The SDK uses GitHub Actions CI/CD to automate release publishing. Deployment steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bump version"})," in go.mod to reflect the new release."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create a Git tag"})," using semantic versioning format:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"git tag vX.Y.Z"}),"\n",(0,r.jsx)(n.code,{children:"git push origin vX.Y.Z"})]}),"\n",(0,r.jsxs)(n.p,{children:["Pushing the tag triggers the ",(0,r.jsx)(n.strong,{children:"CI/CD pipeline"}),", which:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Builds the SDK"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Runs all tests"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Publishes the release artifacts to GitHub Releases"}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);