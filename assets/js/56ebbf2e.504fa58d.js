"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[9252],{4117:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"client-libraries/go/type-meanings","title":"Type Meanings","description":"Key concepts and their meanings in the SDK:","source":"@site/docs/client-libraries/go/type-meanings.md","sourceDirName":"client-libraries/go","slug":"/client-libraries/go/type-meanings","permalink":"/docs/client-libraries/go/type-meanings","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/go/type-meanings.md","tags":[],"version":"current","frontMatter":{"title":"Type Meanings","sidebar_posiiton":5},"sidebar":"docsSidebar","previous":{"title":"Bulk Requests","permalink":"/docs/client-libraries/go/bulk-requests"},"next":{"title":"Rust","permalink":"/docs/client-libraries/rust/"}}');var t=i(74848),r=i(28453);const l={title:"Type Meanings",sidebar_posiiton:5},c="Type Meanings",a={},o=[{value:"1. StoreKey",id:"1-storekey",level:3},{value:"2. StoreValue",id:"2-storevalue",level:3},{value:"3. Predicates",id:"3-predicates",level:3},{value:"4. Pipeline",id:"4-pipeline",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"type-meanings",children:"Type Meanings"})}),"\n",(0,t.jsx)(n.p,{children:"Key concepts and their meanings in the SDK:"}),"\n",(0,t.jsx)(n.h3,{id:"1-storekey",children:"1. StoreKey"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["DB: represented as a raw ",(0,t.jsx)(n.code,{children:"[]float32"})," vector."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["AI: represented as a ",(0,t.jsx)(n.code,{children:"StoreInput"})," object, which may be raw text, numbers, or serialized embeddings."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-storevalue",children:"2. StoreValue"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A ",(0,t.jsx)(n.code,{children:"map"})," of metadata fields associated with a stored entry (e.g., labels, tags, or custom attributes)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-predicates",children:"3. Predicates"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Filtering conditions that restrict which stored values are retrieved or indexed. Useful for constrained similarity search."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-pipeline",children:"4. Pipeline"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A batch RPC builder that allows combining multiple requests (such as ",(0,t.jsx)(n.code,{children:"Set"}),", ",(0,t.jsx)(n.code,{children:"GetKey"}),", ",(0,t.jsx)(n.code,{children:"GetSimN"}),", etc.) into a single execution for efficiency."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This section provides developers with clear guidance for ",(0,t.jsx)(n.strong,{children:"building, testing, and releasing"})," the SDK, as well as an understanding of ",(0,t.jsx)(n.strong,{children:"core data types"})," used in both DB and AI contexts."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(96540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);