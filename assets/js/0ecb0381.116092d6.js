"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[4463],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},42528:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"client-libraries/python/request-db/set","title":"Set","description":"The Set request inserts or updates vector entries inside a store. Each entry is defined by:","source":"@site/docs/client-libraries/python/request-db/set.md","sourceDirName":"client-libraries/python/request-db","slug":"/client-libraries/python/request-db/set","permalink":"/docs/client-libraries/python/request-db/set","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-db/set.md","tags":[],"version":"current","frontMatter":{"title":"Set"},"sidebar":"docsSidebar","previous":{"title":"Create Store","permalink":"/docs/client-libraries/python/request-db/create-store"},"next":{"title":"GetSimN","permalink":"/docs/client-libraries/python/request-db/get-simn"}}');var s=t(74848),i=t(28453);const o={title:"Set"},c="Set",l={},a=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,s.jsx)(n.p,{children:"The Set request inserts or updates vector entries inside a store. Each entry is defined by:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"StoreKey"}),": the vector itself (list of floats)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"StoreValue"}),": metadata (key-value pairs) describing the vector."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"store"}),": the store name."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"inputs"}),": list of entries (StoreKey, StoreValue)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Behavior"}),": If the vector already exists, it updates the metadata. Otherwise, it inserts a new entry."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Response"}),": A confirmation response indicating success."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Click to expand source code"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom importlib.metadata import metadata\nfrom ahnlich_client_py.grpc import keyval, metadata\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.db_service import DbServiceStub\nfrom ahnlich_client_py.grpc.db import query as db_query\nfrom ahnlich_client_py.grpc.db.server import Set\n\nasync def set():\n  async with Channel(host="127.0.0.1", port=1369) as channel:\n    client = DbServiceStub(channel)\n\n  store_key = keyval.StoreKey(key=[5.0, 3.0, 4.0, 3.9, 4.9])\n  store_value = keyval.StoreValue(\n    value={"rank": metadata.MetadataValue(raw_string="chunin")}\n  )\n\n  response = await client.set(\n    db_query.Set(\n      store="test store",\n      inputs=[keyval.DbStoreEntry(key=store_key, value=store_value)]\n    )\n  )\n\nif __name__ == "__main__":\n  asyncio.run(set())\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);