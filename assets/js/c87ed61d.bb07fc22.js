"use strict";(self.webpackChunkahnlich_web=self.webpackChunkahnlich_web||[]).push([[659],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}},40178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"client-libraries/python/request-db/delete-predicate","title":"Delete Predicate","description":"This request removes all entries in a store that match a specified predicate condition.","source":"@site/docs/client-libraries/python/request-db/delete-predicate.md","sourceDirName":"client-libraries/python/request-db","slug":"/client-libraries/python/request-db/delete-predicate","permalink":"/docs/client-libraries/python/request-db/delete-predicate","draft":false,"unlisted":false,"editUrl":"https://github.com/deven96/ahnlich/tree/main/web/ahnlich-web/docs/client-libraries/python/request-db/delete-predicate.md","tags":[],"version":"current","frontMatter":{"title":"Delete Predicate"},"sidebar":"docsSidebar","previous":{"title":"Drop Non-Linear Algorithm Index","permalink":"/docs/client-libraries/python/request-db/drop-non-linear-algx"},"next":{"title":"Request AI","permalink":"/docs/client-libraries/python/request-ai/"}}');var i=t(74848),s=t(28453);const c={title:"Delete Predicate"},l="Delete Predicate",d={},o=[];function a(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"delete-predicate",children:"Delete Predicate"})}),"\n",(0,i.jsx)(n.p,{children:"This request removes all entries in a store that match a specified predicate condition."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Input:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"store"}),": the name of the store."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"condition"}),": a logical predicate that filters which entries should be deleted."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Behavior:"}),' Instead of deleting by a specific key, the server scans the store and deletes all entries that satisfy the predicate condition. In this example, it deletes all entries where the metadata field "',(0,i.jsx)(n.code,{children:"job"}),'" equals "',(0,i.jsx)(n.code,{children:"sorcerer"}),'".']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"deleted_count"})," \u2192 the number of items successfully deleted."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Click to expand source code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'import asyncio\nfrom grpclib.client import Channel\nfrom ahnlich_client_py.grpc.services.db_service import DbServiceStub\nfrom ahnlich_client_py.grpc.db import query as db_query\nfrom ahnlich_client_py.grpc import predicates, metadata\nfrom ahnlich_client_py.grpc.db.server import Del\n\n\n\n\nasync def delete_predicate():\n  async with Channel(host="127.0.0.1", port=1369) as channel:\n      client = DbServiceStub(channel)\n      \n      condition = predicates.PredicateCondition(\n          value=predicates.Predicate(\n              equals=predicates.Equals(\n                  key="job",\n                  value=metadata.MetadataValue(raw_string="sorcerer")\n              )\n          )\n      )\n      \n      response = await client.del_pred(\n          db_query.DelPred(\n              store="test store 003",\n              condition=condition\n          )\n      )\n      # response.deleted_count shows how many items were deleted\nif __name__ == "__main__":\n  asyncio.run(delete_predicate())\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);