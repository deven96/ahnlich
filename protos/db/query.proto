syntax = "proto3";

package db.query;

import "predicate.proto";
import "keyval.proto";
import "metadata.proto";
import "algorithm/algorithm.proto";
import "algorithm/nonlinear.proto";

// ===================
// === Query Types ===
// ===================

// Creates a new store in the database with the specified dimension, predicates, and non-linear indices.
// If `error_if_exists` is set to true, it will return an error if the store already exists.
message CreateStore {
    string store = 1; // The name of the store.
    uint32 dimension = 2; // The dimension of the data within the store.
    repeated string create_predicates = 3; // Predicates used for querying.
    repeated algorithm.nonlinear.NonLinearAlgorithm non_linear_indices = 4; // Non-linear algorithms for indexing.
    bool error_if_exists = 5; // Flag indicating whether to error if store already exists.
}

// Retrieves values from the store based on provided keys.
message GetKey {
    string store = 1; // The name of the store.
    repeated keyval.StoreKey keys = 2; // The keys to retrieve from the store.
}

// Retrieves values from the store based on predicates. Validation checks if the predicate is enabled.
message GetPred {
    string store = 1; // The name of the store.
    predicates.PredicateCondition condition = 2; // The condition for the predicate query.
}

// Retrieves the `n` most similar items to the input vector from the store, using the specified algorithm.
// Validation checks that the dimensions of the input vector match the store's dimensions.
// `n` could be less than originally specified.
message GetSimN {
    string store = 1; // The name of the store.
    keyval.StoreKey search_input = 2; // The input vector for similarity comparison.
    uint32 closest_n = 3; // The number of closest matches to return.
    algorithm.algorithms.Algorithm algorithm = 4; // The algorithm to use for similarity computation.
    predicates.PredicateCondition condition = 5; // The predicate condition to apply.
}

// Creates an index in the store based on the provided predicates.
// This operation is idempotent: it will only add new predicates, not remove existing ones.
message CreatePredIndex {
    string store = 1; // The name of the store.
    repeated string predicates = 2; // The predicates to create indexes for.
}

// Creates an index for non-linear algorithms in the store, if it does not already exist.
// This operation is idempotent: it will only add new non-linear indices, not remove existing ones.
message CreateNonLinearAlgorithmIndex {
    string store = 1; // The name of the store.
    repeated algorithm.nonlinear.NonLinearAlgorithm non_linear_indices = 2; // Non-linear algorithms to create indices for.
}

// Drops the specified predicates from the store.
// If `error_if_not_exists` is true, an error is returned if the predicate does not exist.
message DropPredIndex {
    string store = 1; // The name of the store.
    repeated string predicates = 2; // The predicates to drop.
    bool error_if_not_exists = 3; // Flag indicating whether to error if predicate does not exist.
}

// Drops the specified non-linear indices from the store.
// If `error_if_not_exists` is true, an error is returned if the non-linear index does not exist.
message DropNonLinearAlgorithmIndex {
    string store = 1; // The name of the store.
    repeated algorithm.nonlinear.NonLinearAlgorithm non_linear_indices = 2; // Non-linear indices to drop.
    bool error_if_not_exists = 3; // Flag indicating whether to error if index does not exist.
}

// Deletes the specified keys from the store and returns the number of deleted keys.
// It will also update the indices in a non-blocking manner.
message DelKey {
    string store = 1; // The name of the store.
    repeated keyval.StoreKey keys = 2; // The keys to delete from the store.
}

// Deletes values from the store based on the provided predicate condition.
// It will also update the indices in a non-blocking manner.
message DelPred {
    string store = 1; // The name of the store.
    predicates.PredicateCondition condition = 2; // The condition for the predicate deletion.
}

// Drops a store and deletes all its data and associated indices.
// If `error_if_not_exists` is true, it will return an error if the store does not exist.
message DropStore {
    string store = 1; // The name of the store.
    bool error_if_not_exists = 2; // Flag indicating whether to error if store does not exist.
}

// A request to get server information such as host, port, and version.
message InfoServer {}

// A request to list all the stores on the server, along with their size or length.
message ListStores {}

// A request to list all the clients currently connected to the server.
message ListClients {}

// A simple ping request to check if the server is reachable.
message Ping {}

// A request to set multiple key-value entries in the store.
// Validation is done for each vector before updating the store.
message Set {
    string store = 1; // The name of the store.
    repeated StoreEntry inputs = 2; // The key-value entries to set in the store.
}

// A single entry for a store containing a key and its associated metadata values.
message StoreEntry {
    keyval.StoreKey key = 1; // The key for the entry.
    map<string, metadata.MetadataValue> value = 2; // The metadata associated with the key.
}