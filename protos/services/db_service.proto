syntax = "proto3";

package services.db_service;

import "db/pipeline.proto";
import "db/query.proto";
import "db/server.proto";

option go_package = "github.com/deven96/ahnlich/sdk/ahnlich-client-go/grpc/services/db_service;db_service";

service DBService {
  /** Create methods **/
  rpc CreateStore(db.query.CreateStore) returns (db.server.Unit);
  rpc CreatePredIndex(db.query.CreatePredIndex) returns (db.server.CreateIndex);
  rpc CreateNonLinearAlgorithmIndex(db.query.CreateNonLinearAlgorithmIndex) returns (db.server.CreateIndex);

  /** Read methods **/
  rpc GetKey(db.query.GetKey) returns (db.server.Get);
  rpc GetPred(db.query.GetPred) returns (db.server.Get);
  rpc GetSimN(db.query.GetSimN) returns (db.server.GetSimN);

  /** Update methods **/
  rpc Set(db.query.Set) returns (db.server.Set);

  /** Delete methods **/
  rpc DropPredIndex(db.query.DropPredIndex) returns (db.server.Del);
  rpc DropNonLinearAlgorithmIndex(db.query.DropNonLinearAlgorithmIndex) returns (db.server.Del);
  rpc DelKey(db.query.DelKey) returns (db.server.Del);
  rpc DelPred(db.query.DelPred) returns (db.server.Del);
  rpc DropStore(db.query.DropStore) returns (db.server.Del);

  /** Ancillary info methods **/
  rpc ListClients(db.query.ListClients) returns (db.server.ClientList);
  rpc ListStores(db.query.ListStores) returns (db.server.StoreList);
  rpc InfoServer(db.query.InfoServer) returns (db.server.InfoServer);
  rpc Ping(db.query.Ping) returns (db.server.Pong);

  /** Pipeline method for all methods **/
  rpc Pipeline(db.pipeline.DBRequestPipeline) returns (db.pipeline.DBResponsePipeline);
}
