// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DbQuery {
    #[prost(
        oneof = "db_query::Query",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16"
    )]
    pub query: ::core::option::Option<db_query::Query>,
}
/// Nested message and enum types in `DBQuery`.
pub mod db_query {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Query {
        #[prost(message, tag = "1")]
        CreateStore(super::super::query::CreateStore),
        #[prost(message, tag = "2")]
        GetKey(super::super::query::GetKey),
        #[prost(message, tag = "3")]
        GetPred(super::super::query::GetPred),
        #[prost(message, tag = "4")]
        GetSimN(super::super::query::GetSimN),
        #[prost(message, tag = "5")]
        CreatePredIndex(super::super::query::CreatePredIndex),
        #[prost(message, tag = "6")]
        CreateNonLinearAlgorithmIndex(super::super::query::CreateNonLinearAlgorithmIndex),
        #[prost(message, tag = "7")]
        DropPredIndex(super::super::query::DropPredIndex),
        #[prost(message, tag = "8")]
        DropNonLinearAlgorithmIndex(super::super::query::DropNonLinearAlgorithmIndex),
        #[prost(message, tag = "9")]
        Set(super::super::query::Set),
        #[prost(message, tag = "10")]
        DelKey(super::super::query::DelKey),
        #[prost(message, tag = "11")]
        DelPred(super::super::query::DelPred),
        #[prost(message, tag = "12")]
        DropStore(super::super::query::DropStore),
        #[prost(message, tag = "13")]
        InfoServer(super::super::query::InfoServer),
        #[prost(message, tag = "14")]
        ListStores(super::super::query::ListStores),
        #[prost(message, tag = "15")]
        ListClients(super::super::query::ListClients),
        #[prost(message, tag = "16")]
        Ping(super::super::query::Ping),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DbRequestPipeline {
    #[prost(message, repeated, tag = "1")]
    pub queries: ::prost::alloc::vec::Vec<DbQuery>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DbServerResponse {
    #[prost(
        oneof = "db_server_response::Response",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
    )]
    pub response: ::core::option::Option<db_server_response::Response>,
}
/// Nested message and enum types in `DBServerResponse`.
pub mod db_server_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        Unit(super::super::server::Unit),
        #[prost(message, tag = "2")]
        Pong(super::super::server::Pong),
        #[prost(message, tag = "3")]
        ClientList(super::super::server::ClientList),
        #[prost(message, tag = "4")]
        StoreList(super::super::server::StoreList),
        #[prost(message, tag = "5")]
        InfoServer(super::super::server::InfoServer),
        #[prost(message, tag = "6")]
        Set(super::super::server::Set),
        #[prost(message, tag = "7")]
        Get(super::super::server::Get),
        #[prost(message, tag = "8")]
        GetSimN(super::super::server::GetSimN),
        #[prost(message, tag = "9")]
        Del(super::super::server::Del),
        #[prost(message, tag = "10")]
        CreateIndex(super::super::server::CreateIndex),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DbResponsePipeline {
    #[prost(message, repeated, tag = "1")]
    pub responses: ::prost::alloc::vec::Vec<DbServerResponse>,
}
