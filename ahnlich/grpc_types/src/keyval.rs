// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreName {
    #[prost(string, tag = "1")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreKey {
    #[prost(float, repeated, tag = "1")]
    pub key: ::prost::alloc::vec::Vec<f32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreInput {
    #[prost(enumeration = "StoreInputType", tag = "1")]
    pub r#type: i32,
    #[prost(oneof = "store_input::Value", tags = "2, 3")]
    pub value: ::core::option::Option<store_input::Value>,
}
/// Nested message and enum types in `StoreInput`.
pub mod store_input {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(string, tag = "2")]
        RawString(::prost::alloc::string::String),
        #[prost(bytes, tag = "3")]
        Image(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreEntry {
    #[prost(message, optional, tag = "1")]
    pub key: ::core::option::Option<StoreKey>,
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<StoreValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreValue {
    #[prost(map = "string, message", tag = "1")]
    pub value:
        ::std::collections::HashMap<::prost::alloc::string::String, super::metadata::MetadataValue>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StoreInputType {
    RawString = 0,
    Image = 1,
}
impl StoreInputType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RawString => "RawString",
            Self::Image => "Image",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RawString" => Some(Self::RawString),
            "Image" => Some(Self::Image),
            _ => None,
        }
    }
}
