// This file is @generated by prost-build.
/// Generated client implementations.
pub mod ai_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct AiServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AiServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AiServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AiServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AiServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_store(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::CreateStore>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::Unit>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/CreateStore");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "CreateStore",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_key(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::GetKey>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Get>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/GetKey");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("services.ai_service.AIService", "GetKey"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_pred(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::GetPred>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Get>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/GetPred");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("services.ai_service.AIService", "GetPred"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_sim_n(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::GetSimN>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::GetSimN>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/GetSimN");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("services.ai_service.AIService", "GetSimN"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn ping(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::Ping>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::Pong>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/services.ai_service.AIService/Ping");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("services.ai_service.AIService", "Ping"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_pred_index(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::CreatePredIndex>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::CreateIndex>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/services.ai_service.AIService/CreatePredIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "CreatePredIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_non_linear_algorithm_index(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::ai::query::CreateNonLinearAlgorithmIndex,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::CreateIndex>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/services.ai_service.AIService/CreateNonLinearAlgorithmIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "CreateNonLinearAlgorithmIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn drop_pred_index(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::DropPredIndex>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/services.ai_service.AIService/DropPredIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "DropPredIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn drop_non_linear_algorithm_index(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::ai::query::DropNonLinearAlgorithmIndex,
            >,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/services.ai_service.AIService/DropNonLinearAlgorithmIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "DropNonLinearAlgorithmIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn del_key(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::DelKey>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/DelKey");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("services.ai_service.AIService", "DelKey"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn drop_store(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::DropStore>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/DropStore");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "DropStore",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_clients(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::ListClients>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::ClientList>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/ListClients");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "ListClients",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_stores(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::ListStores>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::StoreList>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/ListStores");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "ListStores",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn purge_stores(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::PurgeStores>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/PurgeStores");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "services.ai_service.AIService",
                "PurgeStores",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::query::Set>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Set>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/services.ai_service.AIService/Set");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("services.ai_service.AIService", "Set"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn pipeline(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::ai::pipeline::AiRequestPipeline>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::pipeline::AiResponsePipeline>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/services.ai_service.AIService/Pipeline");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("services.ai_service.AIService", "Pipeline"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod ai_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AiServiceServer.
    #[async_trait]
    pub trait AiService: std::marker::Send + std::marker::Sync + 'static {
        async fn create_store(
            &self,
            request: tonic::Request<super::super::super::ai::query::CreateStore>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::Unit>,
            tonic::Status,
        >;
        async fn get_key(
            &self,
            request: tonic::Request<super::super::super::ai::query::GetKey>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Get>, tonic::Status>;
        async fn get_pred(
            &self,
            request: tonic::Request<super::super::super::ai::query::GetPred>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Get>, tonic::Status>;
        async fn get_sim_n(
            &self,
            request: tonic::Request<super::super::super::ai::query::GetSimN>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::GetSimN>,
            tonic::Status,
        >;
        async fn ping(
            &self,
            request: tonic::Request<super::super::super::ai::query::Ping>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::Pong>,
            tonic::Status,
        >;
        async fn create_pred_index(
            &self,
            request: tonic::Request<super::super::super::ai::query::CreatePredIndex>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::CreateIndex>,
            tonic::Status,
        >;
        async fn create_non_linear_algorithm_index(
            &self,
            request: tonic::Request<super::super::super::ai::query::CreateNonLinearAlgorithmIndex>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::CreateIndex>,
            tonic::Status,
        >;
        async fn drop_pred_index(
            &self,
            request: tonic::Request<super::super::super::ai::query::DropPredIndex>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>;
        async fn drop_non_linear_algorithm_index(
            &self,
            request: tonic::Request<super::super::super::ai::query::DropNonLinearAlgorithmIndex>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>;
        async fn del_key(
            &self,
            request: tonic::Request<super::super::super::ai::query::DelKey>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>;
        async fn drop_store(
            &self,
            request: tonic::Request<super::super::super::ai::query::DropStore>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>;
        async fn list_clients(
            &self,
            request: tonic::Request<super::super::super::ai::query::ListClients>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::ClientList>,
            tonic::Status,
        >;
        async fn list_stores(
            &self,
            request: tonic::Request<super::super::super::ai::query::ListStores>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::server::StoreList>,
            tonic::Status,
        >;
        async fn purge_stores(
            &self,
            request: tonic::Request<super::super::super::ai::query::PurgeStores>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Del>, tonic::Status>;
        async fn set(
            &self,
            request: tonic::Request<super::super::super::ai::query::Set>,
        ) -> std::result::Result<tonic::Response<super::super::super::ai::server::Set>, tonic::Status>;
        async fn pipeline(
            &self,
            request: tonic::Request<super::super::super::ai::pipeline::AiRequestPipeline>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::ai::pipeline::AiResponsePipeline>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct AiServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AiServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AiServiceServer<T>
    where
        T: AiService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/services.ai_service.AIService/CreateStore" => {
                    #[allow(non_camel_case_types)]
                    struct CreateStoreSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::CreateStore>
                        for CreateStoreSvc<T>
                    {
                        type Response = super::super::super::ai::server::Unit;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::CreateStore>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AiService>::create_store(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateStoreSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/GetKey" => {
                    #[allow(non_camel_case_types)]
                    struct GetKeySvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::GetKey>
                        for GetKeySvc<T>
                    {
                        type Response = super::super::super::ai::server::Get;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::GetKey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as AiService>::get_key(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetKeySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/GetPred" => {
                    #[allow(non_camel_case_types)]
                    struct GetPredSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::GetPred>
                        for GetPredSvc<T>
                    {
                        type Response = super::super::super::ai::server::Get;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::GetPred>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as AiService>::get_pred(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPredSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/GetSimN" => {
                    #[allow(non_camel_case_types)]
                    struct GetSimNSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::GetSimN>
                        for GetSimNSvc<T>
                    {
                        type Response = super::super::super::ai::server::GetSimN;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::GetSimN>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as AiService>::get_sim_n(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSimNSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/Ping" => {
                    #[allow(non_camel_case_types)]
                    struct PingSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::Ping>
                        for PingSvc<T>
                    {
                        type Response = super::super::super::ai::server::Pong;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::Ping>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as AiService>::ping(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/CreatePredIndex" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePredIndexSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::CreatePredIndex>
                        for CreatePredIndexSvc<T>
                    {
                        type Response = super::super::super::ai::server::CreateIndex;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::ai::query::CreatePredIndex,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AiService>::create_pred_index(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePredIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/CreateNonLinearAlgorithmIndex" => {
                    #[allow(non_camel_case_types)]
                    struct CreateNonLinearAlgorithmIndexSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<
                            super::super::super::ai::query::CreateNonLinearAlgorithmIndex,
                        > for CreateNonLinearAlgorithmIndexSvc<T>
                    {
                        type Response = super::super::super::ai::server::CreateIndex;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::ai::query::CreateNonLinearAlgorithmIndex,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AiService>::create_non_linear_algorithm_index(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateNonLinearAlgorithmIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/DropPredIndex" => {
                    #[allow(non_camel_case_types)]
                    struct DropPredIndexSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::DropPredIndex>
                        for DropPredIndexSvc<T>
                    {
                        type Response = super::super::super::ai::server::Del;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::DropPredIndex>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AiService>::drop_pred_index(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DropPredIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/DropNonLinearAlgorithmIndex" => {
                    #[allow(non_camel_case_types)]
                    struct DropNonLinearAlgorithmIndexSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<
                            super::super::super::ai::query::DropNonLinearAlgorithmIndex,
                        > for DropNonLinearAlgorithmIndexSvc<T>
                    {
                        type Response = super::super::super::ai::server::Del;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::ai::query::DropNonLinearAlgorithmIndex,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AiService>::drop_non_linear_algorithm_index(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DropNonLinearAlgorithmIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/DelKey" => {
                    #[allow(non_camel_case_types)]
                    struct DelKeySvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::DelKey>
                        for DelKeySvc<T>
                    {
                        type Response = super::super::super::ai::server::Del;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::DelKey>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as AiService>::del_key(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DelKeySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/DropStore" => {
                    #[allow(non_camel_case_types)]
                    struct DropStoreSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::DropStore>
                        for DropStoreSvc<T>
                    {
                        type Response = super::super::super::ai::server::Del;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::DropStore>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as AiService>::drop_store(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DropStoreSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/ListClients" => {
                    #[allow(non_camel_case_types)]
                    struct ListClientsSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::ListClients>
                        for ListClientsSvc<T>
                    {
                        type Response = super::super::super::ai::server::ClientList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::ListClients>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AiService>::list_clients(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListClientsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/ListStores" => {
                    #[allow(non_camel_case_types)]
                    struct ListStoresSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::ListStores>
                        for ListStoresSvc<T>
                    {
                        type Response = super::super::super::ai::server::StoreList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::ListStores>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as AiService>::list_stores(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListStoresSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/PurgeStores" => {
                    #[allow(non_camel_case_types)]
                    struct PurgeStoresSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::PurgeStores>
                        for PurgeStoresSvc<T>
                    {
                        type Response = super::super::super::ai::server::Del;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::PurgeStores>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AiService>::purge_stores(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PurgeStoresSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/Set" => {
                    #[allow(non_camel_case_types)]
                    struct SetSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<super::super::super::ai::query::Set>
                        for SetSvc<T>
                    {
                        type Response = super::super::super::ai::server::Set;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::super::ai::query::Set>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as AiService>::set(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/services.ai_service.AIService/Pipeline" => {
                    #[allow(non_camel_case_types)]
                    struct PipelineSvc<T: AiService>(pub Arc<T>);
                    impl<T: AiService>
                        tonic::server::UnaryService<
                            super::super::super::ai::pipeline::AiRequestPipeline,
                        > for PipelineSvc<T>
                    {
                        type Response = super::super::super::ai::pipeline::AiResponsePipeline;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::ai::pipeline::AiRequestPipeline,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as AiService>::pipeline(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PipelineSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(empty_body());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for AiServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "services.ai_service.AIService";
    impl<T> tonic::server::NamedService for AiServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
