// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Unit {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pong {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientList {
    #[prost(message, repeated, tag = "1")]
    pub clients: ::prost::alloc::vec::Vec<super::super::client::ConnectedClient>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreList {
    #[prost(message, repeated, tag = "1")]
    pub stores: ::prost::alloc::vec::Vec<AiStoreInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InfoServer {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<super::super::shared::info::ServerInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Set {
    #[prost(message, optional, tag = "1")]
    pub upsert: ::core::option::Option<super::super::shared::info::StoreUpsert>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEntry {
    #[prost(message, optional, tag = "1")]
    pub key: ::core::option::Option<super::super::keyval::StoreInput>,
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<super::super::keyval::StoreValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Get {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<GetEntry>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSimNEntry {
    #[prost(message, optional, tag = "1")]
    pub key: ::core::option::Option<super::super::keyval::StoreInput>,
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<super::super::keyval::StoreValue>,
    #[prost(message, optional, tag = "3")]
    pub similarity: ::core::option::Option<super::super::similarity::Similarity>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSimN {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<GetSimNEntry>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Del {
    #[prost(uint32, tag = "1")]
    pub deleted_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateIndex {
    #[prost(uint32, tag = "1")]
    pub created_indexes: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AiStoreInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "super::models::AiModel", tag = "2")]
    pub query_model: i32,
    #[prost(enumeration = "super::models::AiModel", tag = "3")]
    pub index_model: i32,
    #[prost(uint32, tag = "4")]
    pub embedding_size: u32,
}
