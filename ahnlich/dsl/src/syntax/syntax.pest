whitespace = _{ " " | "\t" }

db_query = _{ db_statement ~ (";" ~ db_statement) * }
ai_query = _{ ai_statement ~ (";" ~ ai_statement) * }

ai_statement = _{
    ping |
    info_server |
    list_stores |
    purge_stores |
    get_pred |
    drop_store |
    drop_pred_index |
    create_non_linear_algorithm_index |
    create_pred_index |
    drop_non_linear_algorithm_index |
    ai_create_store |
    ai_del_key |
    ai_set_in_store |
    ai_get_sim_n |
    invalid_statement 
}

db_statement = _{ 
    ping |
    info_server |
    list_stores |
    list_clients |
    drop_store |
    create_pred_index |
    drop_pred_index |
    create_non_linear_algorithm_index |
    drop_non_linear_algorithm_index |
    get_key |
    del_key |
    get_pred |
    get_sim_n |
    create_store |
    set_in_store |
    invalid_statement 
}

ping = { whitespace* ~ ^"ping" ~ whitespace* ~ !(ASCII_ALPHANUMERIC) }
info_server = { whitespace* ~ ^"infoserver" ~ whitespace* ~ !(ASCII_ALPHANUMERIC)}
list_stores = { whitespace* ~ ^"liststores" ~ whitespace* ~ !(ASCII_ALPHANUMERIC)}
list_clients = { whitespace* ~ ^"listclients" ~ whitespace* ~ !(ASCII_ALPHANUMERIC)}
purge_stores = { whitespace* ~ ^"purgestores" ~ whitespace* ~ !(ASCII_ALPHANUMERIC)}
drop_store = { whitespace* ~ ^"dropstore" ~ whitespace* ~ store_name ~ (if_exists | invalid_statement)?}
create_pred_index = { whitespace* ~ ^"createpredindex" ~ whitespace* ~ "(" ~ index_names ~ ")" ~ in_ignored ~ store_name }
create_non_linear_algorithm_index = { whitespace* ~ ^"createnonlinearalgorithmindex" ~ whitespace* ~ "(" ~ non_linear_algorithms ~ ")" ~ in_ignored ~ store_name}
drop_pred_index = { whitespace* ~ ^"droppredindex" ~ whitespace* ~ (if_exists)? ~ "(" ~ index_names ~ ")" ~ in_ignored ~ store_name }
drop_non_linear_algorithm_index = { whitespace* ~ ^"dropnonlinearalgorithmindex" ~ whitespace* ~ (if_exists)? ~ "(" ~ non_linear_algorithms ~ ")" ~ in_ignored ~ store_name }
get_key = { whitespace* ~ ^"getkey" ~ whitespace* ~ "(" ~ f32_arrays ~ ")" ~ in_ignored ~ store_name }
del_key = { whitespace* ~ ^"delkey" ~ whitespace* ~ "(" ~ f32_arrays ~ ")" ~ in_ignored ~ store_name }
ai_del_key = { whitespace* ~ ^"delkey" ~ whitespace* ~ "(" ~ store_inputs ~ ")" ~ in_ignored ~ store_name }
get_pred = { whitespace* ~ ^"getpred" ~ whitespace* ~ predicate_condition ~ in_ignored ~ store_name }
// GETSIMN 2 WITH store-key USING algorithm IN store (WHERE predicate_condition)
get_sim_n = { whitespace* ~ ^"getsimn" ~ whitespace* ~ non_zero ~ whitespace* ~ ^"with" ~ whitespace* ~ f32_array ~ whitespace* ~ ^"using" ~ whitespace* ~ algorithm ~ whitespace* ~ in_ignored ~ whitespace* ~ store_name ~ whitespace* ~ (^"where" ~ whitespace* ~ predicate_condition)? }
ai_get_sim_n = { whitespace* ~ ^"getsimn" ~ whitespace* ~ non_zero ~ whitespace* ~ ^"with" ~ whitespace* ~ "[" ~ whitespace* ~ metadata_value ~ whitespace* ~ "]" ~ whitespace* ~ ^"using" ~ whitespace* ~ algorithm ~ whitespace* ~ in_ignored ~ whitespace* ~ store_name ~ whitespace* ~ (^"where" ~ whitespace* ~ predicate_condition)? }
// CREATESTORE IF NOT EXISTS store-name DIMENSION non-zero-size PREDICATES (key1, key2) NONLINEARALGORITHMINDEX (kdtree) 
create_store = { whitespace* ~ ^"createstore" ~ whitespace* ~ (if_not_exists)? ~ whitespace* ~ store_name ~ whitespace* ~ ^"dimension" ~ whitespace* ~ non_zero ~ whitespace* ~ (^"predicates" ~ whitespace* ~ "(" ~ whitespace* ~ metadata_keys ~ whitespace* ~ ")" )? ~ (whitespace* ~ ^"nonlinearalgorithmindex" ~ whitespace* ~ "(" ~ whitespace* ~ non_linear_algorithms ~ whitespace* ~ ")")? }
// CREATESTORE IF NOT EXISTS store-name QUERYMODEL model INDEXMODEL model PREDICATES (key1, key2) NONLINEARALGORITHMINDEX (kdtree) 
ai_create_store = { whitespace* ~ ^"createstore" ~ whitespace* ~ store_name ~ whitespace* ~ ^"querymodel" ~ whitespace* ~ ai_model ~ whitespace* ~ ^"indexmodel" ~ whitespace* ~ ai_model ~ whitespace* ~ (^"predicates" ~ whitespace* ~ "(" ~ whitespace* ~ metadata_keys ~ whitespace* ~ ")" )? ~ (whitespace* ~ ^"nonlinearalgorithmindex" ~ whitespace* ~ "(" ~ whitespace* ~ non_linear_algorithms ~ whitespace* ~ ")")? }
set_in_store = { whitespace* ~ ^"set" ~ whitespace* ~ store_keys_to_store_value ~ whitespace* ~ ^"in" ~ whitespace* ~ store_name }
ai_set_in_store = { whitespace* ~ ^"set" ~ whitespace* ~ store_inputs_to_store_value ~ whitespace* ~ ^"in" ~ whitespace* ~ store_name ~ whitespace* ~ ^"preprocessaction" ~ whitespace* ~ preprocess_action }

if_exists = { whitespace* ~ ^"if" ~ whitespace* ~ ^"exists" ~ whitespace* }
if_not_exists = { whitespace* ~ ^"if" ~ whitespace* ~ ^"not" ~ whitespace* ~ ^"exists" ~ whitespace* }

// stores and predicates can be alphanumeric
store_name = { (ASCII_ALPHANUMERIC | "_" | "-")+ }
index_name = { (ASCII_ALPHANUMERIC | "_" | "-")+ }
metadata_key = { (ASCII_ALPHANUMERIC | "_" | "-")+ }
metadata_keys = { metadata_key ~ (whitespace* ~ "," ~ whitespace* ~ metadata_key)* }
store_value_single = { metadata_key ~ whitespace* ~ ":" ~ whitespace* ~ metadata_value }
store_value = { "{" ~ whitespace* ~ store_value_single ~ (whitespace* ~ "," ~ whitespace* ~ store_value_single)* ~ whitespace* ~ "}" }
store_key_to_store_value = { "(" ~ whitespace* ~ f32_array ~ whitespace* ~ "," ~ whitespace* ~ store_value ~ whitespace* ~ ")" }
store_input_to_store_value = { "(" ~ whitespace* ~ "[" ~ whitespace* ~ metadata_value ~ whitespace* ~ "]" ~ whitespace* ~ "," ~ whitespace* ~ store_value ~ whitespace* ~ ")" }
store_keys_to_store_value = { "(" ~ whitespace* ~ store_key_to_store_value ~ (whitespace* ~ "," ~ whitespace* ~ store_key_to_store_value)* ~ whitespace* ~ ")" }
store_inputs_to_store_value = { "(" ~ whitespace* ~ store_input_to_store_value ~ (whitespace* ~ "," ~ whitespace* ~ store_input_to_store_value)* ~ whitespace* ~ ")" }
non_linear_algorithm = { ^"kdtree" }
algorithm = { 
    ^"kdtree" |
    ^"euclideandistance" |
    ^"cosinesimilarity" |
    "dotproductsimilarity"
}
non_linear_algorithms = { non_linear_algorithm ~ (whitespace* ~ "," ~ whitespace* ~ non_linear_algorithm)* }
index_names = { index_name ~ (whitespace* ~ "," ~ whitespace* ~ index_name)* }
ai_model = {
    ^"dalle3" |
    ^"llama3"
}
preprocess_action = {
    ^"truncateiftokensexceed" |
    ^"erroriftokensexceed" |
    ^"resizeimage" |
    ^"errorifdimensionsmismatch"
}

// Numbers
non_zero = { '1'..'9' ~ ASCII_DIGIT* }
f32 = { ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
// Array of floating-point numbers
f32_array = { "[" ~ whitespace* ~ f32 ~ (whitespace* ~ "," ~ whitespace* ~ f32)* ~ whitespace* ~ "]"}

// List of f32 arrays (comma-separated)
f32_arrays = { f32_array ~ (whitespace* ~ "," ~ whitespace* ~ f32_array)* }


// raw string. For simplicity no quotes, commas or closing braces in the string
raw_string = { (!("," | "[" | "(" | ")" | "]" | "}" ) ~ ANY)+ }
ASCII_HEX = { '0'..'9' | 'A'..'F' | 'a'..'f' }
// image contains all possible ascii hex
image = { "/x" ~ ASCII_HEX+ }
metadata_value = _{ image | raw_string }
// list of metadata_values
store_inputs = { whitespace* ~ "[" ~ whitespace* ~ metadata_value ~ whitespace* ~ "]" ~ (whitespace* ~ "," ~ whitespace* ~ "[" ~ whitespace* ~ metadata_value ~ whitespace* ~ "]")* }

in_ignored = _{ whitespace* ~ ^"in" ~ whitespace* }

// predicate functions
equals = { whitespace* ~ ^"=" ~ whitespace* }
in_op = { whitespace* ~ ^"in" ~ whitespace* }
not_equals = { whitespace* ~ "!=" ~ whitespace* }
not_in = { whitespace* ~ ^"not" ~ in_op }
and = { whitespace* ~ ^"and" ~ whitespace* }
or = { whitespace* ~ ^"or" ~ whitespace* }
metadata_values = { "(" ~ whitespace* ~ metadata_value ~ (whitespace* ~ "," ~ whitespace* ~ metadata_value)* ~ whitespace* ~ ")" }
simple_expression = { 
    (metadata_key ~ (in_op | not_in) ~ whitespace* ~ metadata_values) |
    (metadata_key ~ (equals | not_equals) ~ whitespace* ~ metadata_value)
   }
compound_expression = {
 "(" ~ whitespace* ~ predicate_expression ~ whitespace* ~ ")" ~ (whitespace* ~ (and | or) ~ whitespace* ~ predicate_expression)*
}
predicate_expression = _{
  simple_expression | compound_expression
}
predicate_condition = {
 whitespace* ~ "(" ~ whitespace* ~ predicate_expression ~ whitespace* ~ ")" ~ whitespace*
}

// Catch-all rule for invalid statements
invalid_statement = { whitespace* ~ (!";" ~ ANY)+ } // Match anything that isn't a valid statement
